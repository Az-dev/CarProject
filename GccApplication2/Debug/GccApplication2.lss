
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000720  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000720  000007b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080006a  0080006a  000007be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019a6  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b14  00000000  00000000  000023e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001279  00000000  00000000  00002ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007f0  00000000  00000000  00004170  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f62  00000000  00000000  00004960  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001053  00000000  00000000  000058c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00006915  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 88 01 	jmp	0x310	; 0x310 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 1d 03 	jmp	0x63a	; 0x63a <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__vector_10>
  2c:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4b 01 	call	0x296	; 0x296 <main>
  8a:	0c 94 8e 03 	jmp	0x71c	; 0x71c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <gpioPinWrite>:
		pin_val = PORTD_PIN & u8_pin;		/* set pins*/
		break;
	}
	if(!pin_val) return 0x00;
	else return 0x01;
}
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <gpioPinWrite+0x6>
  98:	1f 92       	push	r1
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	89 83       	std	Y+1, r24	; 0x01
  a0:	6a 83       	std	Y+2, r22	; 0x02
  a2:	4b 83       	std	Y+3, r20	; 0x03
  a4:	8b 81       	ldd	r24, Y+3	; 0x03
  a6:	88 23       	and	r24, r24
  a8:	09 f0       	breq	.+2      	; 0xac <gpioPinWrite+0x1a>
  aa:	42 c0       	rjmp	.+132    	; 0x130 <gpioPinWrite+0x9e>
  ac:	8a 81       	ldd	r24, Y+2	; 0x02
  ae:	80 95       	com	r24
  b0:	8a 83       	std	Y+2, r24	; 0x02
  b2:	89 81       	ldd	r24, Y+1	; 0x01
  b4:	88 2f       	mov	r24, r24
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	91 05       	cpc	r25, r1
  bc:	b9 f0       	breq	.+46     	; 0xec <gpioPinWrite+0x5a>
  be:	82 30       	cpi	r24, 0x02	; 2
  c0:	91 05       	cpc	r25, r1
  c2:	1c f4       	brge	.+6      	; 0xca <gpioPinWrite+0x38>
  c4:	89 2b       	or	r24, r25
  c6:	39 f0       	breq	.+14     	; 0xd6 <gpioPinWrite+0x44>
  c8:	71 c0       	rjmp	.+226    	; 0x1ac <gpioPinWrite+0x11a>
  ca:	82 30       	cpi	r24, 0x02	; 2
  cc:	91 05       	cpc	r25, r1
  ce:	c9 f0       	breq	.+50     	; 0x102 <gpioPinWrite+0x70>
  d0:	03 97       	sbiw	r24, 0x03	; 3
  d2:	11 f1       	breq	.+68     	; 0x118 <gpioPinWrite+0x86>
  d4:	6b c0       	rjmp	.+214    	; 0x1ac <gpioPinWrite+0x11a>
  d6:	8b e3       	ldi	r24, 0x3B	; 59
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	2b e3       	ldi	r18, 0x3B	; 59
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	f9 01       	movw	r30, r18
  e0:	30 81       	ld	r19, Z
  e2:	2a 81       	ldd	r18, Y+2	; 0x02
  e4:	23 23       	and	r18, r19
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
  ea:	60 c0       	rjmp	.+192    	; 0x1ac <gpioPinWrite+0x11a>
  ec:	88 e3       	ldi	r24, 0x38	; 56
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	28 e3       	ldi	r18, 0x38	; 56
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	f9 01       	movw	r30, r18
  f6:	30 81       	ld	r19, Z
  f8:	2a 81       	ldd	r18, Y+2	; 0x02
  fa:	23 23       	and	r18, r19
  fc:	fc 01       	movw	r30, r24
  fe:	20 83       	st	Z, r18
 100:	55 c0       	rjmp	.+170    	; 0x1ac <gpioPinWrite+0x11a>
 102:	85 e3       	ldi	r24, 0x35	; 53
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	25 e3       	ldi	r18, 0x35	; 53
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	f9 01       	movw	r30, r18
 10c:	30 81       	ld	r19, Z
 10e:	2a 81       	ldd	r18, Y+2	; 0x02
 110:	23 23       	and	r18, r19
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
 116:	4a c0       	rjmp	.+148    	; 0x1ac <gpioPinWrite+0x11a>
 118:	82 e3       	ldi	r24, 0x32	; 50
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	22 e3       	ldi	r18, 0x32	; 50
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	f9 01       	movw	r30, r18
 122:	30 81       	ld	r19, Z
 124:	2a 81       	ldd	r18, Y+2	; 0x02
 126:	23 23       	and	r18, r19
 128:	fc 01       	movw	r30, r24
 12a:	20 83       	st	Z, r18
 12c:	00 00       	nop
 12e:	3e c0       	rjmp	.+124    	; 0x1ac <gpioPinWrite+0x11a>
 130:	89 81       	ldd	r24, Y+1	; 0x01
 132:	88 2f       	mov	r24, r24
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	91 05       	cpc	r25, r1
 13a:	b9 f0       	breq	.+46     	; 0x16a <gpioPinWrite+0xd8>
 13c:	82 30       	cpi	r24, 0x02	; 2
 13e:	91 05       	cpc	r25, r1
 140:	1c f4       	brge	.+6      	; 0x148 <gpioPinWrite+0xb6>
 142:	89 2b       	or	r24, r25
 144:	39 f0       	breq	.+14     	; 0x154 <gpioPinWrite+0xc2>
 146:	32 c0       	rjmp	.+100    	; 0x1ac <gpioPinWrite+0x11a>
 148:	82 30       	cpi	r24, 0x02	; 2
 14a:	91 05       	cpc	r25, r1
 14c:	c9 f0       	breq	.+50     	; 0x180 <gpioPinWrite+0xee>
 14e:	03 97       	sbiw	r24, 0x03	; 3
 150:	11 f1       	breq	.+68     	; 0x196 <gpioPinWrite+0x104>
 152:	2c c0       	rjmp	.+88     	; 0x1ac <gpioPinWrite+0x11a>
 154:	8b e3       	ldi	r24, 0x3B	; 59
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	2b e3       	ldi	r18, 0x3B	; 59
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	f9 01       	movw	r30, r18
 15e:	30 81       	ld	r19, Z
 160:	2a 81       	ldd	r18, Y+2	; 0x02
 162:	23 2b       	or	r18, r19
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18
 168:	21 c0       	rjmp	.+66     	; 0x1ac <gpioPinWrite+0x11a>
 16a:	88 e3       	ldi	r24, 0x38	; 56
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	28 e3       	ldi	r18, 0x38	; 56
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	f9 01       	movw	r30, r18
 174:	30 81       	ld	r19, Z
 176:	2a 81       	ldd	r18, Y+2	; 0x02
 178:	23 2b       	or	r18, r19
 17a:	fc 01       	movw	r30, r24
 17c:	20 83       	st	Z, r18
 17e:	16 c0       	rjmp	.+44     	; 0x1ac <gpioPinWrite+0x11a>
 180:	85 e3       	ldi	r24, 0x35	; 53
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	25 e3       	ldi	r18, 0x35	; 53
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	f9 01       	movw	r30, r18
 18a:	30 81       	ld	r19, Z
 18c:	2a 81       	ldd	r18, Y+2	; 0x02
 18e:	23 2b       	or	r18, r19
 190:	fc 01       	movw	r30, r24
 192:	20 83       	st	Z, r18
 194:	0b c0       	rjmp	.+22     	; 0x1ac <gpioPinWrite+0x11a>
 196:	82 e3       	ldi	r24, 0x32	; 50
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	22 e3       	ldi	r18, 0x32	; 50
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	f9 01       	movw	r30, r18
 1a0:	30 81       	ld	r19, Z
 1a2:	2a 81       	ldd	r18, Y+2	; 0x02
 1a4:	23 2b       	or	r18, r19
 1a6:	fc 01       	movw	r30, r24
 1a8:	20 83       	st	Z, r18
 1aa:	00 00       	nop
 1ac:	00 00       	nop
 1ae:	0f 90       	pop	r0
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <gpioPortDirection>:
 * @param direction: set the port direction and takes the following values
 * 				- 0x00 -> Input
 * 				- 0xff -> Output
 */
void gpioPortDirection(uint8_t u8_port, uint8_t u8_direction)
{
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	00 d0       	rcall	.+0      	; 0x1c0 <gpioPortDirection+0x6>
 1c0:	cd b7       	in	r28, 0x3d	; 61
 1c2:	de b7       	in	r29, 0x3e	; 62
 1c4:	89 83       	std	Y+1, r24	; 0x01
 1c6:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8_port)
 1c8:	89 81       	ldd	r24, Y+1	; 0x01
 1ca:	88 2f       	mov	r24, r24
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	91 05       	cpc	r25, r1
 1d2:	91 f0       	breq	.+36     	; 0x1f8 <gpioPortDirection+0x3e>
 1d4:	82 30       	cpi	r24, 0x02	; 2
 1d6:	91 05       	cpc	r25, r1
 1d8:	1c f4       	brge	.+6      	; 0x1e0 <gpioPortDirection+0x26>
 1da:	89 2b       	or	r24, r25
 1dc:	39 f0       	breq	.+14     	; 0x1ec <gpioPortDirection+0x32>
		break;
		case 3: /* GPIOD */
		PORTD_DIR = u8_direction;
		break;
	}	
}
 1de:	1e c0       	rjmp	.+60     	; 0x21c <gpioPortDirection+0x62>
 * 				- 0x00 -> Input
 * 				- 0xff -> Output
 */
void gpioPortDirection(uint8_t u8_port, uint8_t u8_direction)
{
	switch(u8_port)
 1e0:	82 30       	cpi	r24, 0x02	; 2
 1e2:	91 05       	cpc	r25, r1
 1e4:	79 f0       	breq	.+30     	; 0x204 <gpioPortDirection+0x4a>
 1e6:	03 97       	sbiw	r24, 0x03	; 3
 1e8:	99 f0       	breq	.+38     	; 0x210 <gpioPortDirection+0x56>
		break;
		case 3: /* GPIOD */
		PORTD_DIR = u8_direction;
		break;
	}	
}
 1ea:	18 c0       	rjmp	.+48     	; 0x21c <gpioPortDirection+0x62>
void gpioPortDirection(uint8_t u8_port, uint8_t u8_direction)
{
	switch(u8_port)
	{
		case 0: /* GPIOA */
		PORTA_DIR = u8_direction;
 1ec:	8a e3       	ldi	r24, 0x3A	; 58
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	2a 81       	ldd	r18, Y+2	; 0x02
 1f2:	fc 01       	movw	r30, r24
 1f4:	20 83       	st	Z, r18
		break;
 1f6:	12 c0       	rjmp	.+36     	; 0x21c <gpioPortDirection+0x62>
		case 1: /* GPIOB */
		PORTB_DIR = u8_direction;
 1f8:	87 e3       	ldi	r24, 0x37	; 55
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	2a 81       	ldd	r18, Y+2	; 0x02
 1fe:	fc 01       	movw	r30, r24
 200:	20 83       	st	Z, r18
		break;
 202:	0c c0       	rjmp	.+24     	; 0x21c <gpioPortDirection+0x62>
		case 2: /* GPIOC */
		PORTC_DIR = u8_direction;
 204:	84 e3       	ldi	r24, 0x34	; 52
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	2a 81       	ldd	r18, Y+2	; 0x02
 20a:	fc 01       	movw	r30, r24
 20c:	20 83       	st	Z, r18
		break;
 20e:	06 c0       	rjmp	.+12     	; 0x21c <gpioPortDirection+0x62>
		case 3: /* GPIOD */
		PORTD_DIR = u8_direction;
 210:	81 e3       	ldi	r24, 0x31	; 49
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	2a 81       	ldd	r18, Y+2	; 0x02
 216:	fc 01       	movw	r30, r24
 218:	20 83       	st	Z, r18
		break;
 21a:	00 00       	nop
	}	
}
 21c:	00 00       	nop
 21e:	0f 90       	pop	r0
 220:	0f 90       	pop	r0
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	08 95       	ret

00000228 <gpioPortWrite>:
 * @param value: set the port value and takes the following values
 * 				- 0x00 -> Low
 * 				- 0xff -> High
 */
void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	00 d0       	rcall	.+0      	; 0x22e <gpioPortWrite+0x6>
 22e:	cd b7       	in	r28, 0x3d	; 61
 230:	de b7       	in	r29, 0x3e	; 62
 232:	89 83       	std	Y+1, r24	; 0x01
 234:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8_port)
 236:	89 81       	ldd	r24, Y+1	; 0x01
 238:	88 2f       	mov	r24, r24
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	91 05       	cpc	r25, r1
 240:	91 f0       	breq	.+36     	; 0x266 <gpioPortWrite+0x3e>
 242:	82 30       	cpi	r24, 0x02	; 2
 244:	91 05       	cpc	r25, r1
 246:	1c f4       	brge	.+6      	; 0x24e <gpioPortWrite+0x26>
 248:	89 2b       	or	r24, r25
 24a:	39 f0       	breq	.+14     	; 0x25a <gpioPortWrite+0x32>
		case 3: /* GPIOD */
		PORTD_DATA = u8_value;
		break;
	}
	
}
 24c:	1e c0       	rjmp	.+60     	; 0x28a <gpioPortWrite+0x62>
 * 				- 0x00 -> Low
 * 				- 0xff -> High
 */
void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
	switch(u8_port)
 24e:	82 30       	cpi	r24, 0x02	; 2
 250:	91 05       	cpc	r25, r1
 252:	79 f0       	breq	.+30     	; 0x272 <gpioPortWrite+0x4a>
 254:	03 97       	sbiw	r24, 0x03	; 3
 256:	99 f0       	breq	.+38     	; 0x27e <gpioPortWrite+0x56>
		case 3: /* GPIOD */
		PORTD_DATA = u8_value;
		break;
	}
	
}
 258:	18 c0       	rjmp	.+48     	; 0x28a <gpioPortWrite+0x62>
void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
	switch(u8_port)
	{
		case 0: /* GPIOA */
		PORTA_DATA = u8_value;
 25a:	8b e3       	ldi	r24, 0x3B	; 59
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	2a 81       	ldd	r18, Y+2	; 0x02
 260:	fc 01       	movw	r30, r24
 262:	20 83       	st	Z, r18
		break;
 264:	12 c0       	rjmp	.+36     	; 0x28a <gpioPortWrite+0x62>
		case 1: /* GPIOB */
		PORTB_DATA = u8_value;
 266:	88 e3       	ldi	r24, 0x38	; 56
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	2a 81       	ldd	r18, Y+2	; 0x02
 26c:	fc 01       	movw	r30, r24
 26e:	20 83       	st	Z, r18
		break;
 270:	0c c0       	rjmp	.+24     	; 0x28a <gpioPortWrite+0x62>
		case 2: /* GPIOC */
		PORTC_DATA = u8_value;
 272:	85 e3       	ldi	r24, 0x35	; 53
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	2a 81       	ldd	r18, Y+2	; 0x02
 278:	fc 01       	movw	r30, r24
 27a:	20 83       	st	Z, r18
		break;
 27c:	06 c0       	rjmp	.+12     	; 0x28a <gpioPortWrite+0x62>
		case 3: /* GPIOD */
		PORTD_DATA = u8_value;
 27e:	82 e3       	ldi	r24, 0x32	; 50
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	2a 81       	ldd	r18, Y+2	; 0x02
 284:	fc 01       	movw	r30, r24
 286:	20 83       	st	Z, r18
		break;
 288:	00 00       	nop
	}
	
}
 28a:	00 00       	nop
 28c:	0f 90       	pop	r0
 28e:	0f 90       	pop	r0
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <main>:
         gu_distance_read = LOW;
         gpioPinWrite(ULTRA_EN_GPIO,ULTRA_ENABLE_BIT,HIGH);         
         timer0DelayMs(1);
         gpioPinWrite(ULTRA_EN_GPIO,ULTRA_ENABLE_BIT,LOW);                     
      }     
   }
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
 29e:	0e 94 56 01 	call	0x2ac	; 0x2ac <myUsartFullDuplexInterruptTest>
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <myUsartFullDuplexInterruptTest>:
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
 2b8:	0e 94 3e 03 	call	0x67c	; 0x67c <Usart_Init>
 2bc:	6f ef       	ldi	r22, 0xFF	; 255
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <gpioPortDirection>
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	0e 94 14 01 	call	0x228	; 0x228 <gpioPortWrite>
 2cc:	00 91 60 00 	lds	r16, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2d0:	10 91 61 00 	lds	r17, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2d4:	0e 94 83 03 	call	0x706	; 0x706 <UsartReadRx>
 2d8:	f8 01       	movw	r30, r16
 2da:	80 83       	st	Z, r24
 2dc:	64 ef       	ldi	r22, 0xF4	; 244
 2de:	71 e0       	ldi	r23, 0x01	; 1
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 1f 02 	call	0x43e	; 0x43e <softwareDelayMs>
 2e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2ec:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2f0:	fc 01       	movw	r30, r24
 2f2:	80 81       	ld	r24, Z
 2f4:	80 53       	subi	r24, 0x30	; 48
 2f6:	82 95       	swap	r24
 2f8:	80 7f       	andi	r24, 0xF0	; 240
 2fa:	68 2f       	mov	r22, r24
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	0e 94 14 01 	call	0x228	; 0x228 <gpioPortWrite>
 302:	68 ee       	ldi	r22, 0xE8	; 232
 304:	73 e0       	ldi	r23, 0x03	; 3
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 1f 02 	call	0x43e	; 0x43e <softwareDelayMs>
 30e:	de cf       	rjmp	.-68     	; 0x2cc <myUsartFullDuplexInterruptTest+0x20>

00000310 <__vector_3>:
   
}

/************ INT2 ISR ***********/
ISR_INT2()
{
 310:	78 94       	sei
 312:	1f 92       	push	r1
 314:	0f 92       	push	r0
 316:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 31a:	0f 92       	push	r0
 31c:	11 24       	eor	r1, r1
 31e:	2f 93       	push	r18
 320:	3f 93       	push	r19
 322:	4f 93       	push	r20
 324:	5f 93       	push	r21
 326:	6f 93       	push	r22
 328:	7f 93       	push	r23
 32a:	8f 93       	push	r24
 32c:	9f 93       	push	r25
 32e:	af 93       	push	r26
 330:	bf 93       	push	r27
 332:	ef 93       	push	r30
 334:	ff 93       	push	r31
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	cd b7       	in	r28, 0x3d	; 61
 33c:	de b7       	in	r29, 0x3e	; 62
   if(MCUCSR & BIT6)  /* if ISC2 is set --> Rising edge */
 33e:	84 e5       	ldi	r24, 0x54	; 84
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	fc 01       	movw	r30, r24
 344:	80 81       	ld	r24, Z
 346:	88 2f       	mov	r24, r24
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	80 74       	andi	r24, 0x40	; 64
 34c:	99 27       	eor	r25, r25
 34e:	89 2b       	or	r24, r25
 350:	39 f1       	breq	.+78     	; 0x3a0 <__vector_3+0x90>
   {
      /*start timer2*/
      timer2Start();
 352:	0e 94 8f 02 	call	0x51e	; 0x51e <timer2Start>
      /*change edge*/
      /**********/
      /*Disable INT2*/
      GICR &= ~(BIT5);
 356:	8b e5       	ldi	r24, 0x5B	; 91
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	2b e5       	ldi	r18, 0x5B	; 91
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	f9 01       	movw	r30, r18
 360:	20 81       	ld	r18, Z
 362:	2f 7d       	andi	r18, 0xDF	; 223
 364:	fc 01       	movw	r30, r24
 366:	20 83       	st	Z, r18
      /*Set ISC2 to (0) : that will fire INT2 on falling edge */
      MCUCSR &= (~BIT6);      
 368:	84 e5       	ldi	r24, 0x54	; 84
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	24 e5       	ldi	r18, 0x54	; 84
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	f9 01       	movw	r30, r18
 372:	20 81       	ld	r18, Z
 374:	2f 7b       	andi	r18, 0xBF	; 191
 376:	fc 01       	movw	r30, r24
 378:	20 83       	st	Z, r18
      /*Reset INTF2 flag bit by setting 1*/
      GIFR |= BIT5;
 37a:	8a e5       	ldi	r24, 0x5A	; 90
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	2a e5       	ldi	r18, 0x5A	; 90
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	f9 01       	movw	r30, r18
 384:	20 81       	ld	r18, Z
 386:	20 62       	ori	r18, 0x20	; 32
 388:	fc 01       	movw	r30, r24
 38a:	20 83       	st	Z, r18
      /*Enable INT2*/
      GICR |= (BIT5);            
 38c:	8b e5       	ldi	r24, 0x5B	; 91
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	2b e5       	ldi	r18, 0x5B	; 91
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	f9 01       	movw	r30, r18
 396:	20 81       	ld	r18, Z
 398:	20 62       	ori	r18, 0x20	; 32
 39a:	fc 01       	movw	r30, r24
 39c:	20 83       	st	Z, r18
      GICR |= (BIT5);
      /*set read flag*/
      gu_distance_read = HIGH;
   }    
   
}
 39e:	3a c0       	rjmp	.+116    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
      /*Reset INTF2 flag bit by setting 1*/
      GIFR |= BIT5;
      /*Enable INT2*/
      GICR |= (BIT5);            
   }
   else if(!(MCUCSR & BIT6)) /* if ISC2 is set to (0) --> Falling Edge */ /* assert its value !!!??*/
 3a0:	84 e5       	ldi	r24, 0x54	; 84
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	fc 01       	movw	r30, r24
 3a6:	80 81       	ld	r24, Z
 3a8:	88 2f       	mov	r24, r24
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	80 74       	andi	r24, 0x40	; 64
 3ae:	99 27       	eor	r25, r25
 3b0:	89 2b       	or	r24, r25
 3b2:	81 f5       	brne	.+96     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
   {
      /*stop timer counter*/
      timer2Stop();
 3b4:	0e 94 a5 02 	call	0x54a	; 0x54a <timer2Stop>
      /*read TCNT2*/
      gu_sw_icu = timer2Read();
 3b8:	0e 94 84 02 	call	0x508	; 0x508 <timer2Read>
 3bc:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <gu_sw_icu>
      /*Reset TCNT2*/
      timer2Set(0);
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	0e 94 56 02 	call	0x4ac	; 0x4ac <timer2Set>
      /*change edge*/
      /**********/
      /*Disable INT2*/
      GICR &= ~(BIT5);
 3c6:	8b e5       	ldi	r24, 0x5B	; 91
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	2b e5       	ldi	r18, 0x5B	; 91
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	f9 01       	movw	r30, r18
 3d0:	20 81       	ld	r18, Z
 3d2:	2f 7d       	andi	r18, 0xDF	; 223
 3d4:	fc 01       	movw	r30, r24
 3d6:	20 83       	st	Z, r18
      /*Set ISC2 to (1) : that will fire INT2 on rising edge */
      MCUCSR |= (BIT6);      
 3d8:	84 e5       	ldi	r24, 0x54	; 84
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	24 e5       	ldi	r18, 0x54	; 84
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	f9 01       	movw	r30, r18
 3e2:	20 81       	ld	r18, Z
 3e4:	20 64       	ori	r18, 0x40	; 64
 3e6:	fc 01       	movw	r30, r24
 3e8:	20 83       	st	Z, r18
      /*Reset INTF2 flag bit by setting 1*/
      GIFR |= BIT5;
 3ea:	8a e5       	ldi	r24, 0x5A	; 90
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	2a e5       	ldi	r18, 0x5A	; 90
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	f9 01       	movw	r30, r18
 3f4:	20 81       	ld	r18, Z
 3f6:	20 62       	ori	r18, 0x20	; 32
 3f8:	fc 01       	movw	r30, r24
 3fa:	20 83       	st	Z, r18
      /*Enable INT2*/
      GICR |= (BIT5);
 3fc:	8b e5       	ldi	r24, 0x5B	; 91
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	2b e5       	ldi	r18, 0x5B	; 91
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	f9 01       	movw	r30, r18
 406:	20 81       	ld	r18, Z
 408:	20 62       	ori	r18, 0x20	; 32
 40a:	fc 01       	movw	r30, r24
 40c:	20 83       	st	Z, r18
      /*set read flag*/
      gu_distance_read = HIGH;
 40e:	8f ef       	ldi	r24, 0xFF	; 255
 410:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
   }    
   
}
 414:	00 00       	nop
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	ff 91       	pop	r31
 41c:	ef 91       	pop	r30
 41e:	bf 91       	pop	r27
 420:	af 91       	pop	r26
 422:	9f 91       	pop	r25
 424:	8f 91       	pop	r24
 426:	7f 91       	pop	r23
 428:	6f 91       	pop	r22
 42a:	5f 91       	pop	r21
 42c:	4f 91       	pop	r20
 42e:	3f 91       	pop	r19
 430:	2f 91       	pop	r18
 432:	0f 90       	pop	r0
 434:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 438:	0f 90       	pop	r0
 43a:	1f 90       	pop	r1
 43c:	18 95       	reti

0000043e <softwareDelayMs>:
 * Description: this delay function operate in a polling manner
 * 				don't use it with RTOSs
 * @param a_delay_in_ms: the milli-seconds
 */
void softwareDelayMs(uint32_t u32_delay_in_ms)
{
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	00 d0       	rcall	.+0      	; 0x444 <softwareDelayMs+0x6>
 444:	00 d0       	rcall	.+0      	; 0x446 <softwareDelayMs+0x8>
 446:	00 d0       	rcall	.+0      	; 0x448 <softwareDelayMs+0xa>
 448:	cd b7       	in	r28, 0x3d	; 61
 44a:	de b7       	in	r29, 0x3e	; 62
 44c:	6b 83       	std	Y+3, r22	; 0x03
 44e:	7c 83       	std	Y+4, r23	; 0x04
 450:	8d 83       	std	Y+5, r24	; 0x05
 452:	9e 83       	std	Y+6, r25	; 0x06
	while(u32_delay_in_ms > 0)
 454:	19 c0       	rjmp	.+50     	; 0x488 <softwareDelayMs+0x4a>
	{
		volatile uint16_t i = 360;
 456:	88 e6       	ldi	r24, 0x68	; 104
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	9a 83       	std	Y+2, r25	; 0x02
 45c:	89 83       	std	Y+1, r24	; 0x01
		while(i>0)
 45e:	05 c0       	rjmp	.+10     	; 0x46a <softwareDelayMs+0x2c>
		{
			i--;
 460:	89 81       	ldd	r24, Y+1	; 0x01
 462:	9a 81       	ldd	r25, Y+2	; 0x02
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	9a 83       	std	Y+2, r25	; 0x02
 468:	89 83       	std	Y+1, r24	; 0x01
void softwareDelayMs(uint32_t u32_delay_in_ms)
{
	while(u32_delay_in_ms > 0)
	{
		volatile uint16_t i = 360;
		while(i>0)
 46a:	89 81       	ldd	r24, Y+1	; 0x01
 46c:	9a 81       	ldd	r25, Y+2	; 0x02
 46e:	89 2b       	or	r24, r25
 470:	b9 f7       	brne	.-18     	; 0x460 <softwareDelayMs+0x22>
		{
			i--;
		}
		u32_delay_in_ms--;		
 472:	8b 81       	ldd	r24, Y+3	; 0x03
 474:	9c 81       	ldd	r25, Y+4	; 0x04
 476:	ad 81       	ldd	r26, Y+5	; 0x05
 478:	be 81       	ldd	r27, Y+6	; 0x06
 47a:	01 97       	sbiw	r24, 0x01	; 1
 47c:	a1 09       	sbc	r26, r1
 47e:	b1 09       	sbc	r27, r1
 480:	8b 83       	std	Y+3, r24	; 0x03
 482:	9c 83       	std	Y+4, r25	; 0x04
 484:	ad 83       	std	Y+5, r26	; 0x05
 486:	be 83       	std	Y+6, r27	; 0x06
 * 				don't use it with RTOSs
 * @param a_delay_in_ms: the milli-seconds
 */
void softwareDelayMs(uint32_t u32_delay_in_ms)
{
	while(u32_delay_in_ms > 0)
 488:	8b 81       	ldd	r24, Y+3	; 0x03
 48a:	9c 81       	ldd	r25, Y+4	; 0x04
 48c:	ad 81       	ldd	r26, Y+5	; 0x05
 48e:	be 81       	ldd	r27, Y+6	; 0x06
 490:	89 2b       	or	r24, r25
 492:	8a 2b       	or	r24, r26
 494:	8b 2b       	or	r24, r27
 496:	f9 f6       	brne	.-66     	; 0x456 <softwareDelayMs+0x18>
		{
			i--;
		}
		u32_delay_in_ms--;		
	}
}
 498:	00 00       	nop
 49a:	26 96       	adiw	r28, 0x06	; 6
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	f8 94       	cli
 4a0:	de bf       	out	0x3e, r29	; 62
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	cd bf       	out	0x3d, r28	; 61
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <timer2Set>:
       TIMSK &= ~(timer2.en_interruptMask);
       /* clear Global interrupt bit*/
       cli();
       break;
   } 
}
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	1f 92       	push	r1
 4b2:	cd b7       	in	r28, 0x3d	; 61
 4b4:	de b7       	in	r29, 0x3e	; 62
 4b6:	89 83       	std	Y+1, r24	; 0x01
 4b8:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <timer0>
 4bc:	88 2f       	mov	r24, r24
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	00 97       	sbiw	r24, 0x00	; 0
 4c2:	19 f0       	breq	.+6      	; 0x4ca <timer2Set+0x1e>
 4c4:	08 97       	sbiw	r24, 0x08	; 8
 4c6:	61 f0       	breq	.+24     	; 0x4e0 <timer2Set+0x34>
 4c8:	1a c0       	rjmp	.+52     	; 0x4fe <timer2Set+0x52>
 4ca:	84 e4       	ldi	r24, 0x44	; 68
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	24 e4       	ldi	r18, 0x44	; 68
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	f9 01       	movw	r30, r18
 4d4:	30 81       	ld	r19, Z
 4d6:	29 81       	ldd	r18, Y+1	; 0x01
 4d8:	23 2b       	or	r18, r19
 4da:	fc 01       	movw	r30, r24
 4dc:	20 83       	st	Z, r18
 4de:	0f c0       	rjmp	.+30     	; 0x4fe <timer2Set+0x52>
 4e0:	84 e4       	ldi	r24, 0x44	; 68
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	fc 01       	movw	r30, r24
 4e6:	10 82       	st	Z, r1
 4e8:	83 e4       	ldi	r24, 0x43	; 67
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	23 e4       	ldi	r18, 0x43	; 67
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	f9 01       	movw	r30, r18
 4f2:	30 81       	ld	r19, Z
 4f4:	29 81       	ldd	r18, Y+1	; 0x01
 4f6:	23 2b       	or	r18, r19
 4f8:	fc 01       	movw	r30, r24
 4fa:	20 83       	st	Z, r18
 4fc:	00 00       	nop
 4fe:	00 00       	nop
 500:	0f 90       	pop	r0
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	08 95       	ret

00000508 <timer2Read>:
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	cd b7       	in	r28, 0x3d	; 61
 50e:	de b7       	in	r29, 0x3e	; 62
 510:	84 e4       	ldi	r24, 0x44	; 68
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	fc 01       	movw	r30, r24
 516:	80 81       	ld	r24, Z
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	08 95       	ret

0000051e <timer2Start>:
 51e:	cf 93       	push	r28
 520:	df 93       	push	r29
 522:	cd b7       	in	r28, 0x3d	; 61
 524:	de b7       	in	r29, 0x3e	; 62
 526:	85 e4       	ldi	r24, 0x45	; 69
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	25 e4       	ldi	r18, 0x45	; 69
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	f9 01       	movw	r30, r18
 530:	30 81       	ld	r19, Z
 532:	40 91 74 00 	lds	r20, 0x0074	; 0x800074 <timer2>
 536:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <timer2+0x2>
 53a:	24 2b       	or	r18, r20
 53c:	23 2b       	or	r18, r19
 53e:	fc 01       	movw	r30, r24
 540:	20 83       	st	Z, r18
 542:	00 00       	nop
 544:	df 91       	pop	r29
 546:	cf 91       	pop	r28
 548:	08 95       	ret

0000054a <timer2Stop>:
 54a:	cf 93       	push	r28
 54c:	df 93       	push	r29
 54e:	cd b7       	in	r28, 0x3d	; 61
 550:	de b7       	in	r29, 0x3e	; 62
 552:	85 e4       	ldi	r24, 0x45	; 69
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	fc 01       	movw	r30, r24
 558:	80 81       	ld	r24, Z
 55a:	85 e4       	ldi	r24, 0x45	; 69
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	fc 01       	movw	r30, r24
 560:	10 82       	st	Z, r1
 562:	00 00       	nop
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	08 95       	ret

0000056a <__vector_11>:

/************************************************ Timers ISRs Control **********************************************************/
ISR_TIMER0_OVF(){
 56a:	78 94       	sei
 56c:	1f 92       	push	r1
 56e:	0f 92       	push	r0
 570:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 574:	0f 92       	push	r0
 576:	11 24       	eor	r1, r1
 578:	2f 93       	push	r18
 57a:	3f 93       	push	r19
 57c:	4f 93       	push	r20
 57e:	5f 93       	push	r21
 580:	6f 93       	push	r22
 582:	7f 93       	push	r23
 584:	8f 93       	push	r24
 586:	9f 93       	push	r25
 588:	af 93       	push	r26
 58a:	bf 93       	push	r27
 58c:	ef 93       	push	r30
 58e:	ff 93       	push	r31
 590:	cf 93       	push	r28
 592:	df 93       	push	r29
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
   /*reset pins*/
   gpioPinWrite(GPIOD,(BIT4|BIT5),LOW);
 598:	40 e0       	ldi	r20, 0x00	; 0
 59a:	60 e3       	ldi	r22, 0x30	; 48
 59c:	83 e0       	ldi	r24, 0x03	; 3
 59e:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinWrite>
   /*reload TCNT0*/
   TCNT0 = gu8_preloader;  //debug point
 5a2:	82 e5       	ldi	r24, 0x52	; 82
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <gu8_preloader>
 5aa:	fc 01       	movw	r30, r24
 5ac:	20 83       	st	Z, r18
}
 5ae:	00 00       	nop
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
 5b4:	ff 91       	pop	r31
 5b6:	ef 91       	pop	r30
 5b8:	bf 91       	pop	r27
 5ba:	af 91       	pop	r26
 5bc:	9f 91       	pop	r25
 5be:	8f 91       	pop	r24
 5c0:	7f 91       	pop	r23
 5c2:	6f 91       	pop	r22
 5c4:	5f 91       	pop	r21
 5c6:	4f 91       	pop	r20
 5c8:	3f 91       	pop	r19
 5ca:	2f 91       	pop	r18
 5cc:	0f 90       	pop	r0
 5ce:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 5d2:	0f 90       	pop	r0
 5d4:	1f 90       	pop	r1
 5d6:	18 95       	reti

000005d8 <__vector_10>:

ISR_TIMER0_COMP(){
 5d8:	78 94       	sei
 5da:	1f 92       	push	r1
 5dc:	0f 92       	push	r0
 5de:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 5e2:	0f 92       	push	r0
 5e4:	11 24       	eor	r1, r1
 5e6:	2f 93       	push	r18
 5e8:	3f 93       	push	r19
 5ea:	4f 93       	push	r20
 5ec:	5f 93       	push	r21
 5ee:	6f 93       	push	r22
 5f0:	7f 93       	push	r23
 5f2:	8f 93       	push	r24
 5f4:	9f 93       	push	r25
 5f6:	af 93       	push	r26
 5f8:	bf 93       	push	r27
 5fa:	ef 93       	push	r30
 5fc:	ff 93       	push	r31
 5fe:	cf 93       	push	r28
 600:	df 93       	push	r29
 602:	cd b7       	in	r28, 0x3d	; 61
 604:	de b7       	in	r29, 0x3e	; 62
   /*set pins*/
   gpioPinWrite(GPIOD,(BIT4|BIT5),HIGH);
 606:	4f ef       	ldi	r20, 0xFF	; 255
 608:	60 e3       	ldi	r22, 0x30	; 48
 60a:	83 e0       	ldi	r24, 0x03	; 3
 60c:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinWrite>
}
 610:	00 00       	nop
 612:	df 91       	pop	r29
 614:	cf 91       	pop	r28
 616:	ff 91       	pop	r31
 618:	ef 91       	pop	r30
 61a:	bf 91       	pop	r27
 61c:	af 91       	pop	r26
 61e:	9f 91       	pop	r25
 620:	8f 91       	pop	r24
 622:	7f 91       	pop	r23
 624:	6f 91       	pop	r22
 626:	5f 91       	pop	r21
 628:	4f 91       	pop	r20
 62a:	3f 91       	pop	r19
 62c:	2f 91       	pop	r18
 62e:	0f 90       	pop	r0
 630:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 634:	0f 90       	pop	r0
 636:	1f 90       	pop	r1
 638:	18 95       	reti

0000063a <__vector_5>:

ISR_TIMER2_OVF(){
 63a:	78 94       	sei
 63c:	1f 92       	push	r1
 63e:	0f 92       	push	r0
 640:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 644:	0f 92       	push	r0
 646:	11 24       	eor	r1, r1
 648:	8f 93       	push	r24
 64a:	9f 93       	push	r25
 64c:	cf 93       	push	r28
 64e:	df 93       	push	r29
 650:	cd b7       	in	r28, 0x3d	; 61
 652:	de b7       	in	r29, 0x3e	; 62
   /* decrement global software counter*/
   gu16_t2_sw_counter-=1;
 654:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <gu16_t2_sw_counter>
 658:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <gu16_t2_sw_counter+0x1>
 65c:	01 97       	sbiw	r24, 0x01	; 1
 65e:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <gu16_t2_sw_counter+0x1>
 662:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <gu16_t2_sw_counter>
}
 666:	00 00       	nop
 668:	df 91       	pop	r29
 66a:	cf 91       	pop	r28
 66c:	9f 91       	pop	r25
 66e:	8f 91       	pop	r24
 670:	0f 90       	pop	r0
 672:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 676:	0f 90       	pop	r0
 678:	1f 90       	pop	r1
 67a:	18 95       	reti

0000067c <Usart_Init>:
*
*  @param void
*  @return void
*/
void Usart_Init(void)
{
 67c:	cf 93       	push	r28
 67e:	df 93       	push	r29
 680:	cd b7       	in	r28, 0x3d	; 61
 682:	de b7       	in	r29, 0x3e	; 62
   /*----------------- initializing (UCSRC) -----------------*/   
   UCSRC |= (usart_init_config.usart_mode_sel|usart_init_config.stop_bit_sel|usart_init_config.reg_sel_mode|0x05); /*0x05 becuase we want UCSZ0:1 to be set to 1 1 ---> in order to obtain 8-bit width character*/
 684:	80 e4       	ldi	r24, 0x40	; 64
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	20 e4       	ldi	r18, 0x40	; 64
 68a:	30 e0       	ldi	r19, 0x00	; 0
 68c:	f9 01       	movw	r30, r18
 68e:	30 81       	ld	r19, Z
 690:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <usart_init_config>
 694:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <usart_init_config+0x2>
 698:	42 2b       	or	r20, r18
 69a:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <usart_init_config+0x3>
 69e:	24 2b       	or	r18, r20
 6a0:	23 2b       	or	r18, r19
 6a2:	25 60       	ori	r18, 0x05	; 5
 6a4:	fc 01       	movw	r30, r24
 6a6:	20 83       	st	Z, r18
   //UCSRC |= 0x85; /*works fine*/
   /*----------------- initializing (UCSRB) -----------------*/
   //UCSRB |= (usart_init_config.interrupt_mode_sel|usart_init_config.usart_dir_sel);
   UCSRB  |= 0xB8;
 6a8:	8a e2       	ldi	r24, 0x2A	; 42
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	2a e2       	ldi	r18, 0x2A	; 42
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	f9 01       	movw	r30, r18
 6b2:	20 81       	ld	r18, Z
 6b4:	28 6b       	ori	r18, 0xB8	; 184
 6b6:	fc 01       	movw	r30, r24
 6b8:	20 83       	st	Z, r18
   /*----------------- initializing (UCSRA) -----------------*/
   UCSRA &= ~(0x1C); /* Check that FE & DOR & PE is set to zero*/
 6ba:	8b e2       	ldi	r24, 0x2B	; 43
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	2b e2       	ldi	r18, 0x2B	; 43
 6c0:	30 e0       	ldi	r19, 0x00	; 0
 6c2:	f9 01       	movw	r30, r18
 6c4:	20 81       	ld	r18, Z
 6c6:	23 7e       	andi	r18, 0xE3	; 227
 6c8:	fc 01       	movw	r30, r24
 6ca:	20 83       	st	Z, r18
   UCSRA |= (usart_init_config.double_speed_select);
 6cc:	8b e2       	ldi	r24, 0x2B	; 43
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	2b e2       	ldi	r18, 0x2B	; 43
 6d2:	30 e0       	ldi	r19, 0x00	; 0
 6d4:	f9 01       	movw	r30, r18
 6d6:	30 81       	ld	r19, Z
 6d8:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <usart_init_config+0x6>
 6dc:	23 2b       	or	r18, r19
 6de:	fc 01       	movw	r30, r24
 6e0:	20 83       	st	Z, r18
   /*------------------ initialize baude rate ---------------*/
   UBRRL = BAUDE_RATE;
 6e2:	89 e2       	ldi	r24, 0x29	; 41
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	27 e6       	ldi	r18, 0x67	; 103
 6e8:	fc 01       	movw	r30, r24
 6ea:	20 83       	st	Z, r18
   /*------------------ Character size select  ---------------*/
   /*---- setting it to 8-bit -----*/
   //UCSRC |= 0x05;
   //UCSRB &= ~(0x04); /* ----> check this if it will work or not */
   /*----- clear RXB8 and TXB8 ----*/
   UCSRB &= ~(0x03);
 6ec:	8a e2       	ldi	r24, 0x2A	; 42
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	2a e2       	ldi	r18, 0x2A	; 42
 6f2:	30 e0       	ldi	r19, 0x00	; 0
 6f4:	f9 01       	movw	r30, r18
 6f6:	20 81       	ld	r18, Z
 6f8:	2c 7f       	andi	r18, 0xFC	; 252
 6fa:	fc 01       	movw	r30, r24
 6fc:	20 83       	st	Z, r18
}
 6fe:	00 00       	nop
 700:	df 91       	pop	r29
 702:	cf 91       	pop	r28
 704:	08 95       	ret

00000706 <UsartReadRx>:
*
*  @param void
*  @return uint8_t
*/
uint8_t UsartReadRx(void)
{
 706:	cf 93       	push	r28
 708:	df 93       	push	r29
 70a:	cd b7       	in	r28, 0x3d	; 61
 70c:	de b7       	in	r29, 0x3e	; 62
   return UDR;
 70e:	8c e2       	ldi	r24, 0x2C	; 44
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	fc 01       	movw	r30, r24
 714:	80 81       	ld	r24, Z
}
 716:	df 91       	pop	r29
 718:	cf 91       	pop	r28
 71a:	08 95       	ret

0000071c <_exit>:
 71c:	f8 94       	cli

0000071e <__stop_program>:
 71e:	ff cf       	rjmp	.-2      	; 0x71e <__stop_program>
