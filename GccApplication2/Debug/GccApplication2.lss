
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000730  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000730  000007c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080006a  0080006a  000007ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000800  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001937  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac2  00000000  00000000  0000236b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000117e  00000000  00000000  00002e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000788  00000000  00000000  00003fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000edf  00000000  00000000  00004734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f6e  00000000  00000000  00005613  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00006581  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 08 03 	jmp	0x610	; 0x610 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__vector_10>
  2c:	0c 94 a0 02 	jmp	0x540	; 0x540 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4b 01 	call	0x296	; 0x296 <main>
  8a:	0c 94 96 03 	jmp	0x72c	; 0x72c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <gpioPinWrite>:
		pin_val = PORTD_PIN & u8_pin;		/* set pins*/
		break;
	}
	if(!pin_val) return 0x00;
	else return 0x01;
}
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <gpioPinWrite+0x6>
  98:	1f 92       	push	r1
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	89 83       	std	Y+1, r24	; 0x01
  a0:	6a 83       	std	Y+2, r22	; 0x02
  a2:	4b 83       	std	Y+3, r20	; 0x03
  a4:	8b 81       	ldd	r24, Y+3	; 0x03
  a6:	88 23       	and	r24, r24
  a8:	09 f0       	breq	.+2      	; 0xac <gpioPinWrite+0x1a>
  aa:	42 c0       	rjmp	.+132    	; 0x130 <gpioPinWrite+0x9e>
  ac:	8a 81       	ldd	r24, Y+2	; 0x02
  ae:	80 95       	com	r24
  b0:	8a 83       	std	Y+2, r24	; 0x02
  b2:	89 81       	ldd	r24, Y+1	; 0x01
  b4:	88 2f       	mov	r24, r24
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	91 05       	cpc	r25, r1
  bc:	b9 f0       	breq	.+46     	; 0xec <gpioPinWrite+0x5a>
  be:	82 30       	cpi	r24, 0x02	; 2
  c0:	91 05       	cpc	r25, r1
  c2:	1c f4       	brge	.+6      	; 0xca <gpioPinWrite+0x38>
  c4:	89 2b       	or	r24, r25
  c6:	39 f0       	breq	.+14     	; 0xd6 <gpioPinWrite+0x44>
  c8:	71 c0       	rjmp	.+226    	; 0x1ac <gpioPinWrite+0x11a>
  ca:	82 30       	cpi	r24, 0x02	; 2
  cc:	91 05       	cpc	r25, r1
  ce:	c9 f0       	breq	.+50     	; 0x102 <gpioPinWrite+0x70>
  d0:	03 97       	sbiw	r24, 0x03	; 3
  d2:	11 f1       	breq	.+68     	; 0x118 <gpioPinWrite+0x86>
  d4:	6b c0       	rjmp	.+214    	; 0x1ac <gpioPinWrite+0x11a>
  d6:	8b e3       	ldi	r24, 0x3B	; 59
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	2b e3       	ldi	r18, 0x3B	; 59
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	f9 01       	movw	r30, r18
  e0:	30 81       	ld	r19, Z
  e2:	2a 81       	ldd	r18, Y+2	; 0x02
  e4:	23 23       	and	r18, r19
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
  ea:	60 c0       	rjmp	.+192    	; 0x1ac <gpioPinWrite+0x11a>
  ec:	88 e3       	ldi	r24, 0x38	; 56
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	28 e3       	ldi	r18, 0x38	; 56
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	f9 01       	movw	r30, r18
  f6:	30 81       	ld	r19, Z
  f8:	2a 81       	ldd	r18, Y+2	; 0x02
  fa:	23 23       	and	r18, r19
  fc:	fc 01       	movw	r30, r24
  fe:	20 83       	st	Z, r18
 100:	55 c0       	rjmp	.+170    	; 0x1ac <gpioPinWrite+0x11a>
 102:	85 e3       	ldi	r24, 0x35	; 53
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	25 e3       	ldi	r18, 0x35	; 53
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	f9 01       	movw	r30, r18
 10c:	30 81       	ld	r19, Z
 10e:	2a 81       	ldd	r18, Y+2	; 0x02
 110:	23 23       	and	r18, r19
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
 116:	4a c0       	rjmp	.+148    	; 0x1ac <gpioPinWrite+0x11a>
 118:	82 e3       	ldi	r24, 0x32	; 50
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	22 e3       	ldi	r18, 0x32	; 50
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	f9 01       	movw	r30, r18
 122:	30 81       	ld	r19, Z
 124:	2a 81       	ldd	r18, Y+2	; 0x02
 126:	23 23       	and	r18, r19
 128:	fc 01       	movw	r30, r24
 12a:	20 83       	st	Z, r18
 12c:	00 00       	nop
 12e:	3e c0       	rjmp	.+124    	; 0x1ac <gpioPinWrite+0x11a>
 130:	89 81       	ldd	r24, Y+1	; 0x01
 132:	88 2f       	mov	r24, r24
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	91 05       	cpc	r25, r1
 13a:	b9 f0       	breq	.+46     	; 0x16a <gpioPinWrite+0xd8>
 13c:	82 30       	cpi	r24, 0x02	; 2
 13e:	91 05       	cpc	r25, r1
 140:	1c f4       	brge	.+6      	; 0x148 <gpioPinWrite+0xb6>
 142:	89 2b       	or	r24, r25
 144:	39 f0       	breq	.+14     	; 0x154 <gpioPinWrite+0xc2>
 146:	32 c0       	rjmp	.+100    	; 0x1ac <gpioPinWrite+0x11a>
 148:	82 30       	cpi	r24, 0x02	; 2
 14a:	91 05       	cpc	r25, r1
 14c:	c9 f0       	breq	.+50     	; 0x180 <gpioPinWrite+0xee>
 14e:	03 97       	sbiw	r24, 0x03	; 3
 150:	11 f1       	breq	.+68     	; 0x196 <gpioPinWrite+0x104>
 152:	2c c0       	rjmp	.+88     	; 0x1ac <gpioPinWrite+0x11a>
 154:	8b e3       	ldi	r24, 0x3B	; 59
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	2b e3       	ldi	r18, 0x3B	; 59
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	f9 01       	movw	r30, r18
 15e:	30 81       	ld	r19, Z
 160:	2a 81       	ldd	r18, Y+2	; 0x02
 162:	23 2b       	or	r18, r19
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18
 168:	21 c0       	rjmp	.+66     	; 0x1ac <gpioPinWrite+0x11a>
 16a:	88 e3       	ldi	r24, 0x38	; 56
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	28 e3       	ldi	r18, 0x38	; 56
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	f9 01       	movw	r30, r18
 174:	30 81       	ld	r19, Z
 176:	2a 81       	ldd	r18, Y+2	; 0x02
 178:	23 2b       	or	r18, r19
 17a:	fc 01       	movw	r30, r24
 17c:	20 83       	st	Z, r18
 17e:	16 c0       	rjmp	.+44     	; 0x1ac <gpioPinWrite+0x11a>
 180:	85 e3       	ldi	r24, 0x35	; 53
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	25 e3       	ldi	r18, 0x35	; 53
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	f9 01       	movw	r30, r18
 18a:	30 81       	ld	r19, Z
 18c:	2a 81       	ldd	r18, Y+2	; 0x02
 18e:	23 2b       	or	r18, r19
 190:	fc 01       	movw	r30, r24
 192:	20 83       	st	Z, r18
 194:	0b c0       	rjmp	.+22     	; 0x1ac <gpioPinWrite+0x11a>
 196:	82 e3       	ldi	r24, 0x32	; 50
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	22 e3       	ldi	r18, 0x32	; 50
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	f9 01       	movw	r30, r18
 1a0:	30 81       	ld	r19, Z
 1a2:	2a 81       	ldd	r18, Y+2	; 0x02
 1a4:	23 2b       	or	r18, r19
 1a6:	fc 01       	movw	r30, r24
 1a8:	20 83       	st	Z, r18
 1aa:	00 00       	nop
 1ac:	00 00       	nop
 1ae:	0f 90       	pop	r0
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <gpioPortDirection>:
 * @param direction: set the port direction and takes the following values
 * 				- 0x00 -> Input
 * 				- 0xff -> Output
 */
void gpioPortDirection(uint8_t u8_port, uint8_t u8_direction)
{
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	00 d0       	rcall	.+0      	; 0x1c0 <gpioPortDirection+0x6>
 1c0:	cd b7       	in	r28, 0x3d	; 61
 1c2:	de b7       	in	r29, 0x3e	; 62
 1c4:	89 83       	std	Y+1, r24	; 0x01
 1c6:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8_port)
 1c8:	89 81       	ldd	r24, Y+1	; 0x01
 1ca:	88 2f       	mov	r24, r24
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	91 05       	cpc	r25, r1
 1d2:	91 f0       	breq	.+36     	; 0x1f8 <gpioPortDirection+0x3e>
 1d4:	82 30       	cpi	r24, 0x02	; 2
 1d6:	91 05       	cpc	r25, r1
 1d8:	1c f4       	brge	.+6      	; 0x1e0 <gpioPortDirection+0x26>
 1da:	89 2b       	or	r24, r25
 1dc:	39 f0       	breq	.+14     	; 0x1ec <gpioPortDirection+0x32>
		break;
		case 3: /* GPIOD */
		PORTD_DIR = u8_direction;
		break;
	}	
}
 1de:	1e c0       	rjmp	.+60     	; 0x21c <gpioPortDirection+0x62>
 * 				- 0x00 -> Input
 * 				- 0xff -> Output
 */
void gpioPortDirection(uint8_t u8_port, uint8_t u8_direction)
{
	switch(u8_port)
 1e0:	82 30       	cpi	r24, 0x02	; 2
 1e2:	91 05       	cpc	r25, r1
 1e4:	79 f0       	breq	.+30     	; 0x204 <gpioPortDirection+0x4a>
 1e6:	03 97       	sbiw	r24, 0x03	; 3
 1e8:	99 f0       	breq	.+38     	; 0x210 <gpioPortDirection+0x56>
		break;
		case 3: /* GPIOD */
		PORTD_DIR = u8_direction;
		break;
	}	
}
 1ea:	18 c0       	rjmp	.+48     	; 0x21c <gpioPortDirection+0x62>
void gpioPortDirection(uint8_t u8_port, uint8_t u8_direction)
{
	switch(u8_port)
	{
		case 0: /* GPIOA */
		PORTA_DIR = u8_direction;
 1ec:	8a e3       	ldi	r24, 0x3A	; 58
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	2a 81       	ldd	r18, Y+2	; 0x02
 1f2:	fc 01       	movw	r30, r24
 1f4:	20 83       	st	Z, r18
		break;
 1f6:	12 c0       	rjmp	.+36     	; 0x21c <gpioPortDirection+0x62>
		case 1: /* GPIOB */
		PORTB_DIR = u8_direction;
 1f8:	87 e3       	ldi	r24, 0x37	; 55
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	2a 81       	ldd	r18, Y+2	; 0x02
 1fe:	fc 01       	movw	r30, r24
 200:	20 83       	st	Z, r18
		break;
 202:	0c c0       	rjmp	.+24     	; 0x21c <gpioPortDirection+0x62>
		case 2: /* GPIOC */
		PORTC_DIR = u8_direction;
 204:	84 e3       	ldi	r24, 0x34	; 52
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	2a 81       	ldd	r18, Y+2	; 0x02
 20a:	fc 01       	movw	r30, r24
 20c:	20 83       	st	Z, r18
		break;
 20e:	06 c0       	rjmp	.+12     	; 0x21c <gpioPortDirection+0x62>
		case 3: /* GPIOD */
		PORTD_DIR = u8_direction;
 210:	81 e3       	ldi	r24, 0x31	; 49
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	2a 81       	ldd	r18, Y+2	; 0x02
 216:	fc 01       	movw	r30, r24
 218:	20 83       	st	Z, r18
		break;
 21a:	00 00       	nop
	}	
}
 21c:	00 00       	nop
 21e:	0f 90       	pop	r0
 220:	0f 90       	pop	r0
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	08 95       	ret

00000228 <gpioPortWrite>:
 * @param value: set the port value and takes the following values
 * 				- 0x00 -> Low
 * 				- 0xff -> High
 */
void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	00 d0       	rcall	.+0      	; 0x22e <gpioPortWrite+0x6>
 22e:	cd b7       	in	r28, 0x3d	; 61
 230:	de b7       	in	r29, 0x3e	; 62
 232:	89 83       	std	Y+1, r24	; 0x01
 234:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8_port)
 236:	89 81       	ldd	r24, Y+1	; 0x01
 238:	88 2f       	mov	r24, r24
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	91 05       	cpc	r25, r1
 240:	91 f0       	breq	.+36     	; 0x266 <gpioPortWrite+0x3e>
 242:	82 30       	cpi	r24, 0x02	; 2
 244:	91 05       	cpc	r25, r1
 246:	1c f4       	brge	.+6      	; 0x24e <gpioPortWrite+0x26>
 248:	89 2b       	or	r24, r25
 24a:	39 f0       	breq	.+14     	; 0x25a <gpioPortWrite+0x32>
		case 3: /* GPIOD */
		PORTD_DATA = u8_value;
		break;
	}
	
}
 24c:	1e c0       	rjmp	.+60     	; 0x28a <gpioPortWrite+0x62>
 * 				- 0x00 -> Low
 * 				- 0xff -> High
 */
void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
	switch(u8_port)
 24e:	82 30       	cpi	r24, 0x02	; 2
 250:	91 05       	cpc	r25, r1
 252:	79 f0       	breq	.+30     	; 0x272 <gpioPortWrite+0x4a>
 254:	03 97       	sbiw	r24, 0x03	; 3
 256:	99 f0       	breq	.+38     	; 0x27e <gpioPortWrite+0x56>
		case 3: /* GPIOD */
		PORTD_DATA = u8_value;
		break;
	}
	
}
 258:	18 c0       	rjmp	.+48     	; 0x28a <gpioPortWrite+0x62>
void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
	switch(u8_port)
	{
		case 0: /* GPIOA */
		PORTA_DATA = u8_value;
 25a:	8b e3       	ldi	r24, 0x3B	; 59
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	2a 81       	ldd	r18, Y+2	; 0x02
 260:	fc 01       	movw	r30, r24
 262:	20 83       	st	Z, r18
		break;
 264:	12 c0       	rjmp	.+36     	; 0x28a <gpioPortWrite+0x62>
		case 1: /* GPIOB */
		PORTB_DATA = u8_value;
 266:	88 e3       	ldi	r24, 0x38	; 56
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	2a 81       	ldd	r18, Y+2	; 0x02
 26c:	fc 01       	movw	r30, r24
 26e:	20 83       	st	Z, r18
		break;
 270:	0c c0       	rjmp	.+24     	; 0x28a <gpioPortWrite+0x62>
		case 2: /* GPIOC */
		PORTC_DATA = u8_value;
 272:	85 e3       	ldi	r24, 0x35	; 53
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	2a 81       	ldd	r18, Y+2	; 0x02
 278:	fc 01       	movw	r30, r24
 27a:	20 83       	st	Z, r18
		break;
 27c:	06 c0       	rjmp	.+12     	; 0x28a <gpioPortWrite+0x62>
		case 3: /* GPIOD */
		PORTD_DATA = u8_value;
 27e:	82 e3       	ldi	r24, 0x32	; 50
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	2a 81       	ldd	r18, Y+2	; 0x02
 284:	fc 01       	movw	r30, r24
 286:	20 83       	st	Z, r18
		break;
 288:	00 00       	nop
	}
	
}
 28a:	00 00       	nop
 28c:	0f 90       	pop	r0
 28e:	0f 90       	pop	r0
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <main>:
         gu_distance_read = LOW;
         gpioPinWrite(ULTRA_EN_GPIO,ULTRA_ENABLE_BIT,HIGH);         
         timer0DelayMs(1);
         gpioPinWrite(ULTRA_EN_GPIO,ULTRA_ENABLE_BIT,LOW);                     
      }     
   }
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
 29e:	0e 94 84 03 	call	0x708	; 0x708 <UsartRx>
 2a2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <usartTest>
 2a6:	6f ef       	ldi	r22, 0xFF	; 255
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	0e 94 dd 00 	call	0x1ba	; 0x1ba <gpioPortDirection>
 2ae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2b2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2b6:	fc 01       	movw	r30, r24
 2b8:	80 81       	ld	r24, Z
 2ba:	68 2f       	mov	r22, r24
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 14 01 	call	0x228	; 0x228 <gpioPortWrite>
 2c2:	68 ee       	ldi	r22, 0xE8	; 232
 2c4:	73 e0       	ldi	r23, 0x03	; 3
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 0a 02 	call	0x414	; 0x414 <softwareDelayMs>
 2ce:	ef cf       	rjmp	.-34     	; 0x2ae <main+0x18>

000002d0 <usartTest>:
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	cd b7       	in	r28, 0x3d	; 61
 2d6:	de b7       	in	r29, 0x3e	; 62
 2d8:	78 94       	sei
 2da:	0e 94 29 03 	call	0x652	; 0x652 <Usart_Init>
 2de:	00 00       	nop
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	08 95       	ret

000002e6 <__vector_3>:
   
}

/************ INT2 ISR ***********/
ISR_INT2()
{
 2e6:	78 94       	sei
 2e8:	1f 92       	push	r1
 2ea:	0f 92       	push	r0
 2ec:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2f0:	0f 92       	push	r0
 2f2:	11 24       	eor	r1, r1
 2f4:	2f 93       	push	r18
 2f6:	3f 93       	push	r19
 2f8:	4f 93       	push	r20
 2fa:	5f 93       	push	r21
 2fc:	6f 93       	push	r22
 2fe:	7f 93       	push	r23
 300:	8f 93       	push	r24
 302:	9f 93       	push	r25
 304:	af 93       	push	r26
 306:	bf 93       	push	r27
 308:	ef 93       	push	r30
 30a:	ff 93       	push	r31
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	cd b7       	in	r28, 0x3d	; 61
 312:	de b7       	in	r29, 0x3e	; 62
   if(MCUCSR & BIT6)  /* if ISC2 is set --> Rising edge */
 314:	84 e5       	ldi	r24, 0x54	; 84
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	fc 01       	movw	r30, r24
 31a:	80 81       	ld	r24, Z
 31c:	88 2f       	mov	r24, r24
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	80 74       	andi	r24, 0x40	; 64
 322:	99 27       	eor	r25, r25
 324:	89 2b       	or	r24, r25
 326:	39 f1       	breq	.+78     	; 0x376 <__vector_3+0x90>
   {
      /*start timer2*/
      timer2Start();
 328:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <timer2Start>
      /*change edge*/
      /**********/
      /*Disable INT2*/
      GICR &= ~(BIT5);
 32c:	8b e5       	ldi	r24, 0x5B	; 91
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	2b e5       	ldi	r18, 0x5B	; 91
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	f9 01       	movw	r30, r18
 336:	20 81       	ld	r18, Z
 338:	2f 7d       	andi	r18, 0xDF	; 223
 33a:	fc 01       	movw	r30, r24
 33c:	20 83       	st	Z, r18
      /*Set ISC2 to (0) : that will fire INT2 on falling edge */
      MCUCSR &= (~BIT6);      
 33e:	84 e5       	ldi	r24, 0x54	; 84
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	24 e5       	ldi	r18, 0x54	; 84
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	f9 01       	movw	r30, r18
 348:	20 81       	ld	r18, Z
 34a:	2f 7b       	andi	r18, 0xBF	; 191
 34c:	fc 01       	movw	r30, r24
 34e:	20 83       	st	Z, r18
      /*Reset INTF2 flag bit by setting 1*/
      GIFR |= BIT5;
 350:	8a e5       	ldi	r24, 0x5A	; 90
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	2a e5       	ldi	r18, 0x5A	; 90
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	f9 01       	movw	r30, r18
 35a:	20 81       	ld	r18, Z
 35c:	20 62       	ori	r18, 0x20	; 32
 35e:	fc 01       	movw	r30, r24
 360:	20 83       	st	Z, r18
      /*Enable INT2*/
      GICR |= (BIT5);            
 362:	8b e5       	ldi	r24, 0x5B	; 91
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	2b e5       	ldi	r18, 0x5B	; 91
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	f9 01       	movw	r30, r18
 36c:	20 81       	ld	r18, Z
 36e:	20 62       	ori	r18, 0x20	; 32
 370:	fc 01       	movw	r30, r24
 372:	20 83       	st	Z, r18
      GICR |= (BIT5);
      /*set read flag*/
      gu_distance_read = HIGH;
   }    
   
}
 374:	3a c0       	rjmp	.+116    	; 0x3ea <__vector_3+0x104>
      /*Reset INTF2 flag bit by setting 1*/
      GIFR |= BIT5;
      /*Enable INT2*/
      GICR |= (BIT5);            
   }
   else if(!(MCUCSR & BIT6)) /* if ISC2 is set to (0) --> Falling Edge */ /* assert its value !!!??*/
 376:	84 e5       	ldi	r24, 0x54	; 84
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	fc 01       	movw	r30, r24
 37c:	80 81       	ld	r24, Z
 37e:	88 2f       	mov	r24, r24
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	80 74       	andi	r24, 0x40	; 64
 384:	99 27       	eor	r25, r25
 386:	89 2b       	or	r24, r25
 388:	81 f5       	brne	.+96     	; 0x3ea <__vector_3+0x104>
   {
      /*stop timer counter*/
      timer2Stop();
 38a:	0e 94 90 02 	call	0x520	; 0x520 <timer2Stop>
      /*read TCNT2*/
      gu_sw_icu = timer2Read();
 38e:	0e 94 6f 02 	call	0x4de	; 0x4de <timer2Read>
 392:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <gu_sw_icu>
      /*Reset TCNT2*/
      timer2Set(0);
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	0e 94 41 02 	call	0x482	; 0x482 <timer2Set>
      /*change edge*/
      /**********/
      /*Disable INT2*/
      GICR &= ~(BIT5);
 39c:	8b e5       	ldi	r24, 0x5B	; 91
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	2b e5       	ldi	r18, 0x5B	; 91
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	f9 01       	movw	r30, r18
 3a6:	20 81       	ld	r18, Z
 3a8:	2f 7d       	andi	r18, 0xDF	; 223
 3aa:	fc 01       	movw	r30, r24
 3ac:	20 83       	st	Z, r18
      /*Set ISC2 to (1) : that will fire INT2 on rising edge */
      MCUCSR |= (BIT6);      
 3ae:	84 e5       	ldi	r24, 0x54	; 84
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	24 e5       	ldi	r18, 0x54	; 84
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	f9 01       	movw	r30, r18
 3b8:	20 81       	ld	r18, Z
 3ba:	20 64       	ori	r18, 0x40	; 64
 3bc:	fc 01       	movw	r30, r24
 3be:	20 83       	st	Z, r18
      /*Reset INTF2 flag bit by setting 1*/
      GIFR |= BIT5;
 3c0:	8a e5       	ldi	r24, 0x5A	; 90
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	2a e5       	ldi	r18, 0x5A	; 90
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	f9 01       	movw	r30, r18
 3ca:	20 81       	ld	r18, Z
 3cc:	20 62       	ori	r18, 0x20	; 32
 3ce:	fc 01       	movw	r30, r24
 3d0:	20 83       	st	Z, r18
      /*Enable INT2*/
      GICR |= (BIT5);
 3d2:	8b e5       	ldi	r24, 0x5B	; 91
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	2b e5       	ldi	r18, 0x5B	; 91
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	f9 01       	movw	r30, r18
 3dc:	20 81       	ld	r18, Z
 3de:	20 62       	ori	r18, 0x20	; 32
 3e0:	fc 01       	movw	r30, r24
 3e2:	20 83       	st	Z, r18
      /*set read flag*/
      gu_distance_read = HIGH;
 3e4:	8f ef       	ldi	r24, 0xFF	; 255
 3e6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
   }    
   
}
 3ea:	00 00       	nop
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	ff 91       	pop	r31
 3f2:	ef 91       	pop	r30
 3f4:	bf 91       	pop	r27
 3f6:	af 91       	pop	r26
 3f8:	9f 91       	pop	r25
 3fa:	8f 91       	pop	r24
 3fc:	7f 91       	pop	r23
 3fe:	6f 91       	pop	r22
 400:	5f 91       	pop	r21
 402:	4f 91       	pop	r20
 404:	3f 91       	pop	r19
 406:	2f 91       	pop	r18
 408:	0f 90       	pop	r0
 40a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 40e:	0f 90       	pop	r0
 410:	1f 90       	pop	r1
 412:	18 95       	reti

00000414 <softwareDelayMs>:
 * Description: this delay function operate in a polling manner
 * 				don't use it with RTOSs
 * @param a_delay_in_ms: the milli-seconds
 */
void softwareDelayMs(uint32_t u32_delay_in_ms)
{
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	00 d0       	rcall	.+0      	; 0x41a <softwareDelayMs+0x6>
 41a:	00 d0       	rcall	.+0      	; 0x41c <softwareDelayMs+0x8>
 41c:	00 d0       	rcall	.+0      	; 0x41e <softwareDelayMs+0xa>
 41e:	cd b7       	in	r28, 0x3d	; 61
 420:	de b7       	in	r29, 0x3e	; 62
 422:	6b 83       	std	Y+3, r22	; 0x03
 424:	7c 83       	std	Y+4, r23	; 0x04
 426:	8d 83       	std	Y+5, r24	; 0x05
 428:	9e 83       	std	Y+6, r25	; 0x06
	while(u32_delay_in_ms > 0)
 42a:	19 c0       	rjmp	.+50     	; 0x45e <softwareDelayMs+0x4a>
	{
		volatile uint16_t i = 360;
 42c:	88 e6       	ldi	r24, 0x68	; 104
 42e:	91 e0       	ldi	r25, 0x01	; 1
 430:	9a 83       	std	Y+2, r25	; 0x02
 432:	89 83       	std	Y+1, r24	; 0x01
		while(i>0)
 434:	05 c0       	rjmp	.+10     	; 0x440 <softwareDelayMs+0x2c>
		{
			i--;
 436:	89 81       	ldd	r24, Y+1	; 0x01
 438:	9a 81       	ldd	r25, Y+2	; 0x02
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	9a 83       	std	Y+2, r25	; 0x02
 43e:	89 83       	std	Y+1, r24	; 0x01
void softwareDelayMs(uint32_t u32_delay_in_ms)
{
	while(u32_delay_in_ms > 0)
	{
		volatile uint16_t i = 360;
		while(i>0)
 440:	89 81       	ldd	r24, Y+1	; 0x01
 442:	9a 81       	ldd	r25, Y+2	; 0x02
 444:	89 2b       	or	r24, r25
 446:	b9 f7       	brne	.-18     	; 0x436 <softwareDelayMs+0x22>
		{
			i--;
		}
		u32_delay_in_ms--;		
 448:	8b 81       	ldd	r24, Y+3	; 0x03
 44a:	9c 81       	ldd	r25, Y+4	; 0x04
 44c:	ad 81       	ldd	r26, Y+5	; 0x05
 44e:	be 81       	ldd	r27, Y+6	; 0x06
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	a1 09       	sbc	r26, r1
 454:	b1 09       	sbc	r27, r1
 456:	8b 83       	std	Y+3, r24	; 0x03
 458:	9c 83       	std	Y+4, r25	; 0x04
 45a:	ad 83       	std	Y+5, r26	; 0x05
 45c:	be 83       	std	Y+6, r27	; 0x06
 * 				don't use it with RTOSs
 * @param a_delay_in_ms: the milli-seconds
 */
void softwareDelayMs(uint32_t u32_delay_in_ms)
{
	while(u32_delay_in_ms > 0)
 45e:	8b 81       	ldd	r24, Y+3	; 0x03
 460:	9c 81       	ldd	r25, Y+4	; 0x04
 462:	ad 81       	ldd	r26, Y+5	; 0x05
 464:	be 81       	ldd	r27, Y+6	; 0x06
 466:	89 2b       	or	r24, r25
 468:	8a 2b       	or	r24, r26
 46a:	8b 2b       	or	r24, r27
 46c:	f9 f6       	brne	.-66     	; 0x42c <softwareDelayMs+0x18>
		{
			i--;
		}
		u32_delay_in_ms--;		
	}
}
 46e:	00 00       	nop
 470:	26 96       	adiw	r28, 0x06	; 6
 472:	0f b6       	in	r0, 0x3f	; 63
 474:	f8 94       	cli
 476:	de bf       	out	0x3e, r29	; 62
 478:	0f be       	out	0x3f, r0	; 63
 47a:	cd bf       	out	0x3d, r28	; 61
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	08 95       	ret

00000482 <timer2Set>:
       TIMSK &= ~(timer2.en_interruptMask);
       /* clear Global interrupt bit*/
       cli();
       break;
   } 
}
 482:	cf 93       	push	r28
 484:	df 93       	push	r29
 486:	1f 92       	push	r1
 488:	cd b7       	in	r28, 0x3d	; 61
 48a:	de b7       	in	r29, 0x3e	; 62
 48c:	89 83       	std	Y+1, r24	; 0x01
 48e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <timer0>
 492:	88 2f       	mov	r24, r24
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	00 97       	sbiw	r24, 0x00	; 0
 498:	19 f0       	breq	.+6      	; 0x4a0 <timer2Set+0x1e>
 49a:	08 97       	sbiw	r24, 0x08	; 8
 49c:	61 f0       	breq	.+24     	; 0x4b6 <timer2Set+0x34>
 49e:	1a c0       	rjmp	.+52     	; 0x4d4 <timer2Set+0x52>
 4a0:	84 e4       	ldi	r24, 0x44	; 68
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	24 e4       	ldi	r18, 0x44	; 68
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	f9 01       	movw	r30, r18
 4aa:	30 81       	ld	r19, Z
 4ac:	29 81       	ldd	r18, Y+1	; 0x01
 4ae:	23 2b       	or	r18, r19
 4b0:	fc 01       	movw	r30, r24
 4b2:	20 83       	st	Z, r18
 4b4:	0f c0       	rjmp	.+30     	; 0x4d4 <timer2Set+0x52>
 4b6:	84 e4       	ldi	r24, 0x44	; 68
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	fc 01       	movw	r30, r24
 4bc:	10 82       	st	Z, r1
 4be:	83 e4       	ldi	r24, 0x43	; 67
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	23 e4       	ldi	r18, 0x43	; 67
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	f9 01       	movw	r30, r18
 4c8:	30 81       	ld	r19, Z
 4ca:	29 81       	ldd	r18, Y+1	; 0x01
 4cc:	23 2b       	or	r18, r19
 4ce:	fc 01       	movw	r30, r24
 4d0:	20 83       	st	Z, r18
 4d2:	00 00       	nop
 4d4:	00 00       	nop
 4d6:	0f 90       	pop	r0
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <timer2Read>:
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	cd b7       	in	r28, 0x3d	; 61
 4e4:	de b7       	in	r29, 0x3e	; 62
 4e6:	84 e4       	ldi	r24, 0x44	; 68
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	fc 01       	movw	r30, r24
 4ec:	80 81       	ld	r24, Z
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	08 95       	ret

000004f4 <timer2Start>:
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	cd b7       	in	r28, 0x3d	; 61
 4fa:	de b7       	in	r29, 0x3e	; 62
 4fc:	85 e4       	ldi	r24, 0x45	; 69
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	25 e4       	ldi	r18, 0x45	; 69
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	f9 01       	movw	r30, r18
 506:	30 81       	ld	r19, Z
 508:	40 91 73 00 	lds	r20, 0x0073	; 0x800073 <timer2>
 50c:	20 91 75 00 	lds	r18, 0x0075	; 0x800075 <timer2+0x2>
 510:	24 2b       	or	r18, r20
 512:	23 2b       	or	r18, r19
 514:	fc 01       	movw	r30, r24
 516:	20 83       	st	Z, r18
 518:	00 00       	nop
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	08 95       	ret

00000520 <timer2Stop>:
 520:	cf 93       	push	r28
 522:	df 93       	push	r29
 524:	cd b7       	in	r28, 0x3d	; 61
 526:	de b7       	in	r29, 0x3e	; 62
 528:	85 e4       	ldi	r24, 0x45	; 69
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	fc 01       	movw	r30, r24
 52e:	80 81       	ld	r24, Z
 530:	85 e4       	ldi	r24, 0x45	; 69
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	fc 01       	movw	r30, r24
 536:	10 82       	st	Z, r1
 538:	00 00       	nop
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	08 95       	ret

00000540 <__vector_11>:

/************************************************ Timers ISRs Control **********************************************************/
ISR_TIMER0_OVF(){
 540:	78 94       	sei
 542:	1f 92       	push	r1
 544:	0f 92       	push	r0
 546:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 54a:	0f 92       	push	r0
 54c:	11 24       	eor	r1, r1
 54e:	2f 93       	push	r18
 550:	3f 93       	push	r19
 552:	4f 93       	push	r20
 554:	5f 93       	push	r21
 556:	6f 93       	push	r22
 558:	7f 93       	push	r23
 55a:	8f 93       	push	r24
 55c:	9f 93       	push	r25
 55e:	af 93       	push	r26
 560:	bf 93       	push	r27
 562:	ef 93       	push	r30
 564:	ff 93       	push	r31
 566:	cf 93       	push	r28
 568:	df 93       	push	r29
 56a:	cd b7       	in	r28, 0x3d	; 61
 56c:	de b7       	in	r29, 0x3e	; 62
   /*reset pins*/
   gpioPinWrite(GPIOD,(BIT4|BIT5),LOW);
 56e:	40 e0       	ldi	r20, 0x00	; 0
 570:	60 e3       	ldi	r22, 0x30	; 48
 572:	83 e0       	ldi	r24, 0x03	; 3
 574:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinWrite>
   /*reload TCNT0*/
   TCNT0 = gu8_preloader;  //debug point
 578:	82 e5       	ldi	r24, 0x52	; 82
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	20 91 7a 00 	lds	r18, 0x007A	; 0x80007a <gu8_preloader>
 580:	fc 01       	movw	r30, r24
 582:	20 83       	st	Z, r18
}
 584:	00 00       	nop
 586:	df 91       	pop	r29
 588:	cf 91       	pop	r28
 58a:	ff 91       	pop	r31
 58c:	ef 91       	pop	r30
 58e:	bf 91       	pop	r27
 590:	af 91       	pop	r26
 592:	9f 91       	pop	r25
 594:	8f 91       	pop	r24
 596:	7f 91       	pop	r23
 598:	6f 91       	pop	r22
 59a:	5f 91       	pop	r21
 59c:	4f 91       	pop	r20
 59e:	3f 91       	pop	r19
 5a0:	2f 91       	pop	r18
 5a2:	0f 90       	pop	r0
 5a4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 5a8:	0f 90       	pop	r0
 5aa:	1f 90       	pop	r1
 5ac:	18 95       	reti

000005ae <__vector_10>:

ISR_TIMER0_COMP(){
 5ae:	78 94       	sei
 5b0:	1f 92       	push	r1
 5b2:	0f 92       	push	r0
 5b4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 5b8:	0f 92       	push	r0
 5ba:	11 24       	eor	r1, r1
 5bc:	2f 93       	push	r18
 5be:	3f 93       	push	r19
 5c0:	4f 93       	push	r20
 5c2:	5f 93       	push	r21
 5c4:	6f 93       	push	r22
 5c6:	7f 93       	push	r23
 5c8:	8f 93       	push	r24
 5ca:	9f 93       	push	r25
 5cc:	af 93       	push	r26
 5ce:	bf 93       	push	r27
 5d0:	ef 93       	push	r30
 5d2:	ff 93       	push	r31
 5d4:	cf 93       	push	r28
 5d6:	df 93       	push	r29
 5d8:	cd b7       	in	r28, 0x3d	; 61
 5da:	de b7       	in	r29, 0x3e	; 62
   /*set pins*/
   gpioPinWrite(GPIOD,(BIT4|BIT5),HIGH);
 5dc:	4f ef       	ldi	r20, 0xFF	; 255
 5de:	60 e3       	ldi	r22, 0x30	; 48
 5e0:	83 e0       	ldi	r24, 0x03	; 3
 5e2:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinWrite>
}
 5e6:	00 00       	nop
 5e8:	df 91       	pop	r29
 5ea:	cf 91       	pop	r28
 5ec:	ff 91       	pop	r31
 5ee:	ef 91       	pop	r30
 5f0:	bf 91       	pop	r27
 5f2:	af 91       	pop	r26
 5f4:	9f 91       	pop	r25
 5f6:	8f 91       	pop	r24
 5f8:	7f 91       	pop	r23
 5fa:	6f 91       	pop	r22
 5fc:	5f 91       	pop	r21
 5fe:	4f 91       	pop	r20
 600:	3f 91       	pop	r19
 602:	2f 91       	pop	r18
 604:	0f 90       	pop	r0
 606:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 60a:	0f 90       	pop	r0
 60c:	1f 90       	pop	r1
 60e:	18 95       	reti

00000610 <__vector_5>:

ISR_TIMER2_OVF(){
 610:	78 94       	sei
 612:	1f 92       	push	r1
 614:	0f 92       	push	r0
 616:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 61a:	0f 92       	push	r0
 61c:	11 24       	eor	r1, r1
 61e:	8f 93       	push	r24
 620:	9f 93       	push	r25
 622:	cf 93       	push	r28
 624:	df 93       	push	r29
 626:	cd b7       	in	r28, 0x3d	; 61
 628:	de b7       	in	r29, 0x3e	; 62
   /* decrement global software counter*/
   gu16_t2_sw_counter-=1;
 62a:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <gu16_t2_sw_counter>
 62e:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <gu16_t2_sw_counter+0x1>
 632:	01 97       	sbiw	r24, 0x01	; 1
 634:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <gu16_t2_sw_counter+0x1>
 638:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <gu16_t2_sw_counter>
}
 63c:	00 00       	nop
 63e:	df 91       	pop	r29
 640:	cf 91       	pop	r28
 642:	9f 91       	pop	r25
 644:	8f 91       	pop	r24
 646:	0f 90       	pop	r0
 648:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 64c:	0f 90       	pop	r0
 64e:	1f 90       	pop	r1
 650:	18 95       	reti

00000652 <Usart_Init>:
*
*  @param void
*  @return void
*/
void Usart_Init(void)
{
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
 656:	cd b7       	in	r28, 0x3d	; 61
 658:	de b7       	in	r29, 0x3e	; 62
   /*----------------- initializing (UCSRA) -----------------*/
   UCSRA &= ~(0x1C); /* Check that FE & DOR & PE is set to zero*/
 65a:	8b e2       	ldi	r24, 0x2B	; 43
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	2b e2       	ldi	r18, 0x2B	; 43
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	f9 01       	movw	r30, r18
 664:	20 81       	ld	r18, Z
 666:	23 7e       	andi	r18, 0xE3	; 227
 668:	fc 01       	movw	r30, r24
 66a:	20 83       	st	Z, r18
   UCSRC |= (usart_init_config.usart_mode_sel|usart_init_config.stop_bit_sel|usart_init_config.reg_sel_mode);
 66c:	80 e4       	ldi	r24, 0x40	; 64
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	20 e4       	ldi	r18, 0x40	; 64
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	f9 01       	movw	r30, r18
 676:	30 81       	ld	r19, Z
 678:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <usart_init_config>
 67c:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <usart_init_config+0x2>
 680:	42 2b       	or	r20, r18
 682:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <usart_init_config+0x3>
 686:	24 2b       	or	r18, r20
 688:	23 2b       	or	r18, r19
 68a:	fc 01       	movw	r30, r24
 68c:	20 83       	st	Z, r18
   /*----------------- initializing (UCSRA) -----------------*/
   UCSRB |= (usart_init_config.interrupt_mode_sel|usart_init_config.usart_dir_sel);
 68e:	8a e2       	ldi	r24, 0x2A	; 42
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	2a e2       	ldi	r18, 0x2A	; 42
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	f9 01       	movw	r30, r18
 698:	30 81       	ld	r19, Z
 69a:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <usart_init_config+0x4>
 69e:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <usart_init_config+0x5>
 6a2:	24 2b       	or	r18, r20
 6a4:	23 2b       	or	r18, r19
 6a6:	fc 01       	movw	r30, r24
 6a8:	20 83       	st	Z, r18
   /*----------------- initializing (UCSRA) -----------------*/
   UCSRA |= (usart_init_config.double_speed_select);
 6aa:	8b e2       	ldi	r24, 0x2B	; 43
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	2b e2       	ldi	r18, 0x2B	; 43
 6b0:	30 e0       	ldi	r19, 0x00	; 0
 6b2:	f9 01       	movw	r30, r18
 6b4:	30 81       	ld	r19, Z
 6b6:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <usart_init_config+0x6>
 6ba:	23 2b       	or	r18, r19
 6bc:	fc 01       	movw	r30, r24
 6be:	20 83       	st	Z, r18
   /*------------------ initialize baude rate ---------------*/
   UBRRL = BAUDE_RATE;
 6c0:	89 e2       	ldi	r24, 0x29	; 41
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	27 e6       	ldi	r18, 0x67	; 103
 6c6:	fc 01       	movw	r30, r24
 6c8:	20 83       	st	Z, r18
   /*------------------ Character size select  ---------------*/
   /*---- setting it to 8-bit -----*/
   UCSRC |= 0x05;
 6ca:	80 e4       	ldi	r24, 0x40	; 64
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	20 e4       	ldi	r18, 0x40	; 64
 6d0:	30 e0       	ldi	r19, 0x00	; 0
 6d2:	f9 01       	movw	r30, r18
 6d4:	20 81       	ld	r18, Z
 6d6:	25 60       	ori	r18, 0x05	; 5
 6d8:	fc 01       	movw	r30, r24
 6da:	20 83       	st	Z, r18
   UCSRB &= ~(0x04);
 6dc:	8a e2       	ldi	r24, 0x2A	; 42
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	2a e2       	ldi	r18, 0x2A	; 42
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	f9 01       	movw	r30, r18
 6e6:	20 81       	ld	r18, Z
 6e8:	2b 7f       	andi	r18, 0xFB	; 251
 6ea:	fc 01       	movw	r30, r24
 6ec:	20 83       	st	Z, r18
   /*----- reset RXB8 and TXB8 ----*/
   UCSRB &= ~(0x03);
 6ee:	8a e2       	ldi	r24, 0x2A	; 42
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	2a e2       	ldi	r18, 0x2A	; 42
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	f9 01       	movw	r30, r18
 6f8:	20 81       	ld	r18, Z
 6fa:	2c 7f       	andi	r18, 0xFC	; 252
 6fc:	fc 01       	movw	r30, r24
 6fe:	20 83       	st	Z, r18
}
 700:	00 00       	nop
 702:	df 91       	pop	r29
 704:	cf 91       	pop	r28
 706:	08 95       	ret

00000708 <UsartRx>:
*
*  @param void
*  @return uint8_t
*/
void UsartRx(void)
{
 708:	cf 93       	push	r28
 70a:	df 93       	push	r29
 70c:	cd b7       	in	r28, 0x3d	; 61
 70e:	de b7       	in	r29, 0x3e	; 62
   //*c = (uint8_t)UDR;
   *c = UDR;
 710:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 714:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 718:	2c e2       	ldi	r18, 0x2C	; 44
 71a:	30 e0       	ldi	r19, 0x00	; 0
 71c:	f9 01       	movw	r30, r18
 71e:	20 81       	ld	r18, Z
 720:	fc 01       	movw	r30, r24
 722:	20 83       	st	Z, r18
   //gpioPortWrite(GPIOB, UDR);
}
 724:	00 00       	nop
 726:	df 91       	pop	r29
 728:	cf 91       	pop	r28
 72a:	08 95       	ret

0000072c <_exit>:
 72c:	f8 94       	cli

0000072e <__stop_program>:
 72e:	ff cf       	rjmp	.-2      	; 0x72e <__stop_program>
