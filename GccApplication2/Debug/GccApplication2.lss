
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000904  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000978  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  00000978  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fe2  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e8  00000000  00000000  00001b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ca4  00000000  00000000  00002406  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000490  00000000  00000000  000030ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000834  00000000  00000000  0000353c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000930  00000000  00000000  00003d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000046a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__vector_10>
  2c:	0c 94 af 03 	jmp	0x75e	; 0x75e <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 38 02 	call	0x470	; 0x470 <main>
  74:	0c 94 80 04 	jmp	0x900	; 0x900 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <MotorDC_Init>:
/**
 * Description: 
 * @param
 */
void MotorDC_Init(En_motorType_t en_motor_number)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	1f 92       	push	r1
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	89 83       	std	Y+1, r24	; 0x01
   switch (en_motor_number)
  88:	89 81       	ldd	r24, Y+1	; 0x01
  8a:	88 2f       	mov	r24, r24
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	00 97       	sbiw	r24, 0x00	; 0
  90:	19 f0       	breq	.+6      	; 0x98 <MotorDC_Init+0x1c>
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	89 f0       	breq	.+34     	; 0xb8 <MotorDC_Init+0x3c>
         gpioPinDirection(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,OUTPUT);
         /*set direction of motor terminal "B" */
         gpioPinDirection(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,OUTPUT);
      break;
   }
}
  96:	20 c0       	rjmp	.+64     	; 0xd8 <MotorDC_Init+0x5c>
{
   switch (en_motor_number)
   {
      case MOT_1:
         /*set directions of motor 1 enable bit*/
         gpioPinDirection(MOTOR_EN_1_GPIO,MOTOR_EN_1_BIT,OUTPUT);
  98:	4f ef       	ldi	r20, 0xFF	; 255
  9a:	60 e1       	ldi	r22, 0x10	; 16
  9c:	83 e0       	ldi	r24, 0x03	; 3
  9e:	0e 94 10 01 	call	0x220	; 0x220 <gpioPinDirection>
         /*set direction of motor terminal "A" */
         gpioPinDirection(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,OUTPUT);
  a2:	4f ef       	ldi	r20, 0xFF	; 255
  a4:	64 e0       	ldi	r22, 0x04	; 4
  a6:	83 e0       	ldi	r24, 0x03	; 3
  a8:	0e 94 10 01 	call	0x220	; 0x220 <gpioPinDirection>
         /*set direction of motor terminal "B" */
         gpioPinDirection(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,OUTPUT);         
  ac:	4f ef       	ldi	r20, 0xFF	; 255
  ae:	68 e0       	ldi	r22, 0x08	; 8
  b0:	83 e0       	ldi	r24, 0x03	; 3
  b2:	0e 94 10 01 	call	0x220	; 0x220 <gpioPinDirection>
      break;
  b6:	10 c0       	rjmp	.+32     	; 0xd8 <MotorDC_Init+0x5c>
      case MOT_2:
         /*set directions of motor 2 enable bit*/
         gpioPinDirection(MOTOR_EN_2_GPIO,MOTOR_EN_2_BIT,OUTPUT);
  b8:	4f ef       	ldi	r20, 0xFF	; 255
  ba:	60 e2       	ldi	r22, 0x20	; 32
  bc:	83 e0       	ldi	r24, 0x03	; 3
  be:	0e 94 10 01 	call	0x220	; 0x220 <gpioPinDirection>
         /*set direction of motor terminal "A" */
         gpioPinDirection(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,OUTPUT);
  c2:	4f ef       	ldi	r20, 0xFF	; 255
  c4:	60 e4       	ldi	r22, 0x40	; 64
  c6:	83 e0       	ldi	r24, 0x03	; 3
  c8:	0e 94 10 01 	call	0x220	; 0x220 <gpioPinDirection>
         /*set direction of motor terminal "B" */
         gpioPinDirection(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,OUTPUT);
  cc:	4f ef       	ldi	r20, 0xFF	; 255
  ce:	60 e8       	ldi	r22, 0x80	; 128
  d0:	83 e0       	ldi	r24, 0x03	; 3
  d2:	0e 94 10 01 	call	0x220	; 0x220 <gpioPinDirection>
      break;
  d6:	00 00       	nop
   }
}
  d8:	00 00       	nop
  da:	0f 90       	pop	r0
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <MotorDC_Dir>:
 * Description: 
 * @param 
 * @param 
 */
void MotorDC_Dir(En_motorType_t en_motor_number, En_motorDir_t en_motor_dir)
{
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	00 d0       	rcall	.+0      	; 0xe8 <MotorDC_Dir+0x6>
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
  ec:	89 83       	std	Y+1, r24	; 0x01
  ee:	6a 83       	std	Y+2, r22	; 0x02
   switch(en_motor_number)
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	88 2f       	mov	r24, r24
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	00 97       	sbiw	r24, 0x00	; 0
  f8:	21 f0       	breq	.+8      	; 0x102 <MotorDC_Dir+0x20>
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	09 f4       	brne	.+2      	; 0x100 <MotorDC_Dir+0x1e>
  fe:	3e c0       	rjmp	.+124    	; 0x17c <MotorDC_Dir+0x9a>
               gpioPinWrite(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
            break;
         }
      break;
   }
}
 100:	7a c0       	rjmp	.+244    	; 0x1f6 <MotorDC_Dir+0x114>
void MotorDC_Dir(En_motorType_t en_motor_number, En_motorDir_t en_motor_dir)
{
   switch(en_motor_number)
   {
      case MOT_1:
         switch(en_motor_dir)
 102:	8a 81       	ldd	r24, Y+2	; 0x02
 104:	88 2f       	mov	r24, r24
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	91 05       	cpc	r25, r1
 10c:	b1 f0       	breq	.+44     	; 0x13a <MotorDC_Dir+0x58>
 10e:	82 30       	cpi	r24, 0x02	; 2
 110:	91 05       	cpc	r25, r1
 112:	19 f1       	breq	.+70     	; 0x15a <MotorDC_Dir+0x78>
 114:	89 2b       	or	r24, r25
 116:	09 f0       	breq	.+2      	; 0x11a <MotorDC_Dir+0x38>
               /*write on terminals "A" & "B" of MOT_1 : 1 0*/
               gpioPinWrite(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,HIGH);
               gpioPinWrite(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
            break;
         }      
      break;
 118:	6e c0       	rjmp	.+220    	; 0x1f6 <MotorDC_Dir+0x114>
      case MOT_1:
         switch(en_motor_dir)
         {
            case STOP:
               /*write 0 on MOTOR_EN_1_BIT*/
               gpioPinWrite(MOTOR_EN_1_GPIO,MOTOR_EN_1_BIT,LOW);               
 11a:	40 e0       	ldi	r20, 0x00	; 0
 11c:	60 e1       	ldi	r22, 0x10	; 16
 11e:	83 e0       	ldi	r24, 0x03	; 3
 120:	0e 94 a4 01 	call	0x348	; 0x348 <gpioPinWrite>
               /*write on terminals "A" & "B" of MOT_1 : 0 0*/
               gpioPinWrite(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
 124:	40 e0       	ldi	r20, 0x00	; 0
 126:	64 e0       	ldi	r22, 0x04	; 4
 128:	83 e0       	ldi	r24, 0x03	; 3
 12a:	0e 94 a4 01 	call	0x348	; 0x348 <gpioPinWrite>
               gpioPinWrite(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
 12e:	40 e0       	ldi	r20, 0x00	; 0
 130:	68 e0       	ldi	r22, 0x08	; 8
 132:	83 e0       	ldi	r24, 0x03	; 3
 134:	0e 94 a4 01 	call	0x348	; 0x348 <gpioPinWrite>
            break;
 138:	20 c0       	rjmp	.+64     	; 0x17a <MotorDC_Dir+0x98>
            case FORWARD:
               /*write 1 on MOTOR_EN_1_BIT*/
               gpioPinWrite(MOTOR_EN_1_GPIO,MOTOR_EN_1_BIT,HIGH);
 13a:	4f ef       	ldi	r20, 0xFF	; 255
 13c:	60 e1       	ldi	r22, 0x10	; 16
 13e:	83 e0       	ldi	r24, 0x03	; 3
 140:	0e 94 a4 01 	call	0x348	; 0x348 <gpioPinWrite>
               /*write on terminals "A" & "B" of MOT_1 : 0 1*/
               gpioPinWrite(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	64 e0       	ldi	r22, 0x04	; 4
 148:	83 e0       	ldi	r24, 0x03	; 3
 14a:	0e 94 a4 01 	call	0x348	; 0x348 <gpioPinWrite>
               gpioPinWrite(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,HIGH);               
 14e:	4f ef       	ldi	r20, 0xFF	; 255
 150:	68 e0       	ldi	r22, 0x08	; 8
 152:	83 e0       	ldi	r24, 0x03	; 3
 154:	0e 94 a4 01 	call	0x348	; 0x348 <gpioPinWrite>
            break;
 158:	10 c0       	rjmp	.+32     	; 0x17a <MotorDC_Dir+0x98>
            case BACKWARD:
               /*write 1 on MOTOR_EN_1_BIT*/
               gpioPinWrite(MOTOR_EN_1_GPIO,MOTOR_EN_1_BIT,HIGH);
 15a:	4f ef       	ldi	r20, 0xFF	; 255
 15c:	60 e1       	ldi	r22, 0x10	; 16
 15e:	83 e0       	ldi	r24, 0x03	; 3
 160:	0e 94 a4 01 	call	0x348	; 0x348 <gpioPinWrite>
               /*write on terminals "A" & "B" of MOT_1 : 1 0*/
               gpioPinWrite(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,HIGH);
 164:	4f ef       	ldi	r20, 0xFF	; 255
 166:	64 e0       	ldi	r22, 0x04	; 4
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	0e 94 a4 01 	call	0x348	; 0x348 <gpioPinWrite>
               gpioPinWrite(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
 16e:	40 e0       	ldi	r20, 0x00	; 0
 170:	68 e0       	ldi	r22, 0x08	; 8
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	0e 94 a4 01 	call	0x348	; 0x348 <gpioPinWrite>
            break;
 178:	00 00       	nop
         }      
      break;
 17a:	3d c0       	rjmp	.+122    	; 0x1f6 <MotorDC_Dir+0x114>
      case MOT_2:
         switch(en_motor_dir)
 17c:	8a 81       	ldd	r24, Y+2	; 0x02
 17e:	88 2f       	mov	r24, r24
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	91 05       	cpc	r25, r1
 186:	b1 f0       	breq	.+44     	; 0x1b4 <MotorDC_Dir+0xd2>
 188:	82 30       	cpi	r24, 0x02	; 2
 18a:	91 05       	cpc	r25, r1
 18c:	19 f1       	breq	.+70     	; 0x1d4 <MotorDC_Dir+0xf2>
 18e:	89 2b       	or	r24, r25
 190:	09 f0       	breq	.+2      	; 0x194 <MotorDC_Dir+0xb2>
               /*write on terminals "A" & "B" of MOT_2 : 1 0*/
               gpioPinWrite(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,HIGH);
               gpioPinWrite(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
            break;
         }
      break;
 192:	30 c0       	rjmp	.+96     	; 0x1f4 <MotorDC_Dir+0x112>
      case MOT_2:
         switch(en_motor_dir)
         {
            case STOP:
               /*write 0 on MOTOR_EN_2_BIT*/
               gpioPinWrite(MOTOR_EN_2_GPIO,MOTOR_EN_2_BIT,LOW);
 194:	40 e0       	ldi	r20, 0x00	; 0
 196:	60 e2       	ldi	r22, 0x20	; 32
 198:	83 e0       	ldi	r24, 0x03	; 3
 19a:	0e 94 a4 01 	call	0x348	; 0x348 <gpioPinWrite>
               /*write on terminals "A" & "B" of MOT_2 : 0 0*/
               gpioPinWrite(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	60 e4       	ldi	r22, 0x40	; 64
 1a2:	83 e0       	ldi	r24, 0x03	; 3
 1a4:	0e 94 a4 01 	call	0x348	; 0x348 <gpioPinWrite>
               gpioPinWrite(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
 1a8:	40 e0       	ldi	r20, 0x00	; 0
 1aa:	60 e8       	ldi	r22, 0x80	; 128
 1ac:	83 e0       	ldi	r24, 0x03	; 3
 1ae:	0e 94 a4 01 	call	0x348	; 0x348 <gpioPinWrite>
            break;
 1b2:	20 c0       	rjmp	.+64     	; 0x1f4 <MotorDC_Dir+0x112>
            case FORWARD:
               /*write 1 on MOTOR_EN_2_BIT*/
               gpioPinWrite(MOTOR_EN_2_GPIO,MOTOR_EN_2_BIT,HIGH);
 1b4:	4f ef       	ldi	r20, 0xFF	; 255
 1b6:	60 e2       	ldi	r22, 0x20	; 32
 1b8:	83 e0       	ldi	r24, 0x03	; 3
 1ba:	0e 94 a4 01 	call	0x348	; 0x348 <gpioPinWrite>
               /*write on terminals "A" & "B" of MOT_2 : 0 1*/
               gpioPinWrite(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	60 e4       	ldi	r22, 0x40	; 64
 1c2:	83 e0       	ldi	r24, 0x03	; 3
 1c4:	0e 94 a4 01 	call	0x348	; 0x348 <gpioPinWrite>
               gpioPinWrite(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,HIGH);
 1c8:	4f ef       	ldi	r20, 0xFF	; 255
 1ca:	60 e8       	ldi	r22, 0x80	; 128
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	0e 94 a4 01 	call	0x348	; 0x348 <gpioPinWrite>
            break;
 1d2:	10 c0       	rjmp	.+32     	; 0x1f4 <MotorDC_Dir+0x112>
            case BACKWARD:
               /*write 1 on MOTOR_EN_2_BIT*/
               gpioPinWrite(MOTOR_EN_2_GPIO,MOTOR_EN_2_BIT,HIGH);
 1d4:	4f ef       	ldi	r20, 0xFF	; 255
 1d6:	60 e2       	ldi	r22, 0x20	; 32
 1d8:	83 e0       	ldi	r24, 0x03	; 3
 1da:	0e 94 a4 01 	call	0x348	; 0x348 <gpioPinWrite>
               /*write on terminals "A" & "B" of MOT_2 : 1 0*/
               gpioPinWrite(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,HIGH);
 1de:	4f ef       	ldi	r20, 0xFF	; 255
 1e0:	60 e4       	ldi	r22, 0x40	; 64
 1e2:	83 e0       	ldi	r24, 0x03	; 3
 1e4:	0e 94 a4 01 	call	0x348	; 0x348 <gpioPinWrite>
               gpioPinWrite(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
 1e8:	40 e0       	ldi	r20, 0x00	; 0
 1ea:	60 e8       	ldi	r22, 0x80	; 128
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	0e 94 a4 01 	call	0x348	; 0x348 <gpioPinWrite>
            break;
 1f2:	00 00       	nop
         }
      break;
 1f4:	00 00       	nop
   }
}
 1f6:	00 00       	nop
 1f8:	0f 90       	pop	r0
 1fa:	0f 90       	pop	r0
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <MotorDC_Speed_PollingWithT0>:
/**
 * Description: 
 * @param 
 */
void MotorDC_Speed_PollingWithT0(uint8_t u8_motor_speed)
{
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	1f 92       	push	r1
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
 20c:	89 83       	std	Y+1, r24	; 0x01
   
   timer0SwPWM(u8_motor_speed,1); // frequency is 250
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	89 81       	ldd	r24, Y+1	; 0x01
 212:	0e 94 29 03 	call	0x652	; 0x652 <timer0SwPWM>
 216:	00 00       	nop
 218:	0f 90       	pop	r0
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <gpioPinDirection>:
 * @param direction: set the pins direction and takes the following values
 * 				- 0x00 -> Input
 * 				- 0xff -> Output
 */
void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	00 d0       	rcall	.+0      	; 0x226 <gpioPinDirection+0x6>
 226:	1f 92       	push	r1
 228:	cd b7       	in	r28, 0x3d	; 61
 22a:	de b7       	in	r29, 0x3e	; 62
 22c:	89 83       	std	Y+1, r24	; 0x01
 22e:	6a 83       	std	Y+2, r22	; 0x02
 230:	4b 83       	std	Y+3, r20	; 0x03
	/*check the direction whether input or output*/
	if(!u8_direction)
 232:	8b 81       	ldd	r24, Y+3	; 0x03
 234:	88 23       	and	r24, r24
 236:	09 f0       	breq	.+2      	; 0x23a <gpioPinDirection+0x1a>
 238:	42 c0       	rjmp	.+132    	; 0x2be <gpioPinDirection+0x9e>
	{		
		/*direction is input*/
		/*invert u8_pins*/
		u8_pins = ~u8_pins;	
 23a:	8a 81       	ldd	r24, Y+2	; 0x02
 23c:	80 95       	com	r24
 23e:	8a 83       	std	Y+2, r24	; 0x02
		switch(u8_port)
 240:	89 81       	ldd	r24, Y+1	; 0x01
 242:	88 2f       	mov	r24, r24
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	91 05       	cpc	r25, r1
 24a:	b9 f0       	breq	.+46     	; 0x27a <gpioPinDirection+0x5a>
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	91 05       	cpc	r25, r1
 250:	1c f4       	brge	.+6      	; 0x258 <gpioPinDirection+0x38>
 252:	89 2b       	or	r24, r25
 254:	39 f0       	breq	.+14     	; 0x264 <gpioPinDirection+0x44>
			case 3: /* GPIOD */
			PORTD_DIR |= u8_pins;
			break;			
		}		
	}	
}
 256:	71 c0       	rjmp	.+226    	; 0x33a <gpioPinDirection+0x11a>
	if(!u8_direction)
	{		
		/*direction is input*/
		/*invert u8_pins*/
		u8_pins = ~u8_pins;	
		switch(u8_port)
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	91 05       	cpc	r25, r1
 25c:	c9 f0       	breq	.+50     	; 0x290 <gpioPinDirection+0x70>
 25e:	03 97       	sbiw	r24, 0x03	; 3
 260:	11 f1       	breq	.+68     	; 0x2a6 <gpioPinDirection+0x86>
			case 3: /* GPIOD */
			PORTD_DIR |= u8_pins;
			break;			
		}		
	}	
}
 262:	6b c0       	rjmp	.+214    	; 0x33a <gpioPinDirection+0x11a>
		/*invert u8_pins*/
		u8_pins = ~u8_pins;	
		switch(u8_port)
		{
			case 0: /* GPIOA */			
			PORTA_DIR &= u8_pins;			
 264:	8a e3       	ldi	r24, 0x3A	; 58
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	2a e3       	ldi	r18, 0x3A	; 58
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	f9 01       	movw	r30, r18
 26e:	30 81       	ld	r19, Z
 270:	2a 81       	ldd	r18, Y+2	; 0x02
 272:	23 23       	and	r18, r19
 274:	fc 01       	movw	r30, r24
 276:	20 83       	st	Z, r18
			break;
 278:	60 c0       	rjmp	.+192    	; 0x33a <gpioPinDirection+0x11a>
			case 1: /* GPIOB */			
			PORTB_DIR &= u8_pins;
 27a:	87 e3       	ldi	r24, 0x37	; 55
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	27 e3       	ldi	r18, 0x37	; 55
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	f9 01       	movw	r30, r18
 284:	30 81       	ld	r19, Z
 286:	2a 81       	ldd	r18, Y+2	; 0x02
 288:	23 23       	and	r18, r19
 28a:	fc 01       	movw	r30, r24
 28c:	20 83       	st	Z, r18
			break;
 28e:	55 c0       	rjmp	.+170    	; 0x33a <gpioPinDirection+0x11a>
			case 2: /* GPIOC */
			PORTC_DIR &= u8_pins;			
 290:	84 e3       	ldi	r24, 0x34	; 52
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	24 e3       	ldi	r18, 0x34	; 52
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	f9 01       	movw	r30, r18
 29a:	30 81       	ld	r19, Z
 29c:	2a 81       	ldd	r18, Y+2	; 0x02
 29e:	23 23       	and	r18, r19
 2a0:	fc 01       	movw	r30, r24
 2a2:	20 83       	st	Z, r18
			break;
 2a4:	4a c0       	rjmp	.+148    	; 0x33a <gpioPinDirection+0x11a>
			case 3: /* GPIOD */
			PORTD_DIR &= u8_pins;			
 2a6:	81 e3       	ldi	r24, 0x31	; 49
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	21 e3       	ldi	r18, 0x31	; 49
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	f9 01       	movw	r30, r18
 2b0:	30 81       	ld	r19, Z
 2b2:	2a 81       	ldd	r18, Y+2	; 0x02
 2b4:	23 23       	and	r18, r19
 2b6:	fc 01       	movw	r30, r24
 2b8:	20 83       	st	Z, r18
			break;			
 2ba:	00 00       	nop
 2bc:	3e c0       	rjmp	.+124    	; 0x33a <gpioPinDirection+0x11a>
		}		
	}else{
		/*direction is output*/
		switch(u8_port)
 2be:	89 81       	ldd	r24, Y+1	; 0x01
 2c0:	88 2f       	mov	r24, r24
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	91 05       	cpc	r25, r1
 2c8:	b9 f0       	breq	.+46     	; 0x2f8 <gpioPinDirection+0xd8>
 2ca:	82 30       	cpi	r24, 0x02	; 2
 2cc:	91 05       	cpc	r25, r1
 2ce:	1c f4       	brge	.+6      	; 0x2d6 <gpioPinDirection+0xb6>
 2d0:	89 2b       	or	r24, r25
 2d2:	39 f0       	breq	.+14     	; 0x2e2 <gpioPinDirection+0xc2>
			case 3: /* GPIOD */
			PORTD_DIR |= u8_pins;
			break;			
		}		
	}	
}
 2d4:	32 c0       	rjmp	.+100    	; 0x33a <gpioPinDirection+0x11a>
			PORTD_DIR &= u8_pins;			
			break;			
		}		
	}else{
		/*direction is output*/
		switch(u8_port)
 2d6:	82 30       	cpi	r24, 0x02	; 2
 2d8:	91 05       	cpc	r25, r1
 2da:	c9 f0       	breq	.+50     	; 0x30e <gpioPinDirection+0xee>
 2dc:	03 97       	sbiw	r24, 0x03	; 3
 2de:	11 f1       	breq	.+68     	; 0x324 <gpioPinDirection+0x104>
			case 3: /* GPIOD */
			PORTD_DIR |= u8_pins;
			break;			
		}		
	}	
}
 2e0:	2c c0       	rjmp	.+88     	; 0x33a <gpioPinDirection+0x11a>
	}else{
		/*direction is output*/
		switch(u8_port)
		{
			case 0: /* GPIOA */
			PORTA_DIR |= u8_pins;
 2e2:	8a e3       	ldi	r24, 0x3A	; 58
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	2a e3       	ldi	r18, 0x3A	; 58
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	f9 01       	movw	r30, r18
 2ec:	30 81       	ld	r19, Z
 2ee:	2a 81       	ldd	r18, Y+2	; 0x02
 2f0:	23 2b       	or	r18, r19
 2f2:	fc 01       	movw	r30, r24
 2f4:	20 83       	st	Z, r18
			break;
 2f6:	21 c0       	rjmp	.+66     	; 0x33a <gpioPinDirection+0x11a>
			case 1: /* GPIOB */
			PORTB_DIR |= u8_pins;
 2f8:	87 e3       	ldi	r24, 0x37	; 55
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	27 e3       	ldi	r18, 0x37	; 55
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	f9 01       	movw	r30, r18
 302:	30 81       	ld	r19, Z
 304:	2a 81       	ldd	r18, Y+2	; 0x02
 306:	23 2b       	or	r18, r19
 308:	fc 01       	movw	r30, r24
 30a:	20 83       	st	Z, r18
			break;
 30c:	16 c0       	rjmp	.+44     	; 0x33a <gpioPinDirection+0x11a>
			case 2: /* GPIOC */
			PORTC_DIR |= u8_pins;
 30e:	84 e3       	ldi	r24, 0x34	; 52
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	24 e3       	ldi	r18, 0x34	; 52
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	f9 01       	movw	r30, r18
 318:	30 81       	ld	r19, Z
 31a:	2a 81       	ldd	r18, Y+2	; 0x02
 31c:	23 2b       	or	r18, r19
 31e:	fc 01       	movw	r30, r24
 320:	20 83       	st	Z, r18
			break;
 322:	0b c0       	rjmp	.+22     	; 0x33a <gpioPinDirection+0x11a>
			case 3: /* GPIOD */
			PORTD_DIR |= u8_pins;
 324:	81 e3       	ldi	r24, 0x31	; 49
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	21 e3       	ldi	r18, 0x31	; 49
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	f9 01       	movw	r30, r18
 32e:	30 81       	ld	r19, Z
 330:	2a 81       	ldd	r18, Y+2	; 0x02
 332:	23 2b       	or	r18, r19
 334:	fc 01       	movw	r30, r24
 336:	20 83       	st	Z, r18
			break;			
 338:	00 00       	nop
		}		
	}	
}
 33a:	00 00       	nop
 33c:	0f 90       	pop	r0
 33e:	0f 90       	pop	r0
 340:	0f 90       	pop	r0
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <gpioPinWrite>:
 * 				- BIT6
 * 				- BIT7
 * @param value
 */
void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	00 d0       	rcall	.+0      	; 0x34e <gpioPinWrite+0x6>
 34e:	1f 92       	push	r1
 350:	cd b7       	in	r28, 0x3d	; 61
 352:	de b7       	in	r29, 0x3e	; 62
 354:	89 83       	std	Y+1, r24	; 0x01
 356:	6a 83       	std	Y+2, r22	; 0x02
 358:	4b 83       	std	Y+3, r20	; 0x03
	if(!u8_value)
 35a:	8b 81       	ldd	r24, Y+3	; 0x03
 35c:	88 23       	and	r24, r24
 35e:	09 f0       	breq	.+2      	; 0x362 <gpioPinWrite+0x1a>
 360:	42 c0       	rjmp	.+132    	; 0x3e6 <gpioPinWrite+0x9e>
	{
		u8_pins = ~u8_pins;
 362:	8a 81       	ldd	r24, Y+2	; 0x02
 364:	80 95       	com	r24
 366:	8a 83       	std	Y+2, r24	; 0x02
		switch(u8_port)
 368:	89 81       	ldd	r24, Y+1	; 0x01
 36a:	88 2f       	mov	r24, r24
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	81 30       	cpi	r24, 0x01	; 1
 370:	91 05       	cpc	r25, r1
 372:	b9 f0       	breq	.+46     	; 0x3a2 <gpioPinWrite+0x5a>
 374:	82 30       	cpi	r24, 0x02	; 2
 376:	91 05       	cpc	r25, r1
 378:	1c f4       	brge	.+6      	; 0x380 <gpioPinWrite+0x38>
 37a:	89 2b       	or	r24, r25
 37c:	39 f0       	breq	.+14     	; 0x38c <gpioPinWrite+0x44>
			PORTD_DATA |= u8_pins;		/* set pins*/
			break;
		}
	}
		
}
 37e:	71 c0       	rjmp	.+226    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{
	if(!u8_value)
	{
		u8_pins = ~u8_pins;
		switch(u8_port)
 380:	82 30       	cpi	r24, 0x02	; 2
 382:	91 05       	cpc	r25, r1
 384:	c9 f0       	breq	.+50     	; 0x3b8 <gpioPinWrite+0x70>
 386:	03 97       	sbiw	r24, 0x03	; 3
 388:	11 f1       	breq	.+68     	; 0x3ce <gpioPinWrite+0x86>
			PORTD_DATA |= u8_pins;		/* set pins*/
			break;
		}
	}
		
}
 38a:	6b c0       	rjmp	.+214    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
	{
		u8_pins = ~u8_pins;
		switch(u8_port)
		{
			case 0: /* GPIOA */
			PORTA_DATA &= u8_pins;		/* clear pins*/
 38c:	8b e3       	ldi	r24, 0x3B	; 59
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	2b e3       	ldi	r18, 0x3B	; 59
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	f9 01       	movw	r30, r18
 396:	30 81       	ld	r19, Z
 398:	2a 81       	ldd	r18, Y+2	; 0x02
 39a:	23 23       	and	r18, r19
 39c:	fc 01       	movw	r30, r24
 39e:	20 83       	st	Z, r18
			break;
 3a0:	60 c0       	rjmp	.+192    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			case 1: /* GPIOB */
			PORTB_DATA &= u8_pins;		/* clear pins*/
 3a2:	88 e3       	ldi	r24, 0x38	; 56
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	28 e3       	ldi	r18, 0x38	; 56
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	f9 01       	movw	r30, r18
 3ac:	30 81       	ld	r19, Z
 3ae:	2a 81       	ldd	r18, Y+2	; 0x02
 3b0:	23 23       	and	r18, r19
 3b2:	fc 01       	movw	r30, r24
 3b4:	20 83       	st	Z, r18
			break;
 3b6:	55 c0       	rjmp	.+170    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			case 2: /* GPIOC */
			PORTC_DATA &= u8_pins;		/* clear pins*/
 3b8:	85 e3       	ldi	r24, 0x35	; 53
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	25 e3       	ldi	r18, 0x35	; 53
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	f9 01       	movw	r30, r18
 3c2:	30 81       	ld	r19, Z
 3c4:	2a 81       	ldd	r18, Y+2	; 0x02
 3c6:	23 23       	and	r18, r19
 3c8:	fc 01       	movw	r30, r24
 3ca:	20 83       	st	Z, r18
			break;
 3cc:	4a c0       	rjmp	.+148    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			case 3: /* GPIOD */
			PORTD_DATA &= u8_pins;		/* clear pins*/
 3ce:	82 e3       	ldi	r24, 0x32	; 50
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	22 e3       	ldi	r18, 0x32	; 50
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	f9 01       	movw	r30, r18
 3d8:	30 81       	ld	r19, Z
 3da:	2a 81       	ldd	r18, Y+2	; 0x02
 3dc:	23 23       	and	r18, r19
 3de:	fc 01       	movw	r30, r24
 3e0:	20 83       	st	Z, r18
			break;
 3e2:	00 00       	nop
 3e4:	3e c0       	rjmp	.+124    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
		}		
	}else
	{
		switch(u8_port)
 3e6:	89 81       	ldd	r24, Y+1	; 0x01
 3e8:	88 2f       	mov	r24, r24
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	81 30       	cpi	r24, 0x01	; 1
 3ee:	91 05       	cpc	r25, r1
 3f0:	b9 f0       	breq	.+46     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3f2:	82 30       	cpi	r24, 0x02	; 2
 3f4:	91 05       	cpc	r25, r1
 3f6:	1c f4       	brge	.+6      	; 0x3fe <gpioPinWrite+0xb6>
 3f8:	89 2b       	or	r24, r25
 3fa:	39 f0       	breq	.+14     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
			PORTD_DATA |= u8_pins;		/* set pins*/
			break;
		}
	}
		
}
 3fc:	32 c0       	rjmp	.+100    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			PORTD_DATA &= u8_pins;		/* clear pins*/
			break;
		}		
	}else
	{
		switch(u8_port)
 3fe:	82 30       	cpi	r24, 0x02	; 2
 400:	91 05       	cpc	r25, r1
 402:	c9 f0       	breq	.+50     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 404:	03 97       	sbiw	r24, 0x03	; 3
 406:	11 f1       	breq	.+68     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			PORTD_DATA |= u8_pins;		/* set pins*/
			break;
		}
	}
		
}
 408:	2c c0       	rjmp	.+88     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
	}else
	{
		switch(u8_port)
		{
			case 0: /* GPIOA */
			PORTA_DATA |= u8_pins;		/* set pins*/
 40a:	8b e3       	ldi	r24, 0x3B	; 59
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	2b e3       	ldi	r18, 0x3B	; 59
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	f9 01       	movw	r30, r18
 414:	30 81       	ld	r19, Z
 416:	2a 81       	ldd	r18, Y+2	; 0x02
 418:	23 2b       	or	r18, r19
 41a:	fc 01       	movw	r30, r24
 41c:	20 83       	st	Z, r18
			break;
 41e:	21 c0       	rjmp	.+66     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			case 1: /* GPIOB */
			PORTB_DATA |= u8_pins;		/* set pins*/
 420:	88 e3       	ldi	r24, 0x38	; 56
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	28 e3       	ldi	r18, 0x38	; 56
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	f9 01       	movw	r30, r18
 42a:	30 81       	ld	r19, Z
 42c:	2a 81       	ldd	r18, Y+2	; 0x02
 42e:	23 2b       	or	r18, r19
 430:	fc 01       	movw	r30, r24
 432:	20 83       	st	Z, r18
			break;
 434:	16 c0       	rjmp	.+44     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			case 2: /* GPIOC */
			PORTC_DATA |= u8_pins;		/* set pins*/
 436:	85 e3       	ldi	r24, 0x35	; 53
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	25 e3       	ldi	r18, 0x35	; 53
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	f9 01       	movw	r30, r18
 440:	30 81       	ld	r19, Z
 442:	2a 81       	ldd	r18, Y+2	; 0x02
 444:	23 2b       	or	r18, r19
 446:	fc 01       	movw	r30, r24
 448:	20 83       	st	Z, r18
			break;
 44a:	0b c0       	rjmp	.+22     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			case 3: /* GPIOD */
			PORTD_DATA |= u8_pins;		/* set pins*/
 44c:	82 e3       	ldi	r24, 0x32	; 50
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	22 e3       	ldi	r18, 0x32	; 50
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	f9 01       	movw	r30, r18
 456:	30 81       	ld	r19, Z
 458:	2a 81       	ldd	r18, Y+2	; 0x02
 45a:	23 2b       	or	r18, r19
 45c:	fc 01       	movw	r30, r24
 45e:	20 83       	st	Z, r18
			break;
 460:	00 00       	nop
		}
	}
		
}
 462:	00 00       	nop
 464:	0f 90       	pop	r0
 466:	0f 90       	pop	r0
 468:	0f 90       	pop	r0
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	08 95       	ret

00000470 <main>:
void testPwm(void);
void car(void);


int main(void)
{ 
 470:	cf 93       	push	r28
 472:	df 93       	push	r29
 474:	cd b7       	in	r28, 0x3d	; 61
 476:	de b7       	in	r29, 0x3e	; 62
	/* gpioReq7();*/ 
	/* gpioReq8(); */
	/* gpioReq9(); */
	/*test();*/ 
   //testPwm();
   car();
 478:	0e 94 43 02 	call	0x486	; 0x486 <car>
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	90 e0       	ldi	r25, 0x00	; 0
}
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	08 95       	ret

00000486 <car>:

void car()
{
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
 48a:	1f 92       	push	r1
 48c:	cd b7       	in	r28, 0x3d	; 61
 48e:	de b7       	in	r29, 0x3e	; 62
   /********************************************** Initialization ********************************************************/
   /*Initialize motors*/
   MotorDC_Init(MOT_1);
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	0e 94 3e 00 	call	0x7c	; 0x7c <MotorDC_Init>
   MotorDC_Init(MOT_2);
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	0e 94 3e 00 	call	0x7c	; 0x7c <MotorDC_Init>
   /********************************************* Move from speed 0-100 for 5 seconds ************************************/   
   /* start moving forward*/
   MotorDC_Dir(MOT_1,FORWARD);
 49c:	61 e0       	ldi	r22, 0x01	; 1
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	0e 94 71 00 	call	0xe2	; 0xe2 <MotorDC_Dir>
   MotorDC_Dir(MOT_2,FORWARD);      
 4a4:	61 e0       	ldi	r22, 0x01	; 1
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	0e 94 71 00 	call	0xe2	; 0xe2 <MotorDC_Dir>
   uint8_t i =1;
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	89 83       	std	Y+1, r24	; 0x01
   for(; i<=100;i++)  // step size = 100 / 5 where 100 represents 100 of full speed 5 is the 5 second
 4b0:	0c c0       	rjmp	.+24     	; 0x4ca <car+0x44>
   {
      MotorDC_Speed_PollingWithT0(i);  
 4b2:	89 81       	ldd	r24, Y+1	; 0x01
 4b4:	0e 94 01 01 	call	0x202	; 0x202 <MotorDC_Speed_PollingWithT0>
      softwareDelayMs(90);       
 4b8:	6a e5       	ldi	r22, 0x5A	; 90
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 9f 02 	call	0x53e	; 0x53e <softwareDelayMs>
   /********************************************* Move from speed 0-100 for 5 seconds ************************************/   
   /* start moving forward*/
   MotorDC_Dir(MOT_1,FORWARD);
   MotorDC_Dir(MOT_2,FORWARD);      
   uint8_t i =1;
   for(; i<=100;i++)  // step size = 100 / 5 where 100 represents 100 of full speed 5 is the 5 second
 4c4:	89 81       	ldd	r24, Y+1	; 0x01
 4c6:	8f 5f       	subi	r24, 0xFF	; 255
 4c8:	89 83       	std	Y+1, r24	; 0x01
 4ca:	89 81       	ldd	r24, Y+1	; 0x01
 4cc:	85 36       	cpi	r24, 0x65	; 101
 4ce:	88 f3       	brcs	.-30     	; 0x4b2 <car+0x2c>
      MotorDC_Speed_PollingWithT0(i);  
      softwareDelayMs(90);       
   }
   /********************************************* Move from speed 100-0 for 5 seconds ************************************/
   //Reinitialize i
   i =100;     
 4d0:	84 e6       	ldi	r24, 0x64	; 100
 4d2:	89 83       	std	Y+1, r24	; 0x01
   for (;i>=1;i--)
 4d4:	0c c0       	rjmp	.+24     	; 0x4ee <car+0x68>
   {
      MotorDC_Speed_PollingWithT0(i); 
 4d6:	89 81       	ldd	r24, Y+1	; 0x01
 4d8:	0e 94 01 01 	call	0x202	; 0x202 <MotorDC_Speed_PollingWithT0>
      softwareDelayMs(90);        
 4dc:	6a e5       	ldi	r22, 0x5A	; 90
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	0e 94 9f 02 	call	0x53e	; 0x53e <softwareDelayMs>
      softwareDelayMs(90);       
   }
   /********************************************* Move from speed 100-0 for 5 seconds ************************************/
   //Reinitialize i
   i =100;     
   for (;i>=1;i--)
 4e8:	89 81       	ldd	r24, Y+1	; 0x01
 4ea:	81 50       	subi	r24, 0x01	; 1
 4ec:	89 83       	std	Y+1, r24	; 0x01
 4ee:	89 81       	ldd	r24, Y+1	; 0x01
 4f0:	88 23       	and	r24, r24
 4f2:	89 f7       	brne	.-30     	; 0x4d6 <car+0x50>
   {
      MotorDC_Speed_PollingWithT0(i); 
      softwareDelayMs(90);        
   }   
   MotorDC_Dir(MOT_1,STOP);
 4f4:	60 e0       	ldi	r22, 0x00	; 0
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	0e 94 71 00 	call	0xe2	; 0xe2 <MotorDC_Dir>
   MotorDC_Dir(MOT_2,STOP);
 4fc:	60 e0       	ldi	r22, 0x00	; 0
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	0e 94 71 00 	call	0xe2	; 0xe2 <MotorDC_Dir>
   timer0Stop();
 504:	0e 94 19 03 	call	0x632	; 0x632 <timer0Stop>
   /********************************************* Rotate 90 degree ******************************************************/
   MotorDC_Dir(MOT_1,FORWARD);
 508:	61 e0       	ldi	r22, 0x01	; 1
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	0e 94 71 00 	call	0xe2	; 0xe2 <MotorDC_Dir>
   MotorDC_Dir(MOT_2,BACKWARD);
 510:	62 e0       	ldi	r22, 0x02	; 2
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	0e 94 71 00 	call	0xe2	; 0xe2 <MotorDC_Dir>
   softwareDelayMs(350);
 518:	6e e5       	ldi	r22, 0x5E	; 94
 51a:	71 e0       	ldi	r23, 0x01	; 1
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 9f 02 	call	0x53e	; 0x53e <softwareDelayMs>
   MotorDC_Dir(MOT_1,STOP);
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	0e 94 71 00 	call	0xe2	; 0xe2 <MotorDC_Dir>
   MotorDC_Dir(MOT_2,STOP);
 52c:	60 e0       	ldi	r22, 0x00	; 0
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	0e 94 71 00 	call	0xe2	; 0xe2 <MotorDC_Dir>
           
   
}
 534:	00 00       	nop
 536:	0f 90       	pop	r0
 538:	df 91       	pop	r29
 53a:	cf 91       	pop	r28
 53c:	08 95       	ret

0000053e <softwareDelayMs>:
 * Description: this delay function operate in a polling manner
 * 				don't use it with RTOSs
 * @param a_delay_in_ms: the milli-seconds
 */
void softwareDelayMs(uint32_t u32_delay_in_ms)
{
 53e:	cf 93       	push	r28
 540:	df 93       	push	r29
 542:	00 d0       	rcall	.+0      	; 0x544 <softwareDelayMs+0x6>
 544:	00 d0       	rcall	.+0      	; 0x546 <softwareDelayMs+0x8>
 546:	00 d0       	rcall	.+0      	; 0x548 <softwareDelayMs+0xa>
 548:	cd b7       	in	r28, 0x3d	; 61
 54a:	de b7       	in	r29, 0x3e	; 62
 54c:	6b 83       	std	Y+3, r22	; 0x03
 54e:	7c 83       	std	Y+4, r23	; 0x04
 550:	8d 83       	std	Y+5, r24	; 0x05
 552:	9e 83       	std	Y+6, r25	; 0x06
	while(u32_delay_in_ms > 0)
 554:	19 c0       	rjmp	.+50     	; 0x588 <softwareDelayMs+0x4a>
	{
		volatile uint16_t i = 360;
 556:	88 e6       	ldi	r24, 0x68	; 104
 558:	91 e0       	ldi	r25, 0x01	; 1
 55a:	9a 83       	std	Y+2, r25	; 0x02
 55c:	89 83       	std	Y+1, r24	; 0x01
		while(i>0)
 55e:	05 c0       	rjmp	.+10     	; 0x56a <softwareDelayMs+0x2c>
		{
			i--;
 560:	89 81       	ldd	r24, Y+1	; 0x01
 562:	9a 81       	ldd	r25, Y+2	; 0x02
 564:	01 97       	sbiw	r24, 0x01	; 1
 566:	9a 83       	std	Y+2, r25	; 0x02
 568:	89 83       	std	Y+1, r24	; 0x01
void softwareDelayMs(uint32_t u32_delay_in_ms)
{
	while(u32_delay_in_ms > 0)
	{
		volatile uint16_t i = 360;
		while(i>0)
 56a:	89 81       	ldd	r24, Y+1	; 0x01
 56c:	9a 81       	ldd	r25, Y+2	; 0x02
 56e:	89 2b       	or	r24, r25
 570:	b9 f7       	brne	.-18     	; 0x560 <softwareDelayMs+0x22>
		{
			i--;
		}
		u32_delay_in_ms--;		
 572:	8b 81       	ldd	r24, Y+3	; 0x03
 574:	9c 81       	ldd	r25, Y+4	; 0x04
 576:	ad 81       	ldd	r26, Y+5	; 0x05
 578:	be 81       	ldd	r27, Y+6	; 0x06
 57a:	01 97       	sbiw	r24, 0x01	; 1
 57c:	a1 09       	sbc	r26, r1
 57e:	b1 09       	sbc	r27, r1
 580:	8b 83       	std	Y+3, r24	; 0x03
 582:	9c 83       	std	Y+4, r25	; 0x04
 584:	ad 83       	std	Y+5, r26	; 0x05
 586:	be 83       	std	Y+6, r27	; 0x06
 * 				don't use it with RTOSs
 * @param a_delay_in_ms: the milli-seconds
 */
void softwareDelayMs(uint32_t u32_delay_in_ms)
{
	while(u32_delay_in_ms > 0)
 588:	8b 81       	ldd	r24, Y+3	; 0x03
 58a:	9c 81       	ldd	r25, Y+4	; 0x04
 58c:	ad 81       	ldd	r26, Y+5	; 0x05
 58e:	be 81       	ldd	r27, Y+6	; 0x06
 590:	89 2b       	or	r24, r25
 592:	8a 2b       	or	r24, r26
 594:	8b 2b       	or	r24, r27
 596:	f9 f6       	brne	.-66     	; 0x556 <softwareDelayMs+0x18>
		{
			i--;
		}
		u32_delay_in_ms--;		
	}
}
 598:	00 00       	nop
 59a:	26 96       	adiw	r28, 0x06	; 6
 59c:	0f b6       	in	r0, 0x3f	; 63
 59e:	f8 94       	cli
 5a0:	de bf       	out	0x3e, r29	; 62
 5a2:	0f be       	out	0x3f, r0	; 63
 5a4:	cd bf       	out	0x3d, r28	; 61
 5a6:	df 91       	pop	r29
 5a8:	cf 91       	pop	r28
 5aa:	08 95       	ret

000005ac <timer0Init>:
          };
       }
    }
    /* stop the timer*/
    timer0Stop();	   
}
 5ac:	ef 92       	push	r14
 5ae:	0f 93       	push	r16
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	00 d0       	rcall	.+0      	; 0x5b6 <timer0Init+0xa>
 5b6:	00 d0       	rcall	.+0      	; 0x5b8 <timer0Init+0xc>
 5b8:	00 d0       	rcall	.+0      	; 0x5ba <timer0Init+0xe>
 5ba:	cd b7       	in	r28, 0x3d	; 61
 5bc:	de b7       	in	r29, 0x3e	; 62
 5be:	89 83       	std	Y+1, r24	; 0x01
 5c0:	6a 83       	std	Y+2, r22	; 0x02
 5c2:	4b 83       	std	Y+3, r20	; 0x03
 5c4:	2c 83       	std	Y+4, r18	; 0x04
 5c6:	0d 83       	std	Y+5, r16	; 0x05
 5c8:	ee 82       	std	Y+6, r14	; 0x06
 5ca:	89 81       	ldd	r24, Y+1	; 0x01
 5cc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 5d0:	8a 81       	ldd	r24, Y+2	; 0x02
 5d2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 5d6:	8b 81       	ldd	r24, Y+3	; 0x03
 5d8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 5dc:	8c 81       	ldd	r24, Y+4	; 0x04
 5de:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 5e2:	8d 81       	ldd	r24, Y+5	; 0x05
 5e4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 5e8:	8e 81       	ldd	r24, Y+6	; 0x06
 5ea:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 5ee:	00 00       	nop
 5f0:	26 96       	adiw	r28, 0x06	; 6
 5f2:	0f b6       	in	r0, 0x3f	; 63
 5f4:	f8 94       	cli
 5f6:	de bf       	out	0x3e, r29	; 62
 5f8:	0f be       	out	0x3f, r0	; 63
 5fa:	cd bf       	out	0x3d, r28	; 61
 5fc:	df 91       	pop	r29
 5fe:	cf 91       	pop	r28
 600:	0f 91       	pop	r16
 602:	ef 90       	pop	r14
 604:	08 95       	ret

00000606 <timer0Start>:
 606:	cf 93       	push	r28
 608:	df 93       	push	r29
 60a:	cd b7       	in	r28, 0x3d	; 61
 60c:	de b7       	in	r29, 0x3e	; 62
 60e:	83 e5       	ldi	r24, 0x53	; 83
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	23 e5       	ldi	r18, 0x53	; 83
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	f9 01       	movw	r30, r18
 618:	30 81       	ld	r19, Z
 61a:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 61e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 622:	24 2b       	or	r18, r20
 624:	23 2b       	or	r18, r19
 626:	fc 01       	movw	r30, r24
 628:	20 83       	st	Z, r18
 62a:	00 00       	nop
 62c:	df 91       	pop	r29
 62e:	cf 91       	pop	r28
 630:	08 95       	ret

00000632 <timer0Stop>:
 632:	cf 93       	push	r28
 634:	df 93       	push	r29
 636:	cd b7       	in	r28, 0x3d	; 61
 638:	de b7       	in	r29, 0x3e	; 62
 63a:	83 e5       	ldi	r24, 0x53	; 83
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	fc 01       	movw	r30, r24
 640:	80 81       	ld	r24, Z
 642:	83 e5       	ldi	r24, 0x53	; 83
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	fc 01       	movw	r30, r24
 648:	10 82       	st	Z, r1
 64a:	00 00       	nop
 64c:	df 91       	pop	r29
 64e:	cf 91       	pop	r28
 650:	08 95       	ret

00000652 <timer0SwPWM>:
/**
 * Description:
 * @param dutyCycle
 */
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
 652:	ef 92       	push	r14
 654:	0f 93       	push	r16
 656:	cf 93       	push	r28
 658:	df 93       	push	r29
 65a:	cd b7       	in	r28, 0x3d	; 61
 65c:	de b7       	in	r29, 0x3e	; 62
 65e:	2a 97       	sbiw	r28, 0x0a	; 10
 660:	0f b6       	in	r0, 0x3f	; 63
 662:	f8 94       	cli
 664:	de bf       	out	0x3e, r29	; 62
 666:	0f be       	out	0x3f, r0	; 63
 668:	cd bf       	out	0x3d, r28	; 61
 66a:	89 87       	std	Y+9, r24	; 0x09
 66c:	6a 87       	std	Y+10, r22	; 0x0a
   uint32_t u8_frequency_ticks = (((CPU_F / 1000) / 64) / u8_frequency);  
 66e:	8a 85       	ldd	r24, Y+10	; 0x0a
 670:	28 2f       	mov	r18, r24
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	40 e0       	ldi	r20, 0x00	; 0
 676:	50 e0       	ldi	r21, 0x00	; 0
 678:	8a ef       	ldi	r24, 0xFA	; 250
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	a0 e0       	ldi	r26, 0x00	; 0
 67e:	b0 e0       	ldi	r27, 0x00	; 0
 680:	bc 01       	movw	r22, r24
 682:	cd 01       	movw	r24, r26
 684:	0e 94 2b 04 	call	0x856	; 0x856 <__divmodsi4>
 688:	da 01       	movw	r26, r20
 68a:	c9 01       	movw	r24, r18
 68c:	89 83       	std	Y+1, r24	; 0x01
 68e:	9a 83       	std	Y+2, r25	; 0x02
 690:	ab 83       	std	Y+3, r26	; 0x03
 692:	bc 83       	std	Y+4, r27	; 0x04
   uint32_t u16_duty_ticks = ((100-u8_dutyCycle) * (uint8_t)u8_frequency_ticks) / 100;
 694:	89 85       	ldd	r24, Y+9	; 0x09
 696:	88 2f       	mov	r24, r24
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	24 e6       	ldi	r18, 0x64	; 100
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	28 1b       	sub	r18, r24
 6a0:	39 0b       	sbc	r19, r25
 6a2:	89 81       	ldd	r24, Y+1	; 0x01
 6a4:	88 2f       	mov	r24, r24
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	28 9f       	mul	r18, r24
 6aa:	a0 01       	movw	r20, r0
 6ac:	29 9f       	mul	r18, r25
 6ae:	50 0d       	add	r21, r0
 6b0:	38 9f       	mul	r19, r24
 6b2:	50 0d       	add	r21, r0
 6b4:	11 24       	eor	r1, r1
 6b6:	24 e6       	ldi	r18, 0x64	; 100
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	ca 01       	movw	r24, r20
 6bc:	b9 01       	movw	r22, r18
 6be:	0e 94 17 04 	call	0x82e	; 0x82e <__divmodhi4>
 6c2:	cb 01       	movw	r24, r22
 6c4:	09 2e       	mov	r0, r25
 6c6:	00 0c       	add	r0, r0
 6c8:	aa 0b       	sbc	r26, r26
 6ca:	bb 0b       	sbc	r27, r27
 6cc:	8d 83       	std	Y+5, r24	; 0x05
 6ce:	9e 83       	std	Y+6, r25	; 0x06
 6d0:	af 83       	std	Y+7, r26	; 0x07
 6d2:	b8 87       	std	Y+8, r27	; 0x08
   gu8_preloader = (255-(u8_frequency_ticks-1));
 6d4:	89 81       	ldd	r24, Y+1	; 0x01
 6d6:	81 95       	neg	r24
 6d8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <gu8_preloader>
   /* configure output pins direction and data*/
   gpioPinDirection(GPIOD,(BIT4|BIT5),HIGH);
 6dc:	4f ef       	ldi	r20, 0xFF	; 255
 6de:	60 e3       	ldi	r22, 0x30	; 48
 6e0:	83 e0       	ldi	r24, 0x03	; 3
 6e2:	0e 94 10 01 	call	0x220	; 0x220 <gpioPinDirection>
   gpioPinWrite(GPIOD,(BIT4|BIT5),LOW); 
 6e6:	40 e0       	ldi	r20, 0x00	; 0
 6e8:	60 e3       	ldi	r22, 0x30	; 48
 6ea:	83 e0       	ldi	r24, 0x03	; 3
 6ec:	0e 94 a4 01 	call	0x348	; 0x348 <gpioPinWrite>
   /*enable interrupts*/
   sei();                              /* enable global mask */
 6f0:	78 94       	sei
   TIMSK |= timer0.en_interruptMask;   /*enable T0_INTERRUPT_CMP mask*/           
 6f2:	89 e5       	ldi	r24, 0x59	; 89
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	29 e5       	ldi	r18, 0x59	; 89
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	f9 01       	movw	r30, r18
 6fc:	30 81       	ld	r19, Z
 6fe:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 702:	23 2b       	or	r18, r19
 704:	fc 01       	movw	r30, r24
 706:	20 83       	st	Z, r18
   /* initialize counter */
   timer0Init(T0_NORMAL_MODE,T0_OC0_CLEAR,T0_PRESCALER_1024,gu8_preloader,(gu8_preloader + u16_duty_ticks),(T0_INTERRUPT_CMP|T0_INTERRUPT_NORMAL));
 708:	9d 81       	ldd	r25, Y+5	; 0x05
 70a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <gu8_preloader>
 70e:	98 0f       	add	r25, r24
 710:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <gu8_preloader>
 714:	0f 2e       	mov	r0, r31
 716:	f3 e0       	ldi	r31, 0x03	; 3
 718:	ef 2e       	mov	r14, r31
 71a:	f0 2d       	mov	r31, r0
 71c:	09 2f       	mov	r16, r25
 71e:	28 2f       	mov	r18, r24
 720:	45 e0       	ldi	r20, 0x05	; 5
 722:	60 e2       	ldi	r22, 0x20	; 32
 724:	80 e0       	ldi	r24, 0x00	; 0
 726:	0e 94 d6 02 	call	0x5ac	; 0x5ac <timer0Init>
   
   /*initialize TCNT0*/
   TCNT0 = timer0.u8_initialValue;
 72a:	82 e5       	ldi	r24, 0x52	; 82
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 732:	fc 01       	movw	r30, r24
 734:	20 83       	st	Z, r18
   /*initialize OCR0*/
   OCR0 = timer0.u8_outputCompare;    
 736:	8c e5       	ldi	r24, 0x5C	; 92
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 73e:	fc 01       	movw	r30, r24
 740:	20 83       	st	Z, r18
   /*Initialize OCR0*/  
   //timer0Set(gu8_duty_ticks);         
   /*start the timer*/
   timer0Start();       
 742:	0e 94 03 03 	call	0x606	; 0x606 <timer0Start>
}
 746:	00 00       	nop
 748:	2a 96       	adiw	r28, 0x0a	; 10
 74a:	0f b6       	in	r0, 0x3f	; 63
 74c:	f8 94       	cli
 74e:	de bf       	out	0x3e, r29	; 62
 750:	0f be       	out	0x3f, r0	; 63
 752:	cd bf       	out	0x3d, r28	; 61
 754:	df 91       	pop	r29
 756:	cf 91       	pop	r28
 758:	0f 91       	pop	r16
 75a:	ef 90       	pop	r14
 75c:	08 95       	ret

0000075e <__vector_11>:

/************************************************ Timers ISRs **********************************************************/
/***************  T0 ISRs *************/
ISR_TIMER0_OVF()
{  
 75e:	78 94       	sei
 760:	1f 92       	push	r1
 762:	0f 92       	push	r0
 764:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 768:	0f 92       	push	r0
 76a:	11 24       	eor	r1, r1
 76c:	2f 93       	push	r18
 76e:	3f 93       	push	r19
 770:	4f 93       	push	r20
 772:	5f 93       	push	r21
 774:	6f 93       	push	r22
 776:	7f 93       	push	r23
 778:	8f 93       	push	r24
 77a:	9f 93       	push	r25
 77c:	af 93       	push	r26
 77e:	bf 93       	push	r27
 780:	ef 93       	push	r30
 782:	ff 93       	push	r31
 784:	cf 93       	push	r28
 786:	df 93       	push	r29
 788:	cd b7       	in	r28, 0x3d	; 61
 78a:	de b7       	in	r29, 0x3e	; 62
   /*reset pins*/ 
   gpioPinWrite(GPIOD,(BIT4|BIT5),LOW);
 78c:	40 e0       	ldi	r20, 0x00	; 0
 78e:	60 e3       	ldi	r22, 0x30	; 48
 790:	83 e0       	ldi	r24, 0x03	; 3
 792:	0e 94 a4 01 	call	0x348	; 0x348 <gpioPinWrite>
   /*reload TCNT0*/
   TCNT0 = gu8_preloader;  //debug point  
 796:	82 e5       	ldi	r24, 0x52	; 82
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <gu8_preloader>
 79e:	fc 01       	movw	r30, r24
 7a0:	20 83       	st	Z, r18
}
 7a2:	00 00       	nop
 7a4:	df 91       	pop	r29
 7a6:	cf 91       	pop	r28
 7a8:	ff 91       	pop	r31
 7aa:	ef 91       	pop	r30
 7ac:	bf 91       	pop	r27
 7ae:	af 91       	pop	r26
 7b0:	9f 91       	pop	r25
 7b2:	8f 91       	pop	r24
 7b4:	7f 91       	pop	r23
 7b6:	6f 91       	pop	r22
 7b8:	5f 91       	pop	r21
 7ba:	4f 91       	pop	r20
 7bc:	3f 91       	pop	r19
 7be:	2f 91       	pop	r18
 7c0:	0f 90       	pop	r0
 7c2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 7c6:	0f 90       	pop	r0
 7c8:	1f 90       	pop	r1
 7ca:	18 95       	reti

000007cc <__vector_10>:

ISR_TIMER0_COMP()
{
 7cc:	78 94       	sei
 7ce:	1f 92       	push	r1
 7d0:	0f 92       	push	r0
 7d2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 7d6:	0f 92       	push	r0
 7d8:	11 24       	eor	r1, r1
 7da:	2f 93       	push	r18
 7dc:	3f 93       	push	r19
 7de:	4f 93       	push	r20
 7e0:	5f 93       	push	r21
 7e2:	6f 93       	push	r22
 7e4:	7f 93       	push	r23
 7e6:	8f 93       	push	r24
 7e8:	9f 93       	push	r25
 7ea:	af 93       	push	r26
 7ec:	bf 93       	push	r27
 7ee:	ef 93       	push	r30
 7f0:	ff 93       	push	r31
 7f2:	cf 93       	push	r28
 7f4:	df 93       	push	r29
 7f6:	cd b7       	in	r28, 0x3d	; 61
 7f8:	de b7       	in	r29, 0x3e	; 62
   /*set pins*/
   gpioPinWrite(GPIOD,(BIT4|BIT5),HIGH);      
 7fa:	4f ef       	ldi	r20, 0xFF	; 255
 7fc:	60 e3       	ldi	r22, 0x30	; 48
 7fe:	83 e0       	ldi	r24, 0x03	; 3
 800:	0e 94 a4 01 	call	0x348	; 0x348 <gpioPinWrite>
}
 804:	00 00       	nop
 806:	df 91       	pop	r29
 808:	cf 91       	pop	r28
 80a:	ff 91       	pop	r31
 80c:	ef 91       	pop	r30
 80e:	bf 91       	pop	r27
 810:	af 91       	pop	r26
 812:	9f 91       	pop	r25
 814:	8f 91       	pop	r24
 816:	7f 91       	pop	r23
 818:	6f 91       	pop	r22
 81a:	5f 91       	pop	r21
 81c:	4f 91       	pop	r20
 81e:	3f 91       	pop	r19
 820:	2f 91       	pop	r18
 822:	0f 90       	pop	r0
 824:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 828:	0f 90       	pop	r0
 82a:	1f 90       	pop	r1
 82c:	18 95       	reti

0000082e <__divmodhi4>:
 82e:	97 fb       	bst	r25, 7
 830:	07 2e       	mov	r0, r23
 832:	16 f4       	brtc	.+4      	; 0x838 <__divmodhi4+0xa>
 834:	00 94       	com	r0
 836:	07 d0       	rcall	.+14     	; 0x846 <__divmodhi4_neg1>
 838:	77 fd       	sbrc	r23, 7
 83a:	09 d0       	rcall	.+18     	; 0x84e <__divmodhi4_neg2>
 83c:	0e 94 4a 04 	call	0x894	; 0x894 <__udivmodhi4>
 840:	07 fc       	sbrc	r0, 7
 842:	05 d0       	rcall	.+10     	; 0x84e <__divmodhi4_neg2>
 844:	3e f4       	brtc	.+14     	; 0x854 <__divmodhi4_exit>

00000846 <__divmodhi4_neg1>:
 846:	90 95       	com	r25
 848:	81 95       	neg	r24
 84a:	9f 4f       	sbci	r25, 0xFF	; 255
 84c:	08 95       	ret

0000084e <__divmodhi4_neg2>:
 84e:	70 95       	com	r23
 850:	61 95       	neg	r22
 852:	7f 4f       	sbci	r23, 0xFF	; 255

00000854 <__divmodhi4_exit>:
 854:	08 95       	ret

00000856 <__divmodsi4>:
 856:	05 2e       	mov	r0, r21
 858:	97 fb       	bst	r25, 7
 85a:	1e f4       	brtc	.+6      	; 0x862 <__stack+0x3>
 85c:	00 94       	com	r0
 85e:	0e 94 42 04 	call	0x884	; 0x884 <__negsi2>
 862:	57 fd       	sbrc	r21, 7
 864:	07 d0       	rcall	.+14     	; 0x874 <__divmodsi4_neg2>
 866:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__udivmodsi4>
 86a:	07 fc       	sbrc	r0, 7
 86c:	03 d0       	rcall	.+6      	; 0x874 <__divmodsi4_neg2>
 86e:	4e f4       	brtc	.+18     	; 0x882 <__divmodsi4_exit>
 870:	0c 94 42 04 	jmp	0x884	; 0x884 <__negsi2>

00000874 <__divmodsi4_neg2>:
 874:	50 95       	com	r21
 876:	40 95       	com	r20
 878:	30 95       	com	r19
 87a:	21 95       	neg	r18
 87c:	3f 4f       	sbci	r19, 0xFF	; 255
 87e:	4f 4f       	sbci	r20, 0xFF	; 255
 880:	5f 4f       	sbci	r21, 0xFF	; 255

00000882 <__divmodsi4_exit>:
 882:	08 95       	ret

00000884 <__negsi2>:
 884:	90 95       	com	r25
 886:	80 95       	com	r24
 888:	70 95       	com	r23
 88a:	61 95       	neg	r22
 88c:	7f 4f       	sbci	r23, 0xFF	; 255
 88e:	8f 4f       	sbci	r24, 0xFF	; 255
 890:	9f 4f       	sbci	r25, 0xFF	; 255
 892:	08 95       	ret

00000894 <__udivmodhi4>:
 894:	aa 1b       	sub	r26, r26
 896:	bb 1b       	sub	r27, r27
 898:	51 e1       	ldi	r21, 0x11	; 17
 89a:	07 c0       	rjmp	.+14     	; 0x8aa <__udivmodhi4_ep>

0000089c <__udivmodhi4_loop>:
 89c:	aa 1f       	adc	r26, r26
 89e:	bb 1f       	adc	r27, r27
 8a0:	a6 17       	cp	r26, r22
 8a2:	b7 07       	cpc	r27, r23
 8a4:	10 f0       	brcs	.+4      	; 0x8aa <__udivmodhi4_ep>
 8a6:	a6 1b       	sub	r26, r22
 8a8:	b7 0b       	sbc	r27, r23

000008aa <__udivmodhi4_ep>:
 8aa:	88 1f       	adc	r24, r24
 8ac:	99 1f       	adc	r25, r25
 8ae:	5a 95       	dec	r21
 8b0:	a9 f7       	brne	.-22     	; 0x89c <__udivmodhi4_loop>
 8b2:	80 95       	com	r24
 8b4:	90 95       	com	r25
 8b6:	bc 01       	movw	r22, r24
 8b8:	cd 01       	movw	r24, r26
 8ba:	08 95       	ret

000008bc <__udivmodsi4>:
 8bc:	a1 e2       	ldi	r26, 0x21	; 33
 8be:	1a 2e       	mov	r1, r26
 8c0:	aa 1b       	sub	r26, r26
 8c2:	bb 1b       	sub	r27, r27
 8c4:	fd 01       	movw	r30, r26
 8c6:	0d c0       	rjmp	.+26     	; 0x8e2 <__udivmodsi4_ep>

000008c8 <__udivmodsi4_loop>:
 8c8:	aa 1f       	adc	r26, r26
 8ca:	bb 1f       	adc	r27, r27
 8cc:	ee 1f       	adc	r30, r30
 8ce:	ff 1f       	adc	r31, r31
 8d0:	a2 17       	cp	r26, r18
 8d2:	b3 07       	cpc	r27, r19
 8d4:	e4 07       	cpc	r30, r20
 8d6:	f5 07       	cpc	r31, r21
 8d8:	20 f0       	brcs	.+8      	; 0x8e2 <__udivmodsi4_ep>
 8da:	a2 1b       	sub	r26, r18
 8dc:	b3 0b       	sbc	r27, r19
 8de:	e4 0b       	sbc	r30, r20
 8e0:	f5 0b       	sbc	r31, r21

000008e2 <__udivmodsi4_ep>:
 8e2:	66 1f       	adc	r22, r22
 8e4:	77 1f       	adc	r23, r23
 8e6:	88 1f       	adc	r24, r24
 8e8:	99 1f       	adc	r25, r25
 8ea:	1a 94       	dec	r1
 8ec:	69 f7       	brne	.-38     	; 0x8c8 <__udivmodsi4_loop>
 8ee:	60 95       	com	r22
 8f0:	70 95       	com	r23
 8f2:	80 95       	com	r24
 8f4:	90 95       	com	r25
 8f6:	9b 01       	movw	r18, r22
 8f8:	ac 01       	movw	r20, r24
 8fa:	bd 01       	movw	r22, r26
 8fc:	cf 01       	movw	r24, r30
 8fe:	08 95       	ret

00000900 <_exit>:
 900:	f8 94       	cli

00000902 <__stop_program>:
 902:	ff cf       	rjmp	.-2      	; 0x902 <__stop_program>
