
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c46  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000cba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800060  00800060  00000cba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014db  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000978  00000000  00000000  000023e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010ce  00000000  00000000  00002d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000738  00000000  00000000  00003e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ac7  00000000  00000000  00004564  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ec6  00000000  00000000  0000502b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00005ef1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 6d 05 	jmp	0xada	; 0xada <__vector_5>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__vector_10>
  2c:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 37       	cpi	r26, 0x78	; 120
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <main>
  74:	0c 94 21 06 	jmp	0xc42	; 0xc42 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <gpioPinDirection>:
		break;
		case 3: /* GPIOD */
		PORTD_DIR = u8_direction;
		break;
	}	
}
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	00 d0       	rcall	.+0      	; 0x82 <gpioPinDirection+0x6>
  82:	1f 92       	push	r1
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	89 83       	std	Y+1, r24	; 0x01
  8a:	6a 83       	std	Y+2, r22	; 0x02
  8c:	4b 83       	std	Y+3, r20	; 0x03
  8e:	8b 81       	ldd	r24, Y+3	; 0x03
  90:	88 23       	and	r24, r24
  92:	09 f0       	breq	.+2      	; 0x96 <gpioPinDirection+0x1a>
  94:	42 c0       	rjmp	.+132    	; 0x11a <gpioPinDirection+0x9e>
  96:	8a 81       	ldd	r24, Y+2	; 0x02
  98:	80 95       	com	r24
  9a:	8a 83       	std	Y+2, r24	; 0x02
  9c:	89 81       	ldd	r24, Y+1	; 0x01
  9e:	88 2f       	mov	r24, r24
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	91 05       	cpc	r25, r1
  a6:	b9 f0       	breq	.+46     	; 0xd6 <gpioPinDirection+0x5a>
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	91 05       	cpc	r25, r1
  ac:	1c f4       	brge	.+6      	; 0xb4 <gpioPinDirection+0x38>
  ae:	89 2b       	or	r24, r25
  b0:	39 f0       	breq	.+14     	; 0xc0 <gpioPinDirection+0x44>
  b2:	71 c0       	rjmp	.+226    	; 0x196 <gpioPinDirection+0x11a>
  b4:	82 30       	cpi	r24, 0x02	; 2
  b6:	91 05       	cpc	r25, r1
  b8:	c9 f0       	breq	.+50     	; 0xec <gpioPinDirection+0x70>
  ba:	03 97       	sbiw	r24, 0x03	; 3
  bc:	11 f1       	breq	.+68     	; 0x102 <gpioPinDirection+0x86>
  be:	6b c0       	rjmp	.+214    	; 0x196 <gpioPinDirection+0x11a>
  c0:	8a e3       	ldi	r24, 0x3A	; 58
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	2a e3       	ldi	r18, 0x3A	; 58
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	f9 01       	movw	r30, r18
  ca:	30 81       	ld	r19, Z
  cc:	2a 81       	ldd	r18, Y+2	; 0x02
  ce:	23 23       	and	r18, r19
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
  d4:	60 c0       	rjmp	.+192    	; 0x196 <gpioPinDirection+0x11a>
  d6:	87 e3       	ldi	r24, 0x37	; 55
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	27 e3       	ldi	r18, 0x37	; 55
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	f9 01       	movw	r30, r18
  e0:	30 81       	ld	r19, Z
  e2:	2a 81       	ldd	r18, Y+2	; 0x02
  e4:	23 23       	and	r18, r19
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
  ea:	55 c0       	rjmp	.+170    	; 0x196 <gpioPinDirection+0x11a>
  ec:	84 e3       	ldi	r24, 0x34	; 52
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	24 e3       	ldi	r18, 0x34	; 52
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	f9 01       	movw	r30, r18
  f6:	30 81       	ld	r19, Z
  f8:	2a 81       	ldd	r18, Y+2	; 0x02
  fa:	23 23       	and	r18, r19
  fc:	fc 01       	movw	r30, r24
  fe:	20 83       	st	Z, r18
 100:	4a c0       	rjmp	.+148    	; 0x196 <gpioPinDirection+0x11a>
 102:	81 e3       	ldi	r24, 0x31	; 49
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	21 e3       	ldi	r18, 0x31	; 49
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	f9 01       	movw	r30, r18
 10c:	30 81       	ld	r19, Z
 10e:	2a 81       	ldd	r18, Y+2	; 0x02
 110:	23 23       	and	r18, r19
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
 116:	00 00       	nop
 118:	3e c0       	rjmp	.+124    	; 0x196 <gpioPinDirection+0x11a>
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	88 2f       	mov	r24, r24
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	91 05       	cpc	r25, r1
 124:	b9 f0       	breq	.+46     	; 0x154 <gpioPinDirection+0xd8>
 126:	82 30       	cpi	r24, 0x02	; 2
 128:	91 05       	cpc	r25, r1
 12a:	1c f4       	brge	.+6      	; 0x132 <gpioPinDirection+0xb6>
 12c:	89 2b       	or	r24, r25
 12e:	39 f0       	breq	.+14     	; 0x13e <gpioPinDirection+0xc2>
 130:	32 c0       	rjmp	.+100    	; 0x196 <gpioPinDirection+0x11a>
 132:	82 30       	cpi	r24, 0x02	; 2
 134:	91 05       	cpc	r25, r1
 136:	c9 f0       	breq	.+50     	; 0x16a <gpioPinDirection+0xee>
 138:	03 97       	sbiw	r24, 0x03	; 3
 13a:	11 f1       	breq	.+68     	; 0x180 <gpioPinDirection+0x104>
 13c:	2c c0       	rjmp	.+88     	; 0x196 <gpioPinDirection+0x11a>
 13e:	8a e3       	ldi	r24, 0x3A	; 58
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	2a e3       	ldi	r18, 0x3A	; 58
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	f9 01       	movw	r30, r18
 148:	30 81       	ld	r19, Z
 14a:	2a 81       	ldd	r18, Y+2	; 0x02
 14c:	23 2b       	or	r18, r19
 14e:	fc 01       	movw	r30, r24
 150:	20 83       	st	Z, r18
 152:	21 c0       	rjmp	.+66     	; 0x196 <gpioPinDirection+0x11a>
 154:	87 e3       	ldi	r24, 0x37	; 55
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	27 e3       	ldi	r18, 0x37	; 55
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	f9 01       	movw	r30, r18
 15e:	30 81       	ld	r19, Z
 160:	2a 81       	ldd	r18, Y+2	; 0x02
 162:	23 2b       	or	r18, r19
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18
 168:	16 c0       	rjmp	.+44     	; 0x196 <gpioPinDirection+0x11a>
 16a:	84 e3       	ldi	r24, 0x34	; 52
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	24 e3       	ldi	r18, 0x34	; 52
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	f9 01       	movw	r30, r18
 174:	30 81       	ld	r19, Z
 176:	2a 81       	ldd	r18, Y+2	; 0x02
 178:	23 2b       	or	r18, r19
 17a:	fc 01       	movw	r30, r24
 17c:	20 83       	st	Z, r18
 17e:	0b c0       	rjmp	.+22     	; 0x196 <gpioPinDirection+0x11a>
 180:	81 e3       	ldi	r24, 0x31	; 49
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	21 e3       	ldi	r18, 0x31	; 49
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	f9 01       	movw	r30, r18
 18a:	30 81       	ld	r19, Z
 18c:	2a 81       	ldd	r18, Y+2	; 0x02
 18e:	23 2b       	or	r18, r19
 190:	fc 01       	movw	r30, r24
 192:	20 83       	st	Z, r18
 194:	00 00       	nop
 196:	00 00       	nop
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <gpioPinWrite>:
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	00 d0       	rcall	.+0      	; 0x1aa <gpioPinWrite+0x6>
 1aa:	1f 92       	push	r1
 1ac:	cd b7       	in	r28, 0x3d	; 61
 1ae:	de b7       	in	r29, 0x3e	; 62
 1b0:	89 83       	std	Y+1, r24	; 0x01
 1b2:	6a 83       	std	Y+2, r22	; 0x02
 1b4:	4b 83       	std	Y+3, r20	; 0x03
 1b6:	8b 81       	ldd	r24, Y+3	; 0x03
 1b8:	88 23       	and	r24, r24
 1ba:	09 f0       	breq	.+2      	; 0x1be <gpioPinWrite+0x1a>
 1bc:	42 c0       	rjmp	.+132    	; 0x242 <gpioPinWrite+0x9e>
 1be:	8a 81       	ldd	r24, Y+2	; 0x02
 1c0:	80 95       	com	r24
 1c2:	8a 83       	std	Y+2, r24	; 0x02
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	88 2f       	mov	r24, r24
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	91 05       	cpc	r25, r1
 1ce:	b9 f0       	breq	.+46     	; 0x1fe <gpioPinWrite+0x5a>
 1d0:	82 30       	cpi	r24, 0x02	; 2
 1d2:	91 05       	cpc	r25, r1
 1d4:	1c f4       	brge	.+6      	; 0x1dc <gpioPinWrite+0x38>
 1d6:	89 2b       	or	r24, r25
 1d8:	39 f0       	breq	.+14     	; 0x1e8 <gpioPinWrite+0x44>
 1da:	71 c0       	rjmp	.+226    	; 0x2be <gpioPinWrite+0x11a>
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	91 05       	cpc	r25, r1
 1e0:	c9 f0       	breq	.+50     	; 0x214 <gpioPinWrite+0x70>
 1e2:	03 97       	sbiw	r24, 0x03	; 3
 1e4:	11 f1       	breq	.+68     	; 0x22a <gpioPinWrite+0x86>
 1e6:	6b c0       	rjmp	.+214    	; 0x2be <gpioPinWrite+0x11a>
 1e8:	8b e3       	ldi	r24, 0x3B	; 59
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	2b e3       	ldi	r18, 0x3B	; 59
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	f9 01       	movw	r30, r18
 1f2:	30 81       	ld	r19, Z
 1f4:	2a 81       	ldd	r18, Y+2	; 0x02
 1f6:	23 23       	and	r18, r19
 1f8:	fc 01       	movw	r30, r24
 1fa:	20 83       	st	Z, r18
 1fc:	60 c0       	rjmp	.+192    	; 0x2be <gpioPinWrite+0x11a>
 1fe:	88 e3       	ldi	r24, 0x38	; 56
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	28 e3       	ldi	r18, 0x38	; 56
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	f9 01       	movw	r30, r18
 208:	30 81       	ld	r19, Z
 20a:	2a 81       	ldd	r18, Y+2	; 0x02
 20c:	23 23       	and	r18, r19
 20e:	fc 01       	movw	r30, r24
 210:	20 83       	st	Z, r18
 212:	55 c0       	rjmp	.+170    	; 0x2be <gpioPinWrite+0x11a>
 214:	85 e3       	ldi	r24, 0x35	; 53
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	25 e3       	ldi	r18, 0x35	; 53
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	f9 01       	movw	r30, r18
 21e:	30 81       	ld	r19, Z
 220:	2a 81       	ldd	r18, Y+2	; 0x02
 222:	23 23       	and	r18, r19
 224:	fc 01       	movw	r30, r24
 226:	20 83       	st	Z, r18
 228:	4a c0       	rjmp	.+148    	; 0x2be <gpioPinWrite+0x11a>
 22a:	82 e3       	ldi	r24, 0x32	; 50
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	22 e3       	ldi	r18, 0x32	; 50
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	f9 01       	movw	r30, r18
 234:	30 81       	ld	r19, Z
 236:	2a 81       	ldd	r18, Y+2	; 0x02
 238:	23 23       	and	r18, r19
 23a:	fc 01       	movw	r30, r24
 23c:	20 83       	st	Z, r18
 23e:	00 00       	nop
 240:	3e c0       	rjmp	.+124    	; 0x2be <gpioPinWrite+0x11a>
 242:	89 81       	ldd	r24, Y+1	; 0x01
 244:	88 2f       	mov	r24, r24
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	91 05       	cpc	r25, r1
 24c:	b9 f0       	breq	.+46     	; 0x27c <gpioPinWrite+0xd8>
 24e:	82 30       	cpi	r24, 0x02	; 2
 250:	91 05       	cpc	r25, r1
 252:	1c f4       	brge	.+6      	; 0x25a <gpioPinWrite+0xb6>
 254:	89 2b       	or	r24, r25
 256:	39 f0       	breq	.+14     	; 0x266 <gpioPinWrite+0xc2>
 258:	32 c0       	rjmp	.+100    	; 0x2be <gpioPinWrite+0x11a>
 25a:	82 30       	cpi	r24, 0x02	; 2
 25c:	91 05       	cpc	r25, r1
 25e:	c9 f0       	breq	.+50     	; 0x292 <gpioPinWrite+0xee>
 260:	03 97       	sbiw	r24, 0x03	; 3
 262:	11 f1       	breq	.+68     	; 0x2a8 <gpioPinWrite+0x104>
 264:	2c c0       	rjmp	.+88     	; 0x2be <gpioPinWrite+0x11a>
 266:	8b e3       	ldi	r24, 0x3B	; 59
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	2b e3       	ldi	r18, 0x3B	; 59
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	f9 01       	movw	r30, r18
 270:	30 81       	ld	r19, Z
 272:	2a 81       	ldd	r18, Y+2	; 0x02
 274:	23 2b       	or	r18, r19
 276:	fc 01       	movw	r30, r24
 278:	20 83       	st	Z, r18
 27a:	21 c0       	rjmp	.+66     	; 0x2be <gpioPinWrite+0x11a>
 27c:	88 e3       	ldi	r24, 0x38	; 56
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	28 e3       	ldi	r18, 0x38	; 56
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	f9 01       	movw	r30, r18
 286:	30 81       	ld	r19, Z
 288:	2a 81       	ldd	r18, Y+2	; 0x02
 28a:	23 2b       	or	r18, r19
 28c:	fc 01       	movw	r30, r24
 28e:	20 83       	st	Z, r18
 290:	16 c0       	rjmp	.+44     	; 0x2be <gpioPinWrite+0x11a>
 292:	85 e3       	ldi	r24, 0x35	; 53
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	25 e3       	ldi	r18, 0x35	; 53
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	f9 01       	movw	r30, r18
 29c:	30 81       	ld	r19, Z
 29e:	2a 81       	ldd	r18, Y+2	; 0x02
 2a0:	23 2b       	or	r18, r19
 2a2:	fc 01       	movw	r30, r24
 2a4:	20 83       	st	Z, r18
 2a6:	0b c0       	rjmp	.+22     	; 0x2be <gpioPinWrite+0x11a>
 2a8:	82 e3       	ldi	r24, 0x32	; 50
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	22 e3       	ldi	r18, 0x32	; 50
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	f9 01       	movw	r30, r18
 2b2:	30 81       	ld	r19, Z
 2b4:	2a 81       	ldd	r18, Y+2	; 0x02
 2b6:	23 2b       	or	r18, r19
 2b8:	fc 01       	movw	r30, r24
 2ba:	20 83       	st	Z, r18
 2bc:	00 00       	nop
 2be:	00 00       	nop
 2c0:	0f 90       	pop	r0
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <gpioPortWrite>:
 * @param value: set the port value and takes the following values
 * 				- 0x00 -> Low
 * 				- 0xff -> High
 */
void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	00 d0       	rcall	.+0      	; 0x2d2 <gpioPortWrite+0x6>
 2d2:	cd b7       	in	r28, 0x3d	; 61
 2d4:	de b7       	in	r29, 0x3e	; 62
 2d6:	89 83       	std	Y+1, r24	; 0x01
 2d8:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8_port)
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	88 2f       	mov	r24, r24
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	91 05       	cpc	r25, r1
 2e4:	91 f0       	breq	.+36     	; 0x30a <gpioPortWrite+0x3e>
 2e6:	82 30       	cpi	r24, 0x02	; 2
 2e8:	91 05       	cpc	r25, r1
 2ea:	1c f4       	brge	.+6      	; 0x2f2 <gpioPortWrite+0x26>
 2ec:	89 2b       	or	r24, r25
 2ee:	39 f0       	breq	.+14     	; 0x2fe <gpioPortWrite+0x32>
		case 3: /* GPIOD */
		PORTD_DATA = u8_value;
		break;
	}
	
}
 2f0:	1e c0       	rjmp	.+60     	; 0x32e <gpioPortWrite+0x62>
 * 				- 0x00 -> Low
 * 				- 0xff -> High
 */
void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
	switch(u8_port)
 2f2:	82 30       	cpi	r24, 0x02	; 2
 2f4:	91 05       	cpc	r25, r1
 2f6:	79 f0       	breq	.+30     	; 0x316 <gpioPortWrite+0x4a>
 2f8:	03 97       	sbiw	r24, 0x03	; 3
 2fa:	99 f0       	breq	.+38     	; 0x322 <gpioPortWrite+0x56>
		case 3: /* GPIOD */
		PORTD_DATA = u8_value;
		break;
	}
	
}
 2fc:	18 c0       	rjmp	.+48     	; 0x32e <gpioPortWrite+0x62>
void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
	switch(u8_port)
	{
		case 0: /* GPIOA */
		PORTA_DATA = u8_value;
 2fe:	8b e3       	ldi	r24, 0x3B	; 59
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	2a 81       	ldd	r18, Y+2	; 0x02
 304:	fc 01       	movw	r30, r24
 306:	20 83       	st	Z, r18
		break;
 308:	12 c0       	rjmp	.+36     	; 0x32e <gpioPortWrite+0x62>
		case 1: /* GPIOB */
		PORTB_DATA = u8_value;
 30a:	88 e3       	ldi	r24, 0x38	; 56
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	2a 81       	ldd	r18, Y+2	; 0x02
 310:	fc 01       	movw	r30, r24
 312:	20 83       	st	Z, r18
		break;
 314:	0c c0       	rjmp	.+24     	; 0x32e <gpioPortWrite+0x62>
		case 2: /* GPIOC */
		PORTC_DATA = u8_value;
 316:	85 e3       	ldi	r24, 0x35	; 53
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	2a 81       	ldd	r18, Y+2	; 0x02
 31c:	fc 01       	movw	r30, r24
 31e:	20 83       	st	Z, r18
		break;
 320:	06 c0       	rjmp	.+12     	; 0x32e <gpioPortWrite+0x62>
		case 3: /* GPIOD */
		PORTD_DATA = u8_value;
 322:	82 e3       	ldi	r24, 0x32	; 50
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	2a 81       	ldd	r18, Y+2	; 0x02
 328:	fc 01       	movw	r30, r24
 32a:	20 83       	st	Z, r18
		break;
 32c:	00 00       	nop
	}
	
}
 32e:	00 00       	nop
 330:	0f 90       	pop	r0
 332:	0f 90       	pop	r0
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	08 95       	ret

0000033a <Led_Init>:
 * @param led_id: The led to be initialized and it takes
 * 				  one of the enum (En_LedNumber_t) parameters
 *
 */
void Led_Init(En_LedNumber_t en_led_id)
{
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	1f 92       	push	r1
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	de b7       	in	r29, 0x3e	; 62
 344:	89 83       	std	Y+1, r24	; 0x01
	switch (en_led_id)
 346:	89 81       	ldd	r24, Y+1	; 0x01
 348:	88 2f       	mov	r24, r24
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	81 30       	cpi	r24, 0x01	; 1
 34e:	91 05       	cpc	r25, r1
 350:	91 f0       	breq	.+36     	; 0x376 <Led_Init+0x3c>
 352:	82 30       	cpi	r24, 0x02	; 2
 354:	91 05       	cpc	r25, r1
 356:	1c f4       	brge	.+6      	; 0x35e <Led_Init+0x24>
 358:	89 2b       	or	r24, r25
 35a:	39 f0       	breq	.+14     	; 0x36a <Led_Init+0x30>
		break;
		case LED_3:
		gpioPinDirection(LED_3_GPIO,LED_3_BIT,HIGH);
		break;
	}	
}
 35c:	1e c0       	rjmp	.+60     	; 0x39a <Led_Init+0x60>
 * 				  one of the enum (En_LedNumber_t) parameters
 *
 */
void Led_Init(En_LedNumber_t en_led_id)
{
	switch (en_led_id)
 35e:	82 30       	cpi	r24, 0x02	; 2
 360:	91 05       	cpc	r25, r1
 362:	79 f0       	breq	.+30     	; 0x382 <Led_Init+0x48>
 364:	03 97       	sbiw	r24, 0x03	; 3
 366:	99 f0       	breq	.+38     	; 0x38e <Led_Init+0x54>
		break;
		case LED_3:
		gpioPinDirection(LED_3_GPIO,LED_3_BIT,HIGH);
		break;
	}	
}
 368:	18 c0       	rjmp	.+48     	; 0x39a <Led_Init+0x60>
void Led_Init(En_LedNumber_t en_led_id)
{
	switch (en_led_id)
	{
		case LED_0:
		gpioPinDirection(LED_0_GPIO,LED_0_BIT,HIGH);
 36a:	4f ef       	ldi	r20, 0xFF	; 255
 36c:	60 e1       	ldi	r22, 0x10	; 16
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
		break;
 374:	12 c0       	rjmp	.+36     	; 0x39a <Led_Init+0x60>
		case LED_1:
		gpioPinDirection(LED_1_GPIO,LED_1_BIT,HIGH);
 376:	4f ef       	ldi	r20, 0xFF	; 255
 378:	60 e2       	ldi	r22, 0x20	; 32
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
		break;
 380:	0c c0       	rjmp	.+24     	; 0x39a <Led_Init+0x60>
		case LED_2:
		gpioPinDirection(LED_2_GPIO,LED_2_BIT,HIGH);
 382:	4f ef       	ldi	r20, 0xFF	; 255
 384:	60 e4       	ldi	r22, 0x40	; 64
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
		break;
 38c:	06 c0       	rjmp	.+12     	; 0x39a <Led_Init+0x60>
		case LED_3:
		gpioPinDirection(LED_3_GPIO,LED_3_BIT,HIGH);
 38e:	4f ef       	ldi	r20, 0xFF	; 255
 390:	60 e8       	ldi	r22, 0x80	; 128
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
		break;
 398:	00 00       	nop
	}	
}
 39a:	00 00       	nop
 39c:	0f 90       	pop	r0
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

000003a4 <main>:




int main(void)
{ 
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	cd b7       	in	r28, 0x3d	; 61
 3aa:	de b7       	in	r29, 0x3e	; 62
	/* gpioReq8(); */
	/* gpioReq9(); */
	//test(); 
   /*testPwm();*/
   /*car();*/
   swIcuTest();
 3ac:	0e 94 dd 01 	call	0x3ba	; 0x3ba <swIcuTest>
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	90 e0       	ldi	r25, 0x00	; 0
}
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	08 95       	ret

000003ba <swIcuTest>:

void swIcuTest()
{
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
 3be:	cd b7       	in	r28, 0x3d	; 61
 3c0:	de b7       	in	r29, 0x3e	; 62
   
   /************************************** Intialization *****************************************/
   /*Initialize SWI_CU*/ 
   SwICU_Init(SwICU_EdgeRisiging);  
 3c2:	83 e0       	ldi	r24, 0x03	; 3
 3c4:	0e 94 41 02 	call	0x482	; 0x482 <SwICU_Init>
   /*initialize led*/
   Led_Init(LED_0);
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	0e 94 9d 01 	call	0x33a	; 0x33a <Led_Init>
   Led_Init(LED_1);
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	0e 94 9d 01 	call	0x33a	; 0x33a <Led_Init>
   Led_Init(LED_2);
 3d4:	82 e0       	ldi	r24, 0x02	; 2
 3d6:	0e 94 9d 01 	call	0x33a	; 0x33a <Led_Init>
   Led_Init(LED_3);
 3da:	83 e0       	ldi	r24, 0x03	; 3
 3dc:	0e 94 9d 01 	call	0x33a	; 0x33a <Led_Init>
   /*Initialize triggerPins*/
   gpioPinDirection(ULTRA_EN_GPIO,ULTRA_ENABLE_BIT,OUTPUT); /*triggering pin*/
 3e0:	4f ef       	ldi	r20, 0xFF	; 255
 3e2:	68 e0       	ldi	r22, 0x08	; 8
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
   gpioPinDirection(ULTRA_OUT_GPIO,ULTRA_OUT_BIT,INPUT);
 3ea:	40 e0       	ldi	r20, 0x00	; 0
 3ec:	64 e0       	ldi	r22, 0x04	; 4
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
   /**************************************** Interrupts enable **************************************/
   /*set sei()*/
   sei();
 3f4:	78 94       	sei
   /*Enable INT2*/
   SwICU_Enable();
 3f6:	0e 94 98 02 	call	0x530	; 0x530 <SwICU_Enable>
   /************************************** Start timer and trigger ICU *************************************/
   /*trigger SW_ICU*/
   /*provide a 10-micro seconds pulse*/
   gpioPinWrite(ULTRA_EN_GPIO,ULTRA_ENABLE_BIT,HIGH);
 3fa:	4f ef       	ldi	r20, 0xFF	; 255
 3fc:	68 e0       	ldi	r22, 0x08	; 8
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <gpioPinWrite>
   //_delay_us(50);
   timer0DelayMs(1);   
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 b1 03 	call	0x762	; 0x762 <timer0DelayMs>
   gpioPinWrite(ULTRA_EN_GPIO,ULTRA_ENABLE_BIT,LOW);
 40c:	40 e0       	ldi	r20, 0x00	; 0
 40e:	68 e0       	ldi	r22, 0x08	; 8
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <gpioPinWrite>
   /*Start Input Capture*/
   //SwICU_Start();         
   while (1)
   {           
      if(sw_icu_reset == HIGH)
 416:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <sw_icu_reset>
 41a:	8f 3f       	cpi	r24, 0xFF	; 255
 41c:	e1 f7       	brne	.-8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
      {
         /*calculate distance and turn led on*/
         //uint8_t distance = (68*(*(gu_sw_icu)))/1000;
         //(((68*(*(gu_sw_icu)))/1000)<<4)
         //PORTB
         gpioPortWrite(GPIOB,(68*(*gu_sw_icu)/1000)<<4);
 41e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 422:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 426:	fc 01       	movw	r30, r24
 428:	80 81       	ld	r24, Z
 42a:	88 2f       	mov	r24, r24
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	24 e4       	ldi	r18, 0x44	; 68
 430:	28 9f       	mul	r18, r24
 432:	a0 01       	movw	r20, r0
 434:	29 9f       	mul	r18, r25
 436:	50 0d       	add	r21, r0
 438:	11 24       	eor	r1, r1
 43a:	28 ee       	ldi	r18, 0xE8	; 232
 43c:	33 e0       	ldi	r19, 0x03	; 3
 43e:	ca 01       	movw	r24, r20
 440:	b9 01       	movw	r22, r18
 442:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__divmodhi4>
 446:	cb 01       	movw	r24, r22
 448:	82 95       	swap	r24
 44a:	80 7f       	andi	r24, 0xF0	; 240
 44c:	68 2f       	mov	r22, r24
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	0e 94 66 01 	call	0x2cc	; 0x2cc <gpioPortWrite>
         /*Delay*/
         timer0DelayMs(1000);
 454:	88 ee       	ldi	r24, 0xE8	; 232
 456:	93 e0       	ldi	r25, 0x03	; 3
 458:	0e 94 b1 03 	call	0x762	; 0x762 <timer0DelayMs>
         /*trigger SW_ICU*/
         /*provide a 10-micro seconds pulse*/
         gpioPinWrite(ULTRA_EN_GPIO,ULTRA_ENABLE_BIT,HIGH);
 45c:	4f ef       	ldi	r20, 0xFF	; 255
 45e:	68 e0       	ldi	r22, 0x08	; 8
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <gpioPinWrite>
         timer0DelayMs(1);
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	0e 94 b1 03 	call	0x762	; 0x762 <timer0DelayMs>
         gpioPinWrite(ULTRA_EN_GPIO,ULTRA_ENABLE_BIT,LOW);
 46e:	40 e0       	ldi	r20, 0x00	; 0
 470:	68 e0       	ldi	r22, 0x08	; 8
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <gpioPinWrite>
         /*Start Input Capture again*/
         SwICU_Start();         
 478:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SwICU_Start>
         /*set reset flag to low*/
         sw_icu_reset = LOW;    
 47c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <sw_icu_reset>
      }                  
   }  
 480:	ca cf       	rjmp	.-108    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>

00000482 <SwICU_Init>:
*
* @params : EN_SwICU_Edge_t a_en_inputCaptureEdge
*
*/
void SwICU_Init(EN_SwICU_Edge_t a_en_inputCaptureEdge)
{
 482:	cf 92       	push	r12
 484:	ef 92       	push	r14
 486:	0f 93       	push	r16
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	1f 92       	push	r1
 48e:	cd b7       	in	r28, 0x3d	; 61
 490:	de b7       	in	r29, 0x3e	; 62
 492:	89 83       	std	Y+1, r24	; 0x01
   /*****************************************  Initialize *******************************************/
   /*Initialize Timer*/
   timer2Init(T2_NORMAL_MODE,T2_OC2_CLEAR,T2_PRESCALER_64,0,0,0,T2_INTERRUPT_NORMAL);
 494:	68 94       	set
 496:	cc 24       	eor	r12, r12
 498:	c6 f8       	bld	r12, 6
 49a:	e1 2c       	mov	r14, r1
 49c:	00 e0       	ldi	r16, 0x00	; 0
 49e:	20 e0       	ldi	r18, 0x00	; 0
 4a0:	44 e0       	ldi	r20, 0x04	; 4
 4a2:	60 e2       	ldi	r22, 0x20	; 32
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	0e 94 70 04 	call	0x8e0	; 0x8e0 <timer2Init>
   /*Initialize SW_ICU*/   
   if (a_en_inputCaptureEdge == SwICU_EdgeFalling)
 4aa:	89 81       	ldd	r24, Y+1	; 0x01
 4ac:	82 30       	cpi	r24, 0x02	; 2
 4ae:	51 f4       	brne	.+20     	; 0x4c4 <SwICU_Init+0x42>
   {
      /*Initialize ISCR to (0) to work in the falling edge) */
      MCUCSR &= (~BIT6);     
 4b0:	84 e5       	ldi	r24, 0x54	; 84
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	24 e5       	ldi	r18, 0x54	; 84
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	f9 01       	movw	r30, r18
 4ba:	20 81       	ld	r18, Z
 4bc:	2f 7b       	andi	r18, 0xBF	; 191
 4be:	fc 01       	movw	r30, r24
 4c0:	20 83       	st	Z, r18
   else if(a_en_inputCaptureEdge == SwICU_EdgeRisiging)
   {
      /*Initialize ISCR to (1) to work in the rising edge) */
      MCUCSR |= BIT6;          
   }            
}
 4c2:	0c c0       	rjmp	.+24     	; 0x4dc <SwICU_Init+0x5a>
   if (a_en_inputCaptureEdge == SwICU_EdgeFalling)
   {
      /*Initialize ISCR to (0) to work in the falling edge) */
      MCUCSR &= (~BIT6);     
   }
   else if(a_en_inputCaptureEdge == SwICU_EdgeRisiging)
 4c4:	89 81       	ldd	r24, Y+1	; 0x01
 4c6:	83 30       	cpi	r24, 0x03	; 3
 4c8:	49 f4       	brne	.+18     	; 0x4dc <SwICU_Init+0x5a>
   {
      /*Initialize ISCR to (1) to work in the rising edge) */
      MCUCSR |= BIT6;          
 4ca:	84 e5       	ldi	r24, 0x54	; 84
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	24 e5       	ldi	r18, 0x54	; 84
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	f9 01       	movw	r30, r18
 4d4:	20 81       	ld	r18, Z
 4d6:	20 64       	ori	r18, 0x40	; 64
 4d8:	fc 01       	movw	r30, r24
 4da:	20 83       	st	Z, r18
   }            
}
 4dc:	00 00       	nop
 4de:	0f 90       	pop	r0
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	0f 91       	pop	r16
 4e6:	ef 90       	pop	r14
 4e8:	cf 90       	pop	r12
 4ea:	08 95       	ret

000004ec <SwICU_GetCfgEdge>:
*
* @return : EN_SwICU_Edge_t
*
*/
EN_SwICU_Edge_t SwICU_GetCfgEdge(void)
{   
 4ec:	cf 93       	push	r28
 4ee:	df 93       	push	r29
 4f0:	cd b7       	in	r28, 0x3d	; 61
 4f2:	de b7       	in	r29, 0x3e	; 62
   if (MCUCSR & (BIT6))
 4f4:	84 e5       	ldi	r24, 0x54	; 84
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	fc 01       	movw	r30, r24
 4fa:	80 81       	ld	r24, Z
 4fc:	88 2f       	mov	r24, r24
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	80 74       	andi	r24, 0x40	; 64
 502:	99 27       	eor	r25, r25
 504:	89 2b       	or	r24, r25
 506:	11 f0       	breq	.+4      	; 0x50c <SwICU_GetCfgEdge+0x20>
   {
      return SwICU_EdgeRisiging; /*ISCR is (1) : works in the rising edge*/            
 508:	83 e0       	ldi	r24, 0x03	; 3
 50a:	01 c0       	rjmp	.+2      	; 0x50e <SwICU_GetCfgEdge+0x22>
   }else{
      return SwICU_EdgeFalling;   /*ISCR is (0) : works in the falling edge*/                  
 50c:	82 e0       	ldi	r24, 0x02	; 2
   }    
}
 50e:	df 91       	pop	r29
 510:	cf 91       	pop	r28
 512:	08 95       	ret

00000514 <SwICU_SetCfgEdge>:
*
* @param : EN_SwICU_Edge_t a_en_inputCaptureEdgeedge
*
*/
void SwICU_SetCfgEdge(EN_SwICU_Edge_t a_en_inputCaptureEdgeedge)
{
 514:	cf 93       	push	r28
 516:	df 93       	push	r29
 518:	1f 92       	push	r1
 51a:	cd b7       	in	r28, 0x3d	; 61
 51c:	de b7       	in	r29, 0x3e	; 62
 51e:	89 83       	std	Y+1, r24	; 0x01
   
   /*Disable SwICU*/
   //SwICU_Disable();   
   /*Re-initialize*/
   SwICU_Init(a_en_inputCaptureEdgeedge);   
 520:	89 81       	ldd	r24, Y+1	; 0x01
 522:	0e 94 41 02 	call	0x482	; 0x482 <SwICU_Init>
   /*Enable SwICU*/
   //SwICU_Enable();    
}
 526:	00 00       	nop
 528:	0f 90       	pop	r0
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	08 95       	ret

00000530 <SwICU_Enable>:

void SwICU_Enable(void)
{
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
 534:	cd b7       	in	r28, 0x3d	; 61
 536:	de b7       	in	r29, 0x3e	; 62
   /*Enable INT2*/
   GICR |= (BIT5);
 538:	8b e5       	ldi	r24, 0x5B	; 91
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	2b e5       	ldi	r18, 0x5B	; 91
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	f9 01       	movw	r30, r18
 542:	20 81       	ld	r18, Z
 544:	20 62       	ori	r18, 0x20	; 32
 546:	fc 01       	movw	r30, r24
 548:	20 83       	st	Z, r18
   //GICR |= 0xf0; /* because INT2 works only when one or both of the other 2 interrupts is enabled !!!!!?*/
}
 54a:	00 00       	nop
 54c:	df 91       	pop	r29
 54e:	cf 91       	pop	r28
 550:	08 95       	ret

00000552 <SwICU_Disable>:
void SwICU_Disable(void)
{
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
 556:	cd b7       	in	r28, 0x3d	; 61
 558:	de b7       	in	r29, 0x3e	; 62
   /*Disable INT2*/
   GICR &= ~(BIT5);
 55a:	8b e5       	ldi	r24, 0x5B	; 91
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	2b e5       	ldi	r18, 0x5B	; 91
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	f9 01       	movw	r30, r18
 564:	20 81       	ld	r18, Z
 566:	2f 7d       	andi	r18, 0xDF	; 223
 568:	fc 01       	movw	r30, r24
 56a:	20 83       	st	Z, r18
}
 56c:	00 00       	nop
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	08 95       	ret

00000574 <SwICU_Read>:

void SwICU_Read(volatile uint8_t * a_pu8_capt)
{
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	00 d0       	rcall	.+0      	; 0x57a <SwICU_Read+0x6>
 57a:	cd b7       	in	r28, 0x3d	; 61
 57c:	de b7       	in	r29, 0x3e	; 62
 57e:	9a 83       	std	Y+2, r25	; 0x02
 580:	89 83       	std	Y+1, r24	; 0x01
   /*Read TCNT2*/
   *a_pu8_capt = timer2Read();
 582:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <timer2Read>
 586:	28 2f       	mov	r18, r24
 588:	89 81       	ldd	r24, Y+1	; 0x01
 58a:	9a 81       	ldd	r25, Y+2	; 0x02
 58c:	fc 01       	movw	r30, r24
 58e:	20 83       	st	Z, r18
   /*Reset TCNT2*/
   timer2Set(0);   
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	0e 94 a6 04 	call	0x94c	; 0x94c <timer2Set>
}
 596:	00 00       	nop
 598:	0f 90       	pop	r0
 59a:	0f 90       	pop	r0
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	08 95       	ret

000005a2 <SwICU_Stop>:

void SwICU_Stop(void)
{
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	cd b7       	in	r28, 0x3d	; 61
 5a8:	de b7       	in	r29, 0x3e	; 62
   /*Disable INT2*/
   SwICU_Disable();
 5aa:	0e 94 a9 02 	call	0x552	; 0x552 <SwICU_Disable>
   /*stop timer2 */
   timer2Stop();      
 5ae:	0e 94 f5 04 	call	0x9ea	; 0x9ea <timer2Stop>
}
 5b2:	00 00       	nop
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	08 95       	ret

000005ba <SwICU_Start>:

void SwICU_Start(void)
{  
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
 5be:	cd b7       	in	r28, 0x3d	; 61
 5c0:	de b7       	in	r29, 0x3e	; 62
   /*Enable INT2*/
   //SwICU_Enable();     
   /*Start timer2*/
   timer2Start();
 5c2:	0e 94 df 04 	call	0x9be	; 0x9be <timer2Start>
}
 5c6:	00 00       	nop
 5c8:	df 91       	pop	r29
 5ca:	cf 91       	pop	r28
 5cc:	08 95       	ret

000005ce <__vector_3>:



/**************************** INT2 Control *******************************/
ISR_INT2()
{
 5ce:	78 94       	sei
 5d0:	1f 92       	push	r1
 5d2:	0f 92       	push	r0
 5d4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 5d8:	0f 92       	push	r0
 5da:	11 24       	eor	r1, r1
 5dc:	2f 93       	push	r18
 5de:	3f 93       	push	r19
 5e0:	4f 93       	push	r20
 5e2:	5f 93       	push	r21
 5e4:	6f 93       	push	r22
 5e6:	7f 93       	push	r23
 5e8:	8f 93       	push	r24
 5ea:	9f 93       	push	r25
 5ec:	af 93       	push	r26
 5ee:	bf 93       	push	r27
 5f0:	ef 93       	push	r30
 5f2:	ff 93       	push	r31
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	cd b7       	in	r28, 0x3d	; 61
 5fa:	de b7       	in	r29, 0x3e	; 62
   if(SwICU_GetCfgEdge() == SwICU_EdgeFalling)
 5fc:	0e 94 76 02 	call	0x4ec	; 0x4ec <SwICU_GetCfgEdge>
 600:	82 30       	cpi	r24, 0x02	; 2
 602:	81 f4       	brne	.+32     	; 0x624 <__vector_3+0x56>
   {   
      /* Stop SwICU */
      SwICU_Stop();               
 604:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <SwICU_Stop>
      /* Read SW_ICU*/
      SwICU_Read(gu_sw_icu);      
 608:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 60c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 610:	0e 94 ba 02 	call	0x574	; 0x574 <SwICU_Read>
      /*set configuration edge*/
      SwICU_SetCfgEdge(SwICU_EdgeRisiging);
 614:	83 e0       	ldi	r24, 0x03	; 3
 616:	0e 94 8a 02 	call	0x514	; 0x514 <SwICU_SetCfgEdge>
      /**Debuger**/
      gpioPortWrite(GPIOB,0xf0);
 61a:	60 ef       	ldi	r22, 0xF0	; 240
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	0e 94 66 01 	call	0x2cc	; 0x2cc <gpioPortWrite>
      while(1){}
 622:	ff cf       	rjmp	.-2      	; 0x622 <__vector_3+0x54>
      /****/ 
      /*set reset flag*/
      sw_icu_reset = HIGH;                        
   }
   else if(SwICU_GetCfgEdge() == SwICU_EdgeRisiging)
 624:	0e 94 76 02 	call	0x4ec	; 0x4ec <SwICU_GetCfgEdge>
 628:	83 30       	cpi	r24, 0x03	; 3
 62a:	29 f4       	brne	.+10     	; 0x636 <__vector_3+0x68>
   {
      /* Stop SwICU */
      SwICU_Start();
 62c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SwICU_Start>
      /*set configuration edge*/
      SwICU_SetCfgEdge(SwICU_EdgeFalling);                   
 630:	82 e0       	ldi	r24, 0x02	; 2
 632:	0e 94 8a 02 	call	0x514	; 0x514 <SwICU_SetCfgEdge>
   } 
}
 636:	00 00       	nop
 638:	df 91       	pop	r29
 63a:	cf 91       	pop	r28
 63c:	ff 91       	pop	r31
 63e:	ef 91       	pop	r30
 640:	bf 91       	pop	r27
 642:	af 91       	pop	r26
 644:	9f 91       	pop	r25
 646:	8f 91       	pop	r24
 648:	7f 91       	pop	r23
 64a:	6f 91       	pop	r22
 64c:	5f 91       	pop	r21
 64e:	4f 91       	pop	r20
 650:	3f 91       	pop	r19
 652:	2f 91       	pop	r18
 654:	0f 90       	pop	r0
 656:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 65a:	0f 90       	pop	r0
 65c:	1f 90       	pop	r1
 65e:	18 95       	reti

00000660 <timer0Init>:
       TIMSK &= ~(timer2.en_interruptMask);
       /* clear Global interrupt bit*/
       cli();
       break;
   } 
}
 660:	ef 92       	push	r14
 662:	0f 93       	push	r16
 664:	cf 93       	push	r28
 666:	df 93       	push	r29
 668:	00 d0       	rcall	.+0      	; 0x66a <timer0Init+0xa>
 66a:	00 d0       	rcall	.+0      	; 0x66c <timer0Init+0xc>
 66c:	00 d0       	rcall	.+0      	; 0x66e <timer0Init+0xe>
 66e:	cd b7       	in	r28, 0x3d	; 61
 670:	de b7       	in	r29, 0x3e	; 62
 672:	89 83       	std	Y+1, r24	; 0x01
 674:	6a 83       	std	Y+2, r22	; 0x02
 676:	4b 83       	std	Y+3, r20	; 0x03
 678:	2c 83       	std	Y+4, r18	; 0x04
 67a:	0d 83       	std	Y+5, r16	; 0x05
 67c:	ee 82       	std	Y+6, r14	; 0x06
 67e:	89 81       	ldd	r24, Y+1	; 0x01
 680:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <timer0>
 684:	8a 81       	ldd	r24, Y+2	; 0x02
 686:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <timer0+0x1>
 68a:	8b 81       	ldd	r24, Y+3	; 0x03
 68c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <timer0+0x2>
 690:	8c 81       	ldd	r24, Y+4	; 0x04
 692:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <timer0+0x3>
 696:	8d 81       	ldd	r24, Y+5	; 0x05
 698:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <timer0+0x4>
 69c:	8e 81       	ldd	r24, Y+6	; 0x06
 69e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <timer0+0x6>
 6a2:	00 00       	nop
 6a4:	26 96       	adiw	r28, 0x06	; 6
 6a6:	0f b6       	in	r0, 0x3f	; 63
 6a8:	f8 94       	cli
 6aa:	de bf       	out	0x3e, r29	; 62
 6ac:	0f be       	out	0x3f, r0	; 63
 6ae:	cd bf       	out	0x3d, r28	; 61
 6b0:	df 91       	pop	r29
 6b2:	cf 91       	pop	r28
 6b4:	0f 91       	pop	r16
 6b6:	ef 90       	pop	r14
 6b8:	08 95       	ret

000006ba <timer0Set>:
 6ba:	cf 93       	push	r28
 6bc:	df 93       	push	r29
 6be:	1f 92       	push	r1
 6c0:	cd b7       	in	r28, 0x3d	; 61
 6c2:	de b7       	in	r29, 0x3e	; 62
 6c4:	89 83       	std	Y+1, r24	; 0x01
 6c6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <timer0>
 6ca:	88 2f       	mov	r24, r24
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	00 97       	sbiw	r24, 0x00	; 0
 6d0:	19 f0       	breq	.+6      	; 0x6d8 <timer0Set+0x1e>
 6d2:	08 97       	sbiw	r24, 0x08	; 8
 6d4:	61 f0       	breq	.+24     	; 0x6ee <timer0Set+0x34>
 6d6:	1a c0       	rjmp	.+52     	; 0x70c <timer0Set+0x52>
 6d8:	82 e5       	ldi	r24, 0x52	; 82
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	22 e5       	ldi	r18, 0x52	; 82
 6de:	30 e0       	ldi	r19, 0x00	; 0
 6e0:	f9 01       	movw	r30, r18
 6e2:	30 81       	ld	r19, Z
 6e4:	29 81       	ldd	r18, Y+1	; 0x01
 6e6:	23 2b       	or	r18, r19
 6e8:	fc 01       	movw	r30, r24
 6ea:	20 83       	st	Z, r18
 6ec:	0f c0       	rjmp	.+30     	; 0x70c <timer0Set+0x52>
 6ee:	82 e5       	ldi	r24, 0x52	; 82
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	fc 01       	movw	r30, r24
 6f4:	10 82       	st	Z, r1
 6f6:	8c e5       	ldi	r24, 0x5C	; 92
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	2c e5       	ldi	r18, 0x5C	; 92
 6fc:	30 e0       	ldi	r19, 0x00	; 0
 6fe:	f9 01       	movw	r30, r18
 700:	30 81       	ld	r19, Z
 702:	29 81       	ldd	r18, Y+1	; 0x01
 704:	23 2b       	or	r18, r19
 706:	fc 01       	movw	r30, r24
 708:	20 83       	st	Z, r18
 70a:	00 00       	nop
 70c:	00 00       	nop
 70e:	0f 90       	pop	r0
 710:	df 91       	pop	r29
 712:	cf 91       	pop	r28
 714:	08 95       	ret

00000716 <timer0Start>:
 716:	cf 93       	push	r28
 718:	df 93       	push	r29
 71a:	cd b7       	in	r28, 0x3d	; 61
 71c:	de b7       	in	r29, 0x3e	; 62
 71e:	83 e5       	ldi	r24, 0x53	; 83
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	23 e5       	ldi	r18, 0x53	; 83
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	f9 01       	movw	r30, r18
 728:	30 81       	ld	r19, Z
 72a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <timer0>
 72e:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <timer0+0x2>
 732:	24 2b       	or	r18, r20
 734:	23 2b       	or	r18, r19
 736:	fc 01       	movw	r30, r24
 738:	20 83       	st	Z, r18
 73a:	00 00       	nop
 73c:	df 91       	pop	r29
 73e:	cf 91       	pop	r28
 740:	08 95       	ret

00000742 <timer0Stop>:
 742:	cf 93       	push	r28
 744:	df 93       	push	r29
 746:	cd b7       	in	r28, 0x3d	; 61
 748:	de b7       	in	r29, 0x3e	; 62
 74a:	83 e5       	ldi	r24, 0x53	; 83
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	fc 01       	movw	r30, r24
 750:	80 81       	ld	r24, Z
 752:	83 e5       	ldi	r24, 0x53	; 83
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	fc 01       	movw	r30, r24
 758:	10 82       	st	Z, r1
 75a:	00 00       	nop
 75c:	df 91       	pop	r29
 75e:	cf 91       	pop	r28
 760:	08 95       	ret

00000762 <timer0DelayMs>:
 762:	ef 92       	push	r14
 764:	0f 93       	push	r16
 766:	cf 93       	push	r28
 768:	df 93       	push	r29
 76a:	cd b7       	in	r28, 0x3d	; 61
 76c:	de b7       	in	r29, 0x3e	; 62
 76e:	29 97       	sbiw	r28, 0x09	; 9
 770:	0f b6       	in	r0, 0x3f	; 63
 772:	f8 94       	cli
 774:	de bf       	out	0x3e, r29	; 62
 776:	0f be       	out	0x3f, r0	; 63
 778:	cd bf       	out	0x3d, r28	; 61
 77a:	99 87       	std	Y+9, r25	; 0x09
 77c:	88 87       	std	Y+8, r24	; 0x08
 77e:	1c 82       	std	Y+4, r1	; 0x04
 780:	1d 82       	std	Y+5, r1	; 0x05
 782:	1e 82       	std	Y+6, r1	; 0x06
 784:	1f 82       	std	Y+7, r1	; 0x07
 786:	19 82       	std	Y+1, r1	; 0x01
 788:	1b 82       	std	Y+3, r1	; 0x03
 78a:	1a 82       	std	Y+2, r1	; 0x02
 78c:	e1 2c       	mov	r14, r1
 78e:	00 e0       	ldi	r16, 0x00	; 0
 790:	20 e0       	ldi	r18, 0x00	; 0
 792:	41 e0       	ldi	r20, 0x01	; 1
 794:	60 e2       	ldi	r22, 0x20	; 32
 796:	88 e0       	ldi	r24, 0x08	; 8
 798:	0e 94 30 03 	call	0x660	; 0x660 <timer0Init>
 79c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <timer0+0x2>
 7a0:	48 2f       	mov	r20, r24
 7a2:	50 e0       	ldi	r21, 0x00	; 0
 7a4:	28 ee       	ldi	r18, 0xE8	; 232
 7a6:	33 e0       	ldi	r19, 0x03	; 3
 7a8:	42 9f       	mul	r20, r18
 7aa:	c0 01       	movw	r24, r0
 7ac:	43 9f       	mul	r20, r19
 7ae:	90 0d       	add	r25, r0
 7b0:	52 9f       	mul	r21, r18
 7b2:	90 0d       	add	r25, r0
 7b4:	11 24       	eor	r1, r1
 7b6:	9c 01       	movw	r18, r24
 7b8:	99 0f       	add	r25, r25
 7ba:	44 0b       	sbc	r20, r20
 7bc:	55 0b       	sbc	r21, r21
 7be:	80 e0       	ldi	r24, 0x00	; 0
 7c0:	94 e2       	ldi	r25, 0x24	; 36
 7c2:	a4 ef       	ldi	r26, 0xF4	; 244
 7c4:	b0 e0       	ldi	r27, 0x00	; 0
 7c6:	bc 01       	movw	r22, r24
 7c8:	cd 01       	movw	r24, r26
 7ca:	0e 94 b2 05 	call	0xb64	; 0xb64 <__divmodsi4>
 7ce:	da 01       	movw	r26, r20
 7d0:	c9 01       	movw	r24, r18
 7d2:	9c 01       	movw	r18, r24
 7d4:	ad 01       	movw	r20, r26
 7d6:	88 85       	ldd	r24, Y+8	; 0x08
 7d8:	99 85       	ldd	r25, Y+9	; 0x09
 7da:	cc 01       	movw	r24, r24
 7dc:	a0 e0       	ldi	r26, 0x00	; 0
 7de:	b0 e0       	ldi	r27, 0x00	; 0
 7e0:	bc 01       	movw	r22, r24
 7e2:	cd 01       	movw	r24, r26
 7e4:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__mulsi3>
 7e8:	dc 01       	movw	r26, r24
 7ea:	cb 01       	movw	r24, r22
 7ec:	8c 83       	std	Y+4, r24	; 0x04
 7ee:	9d 83       	std	Y+5, r25	; 0x05
 7f0:	ae 83       	std	Y+6, r26	; 0x06
 7f2:	bf 83       	std	Y+7, r27	; 0x07
 7f4:	8c 81       	ldd	r24, Y+4	; 0x04
 7f6:	9d 81       	ldd	r25, Y+5	; 0x05
 7f8:	ae 81       	ldd	r26, Y+6	; 0x06
 7fa:	bf 81       	ldd	r27, Y+7	; 0x07
 7fc:	89 2f       	mov	r24, r25
 7fe:	9a 2f       	mov	r25, r26
 800:	ab 2f       	mov	r26, r27
 802:	bb 27       	eor	r27, r27
 804:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <gu32_sw_counter>
 808:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <gu32_sw_counter+0x1>
 80c:	a0 93 73 00 	sts	0x0073, r26	; 0x800073 <gu32_sw_counter+0x2>
 810:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <gu32_sw_counter+0x3>
 814:	8c 81       	ldd	r24, Y+4	; 0x04
 816:	9d 81       	ldd	r25, Y+5	; 0x05
 818:	ae 81       	ldd	r26, Y+6	; 0x06
 81a:	bf 81       	ldd	r27, Y+7	; 0x07
 81c:	99 27       	eor	r25, r25
 81e:	aa 27       	eor	r26, r26
 820:	bb 27       	eor	r27, r27
 822:	89 2b       	or	r24, r25
 824:	8a 2b       	or	r24, r26
 826:	8b 2b       	or	r24, r27
 828:	b1 f0       	breq	.+44     	; 0x856 <timer0DelayMs+0xf4>
 82a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <gu32_sw_counter>
 82e:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <gu32_sw_counter+0x1>
 832:	a0 91 73 00 	lds	r26, 0x0073	; 0x800073 <gu32_sw_counter+0x2>
 836:	b0 91 74 00 	lds	r27, 0x0074	; 0x800074 <gu32_sw_counter+0x3>
 83a:	01 96       	adiw	r24, 0x01	; 1
 83c:	a1 1d       	adc	r26, r1
 83e:	b1 1d       	adc	r27, r1
 840:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <gu32_sw_counter>
 844:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <gu32_sw_counter+0x1>
 848:	a0 93 73 00 	sts	0x0073, r26	; 0x800073 <gu32_sw_counter+0x2>
 84c:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <gu32_sw_counter+0x3>
 850:	8c 81       	ldd	r24, Y+4	; 0x04
 852:	89 83       	std	Y+1, r24	; 0x01
 854:	02 c0       	rjmp	.+4      	; 0x85a <timer0DelayMs+0xf8>
 856:	8f ef       	ldi	r24, 0xFF	; 255
 858:	89 83       	std	Y+1, r24	; 0x01
 85a:	89 81       	ldd	r24, Y+1	; 0x01
 85c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <timer0Set>
 860:	0e 94 8b 03 	call	0x716	; 0x716 <timer0Start>
 864:	1d c0       	rjmp	.+58     	; 0x8a0 <__stack+0x41>
 866:	8a 81       	ldd	r24, Y+2	; 0x02
 868:	9b 81       	ldd	r25, Y+3	; 0x03
 86a:	01 96       	adiw	r24, 0x01	; 1
 86c:	9b 83       	std	Y+3, r25	; 0x03
 86e:	8a 83       	std	Y+2, r24	; 0x02
 870:	88 e5       	ldi	r24, 0x58	; 88
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	fc 01       	movw	r30, r24
 876:	80 81       	ld	r24, Z
 878:	88 2f       	mov	r24, r24
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	82 70       	andi	r24, 0x02	; 2
 87e:	99 27       	eor	r25, r25
 880:	89 2b       	or	r24, r25
 882:	b1 f3       	breq	.-20     	; 0x870 <__stack+0x11>
 884:	88 e5       	ldi	r24, 0x58	; 88
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	28 e5       	ldi	r18, 0x58	; 88
 88a:	30 e0       	ldi	r19, 0x00	; 0
 88c:	f9 01       	movw	r30, r18
 88e:	20 81       	ld	r18, Z
 890:	22 60       	ori	r18, 0x02	; 2
 892:	fc 01       	movw	r30, r24
 894:	20 83       	st	Z, r18
 896:	8c e5       	ldi	r24, 0x5C	; 92
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	2f ef       	ldi	r18, 0xFF	; 255
 89c:	fc 01       	movw	r30, r24
 89e:	20 83       	st	Z, r18
 8a0:	8a 81       	ldd	r24, Y+2	; 0x02
 8a2:	9b 81       	ldd	r25, Y+3	; 0x03
 8a4:	9c 01       	movw	r18, r24
 8a6:	40 e0       	ldi	r20, 0x00	; 0
 8a8:	50 e0       	ldi	r21, 0x00	; 0
 8aa:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <gu32_sw_counter>
 8ae:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <gu32_sw_counter+0x1>
 8b2:	a0 91 73 00 	lds	r26, 0x0073	; 0x800073 <gu32_sw_counter+0x2>
 8b6:	b0 91 74 00 	lds	r27, 0x0074	; 0x800074 <gu32_sw_counter+0x3>
 8ba:	28 17       	cp	r18, r24
 8bc:	39 07       	cpc	r19, r25
 8be:	4a 07       	cpc	r20, r26
 8c0:	5b 07       	cpc	r21, r27
 8c2:	88 f2       	brcs	.-94     	; 0x866 <__stack+0x7>
 8c4:	0e 94 a1 03 	call	0x742	; 0x742 <timer0Stop>
 8c8:	00 00       	nop
 8ca:	29 96       	adiw	r28, 0x09	; 9
 8cc:	0f b6       	in	r0, 0x3f	; 63
 8ce:	f8 94       	cli
 8d0:	de bf       	out	0x3e, r29	; 62
 8d2:	0f be       	out	0x3f, r0	; 63
 8d4:	cd bf       	out	0x3d, r28	; 61
 8d6:	df 91       	pop	r29
 8d8:	cf 91       	pop	r28
 8da:	0f 91       	pop	r16
 8dc:	ef 90       	pop	r14
 8de:	08 95       	ret

000008e0 <timer2Init>:
 8e0:	cf 92       	push	r12
 8e2:	ef 92       	push	r14
 8e4:	0f 93       	push	r16
 8e6:	cf 93       	push	r28
 8e8:	df 93       	push	r29
 8ea:	cd b7       	in	r28, 0x3d	; 61
 8ec:	de b7       	in	r29, 0x3e	; 62
 8ee:	27 97       	sbiw	r28, 0x07	; 7
 8f0:	0f b6       	in	r0, 0x3f	; 63
 8f2:	f8 94       	cli
 8f4:	de bf       	out	0x3e, r29	; 62
 8f6:	0f be       	out	0x3f, r0	; 63
 8f8:	cd bf       	out	0x3d, r28	; 61
 8fa:	89 83       	std	Y+1, r24	; 0x01
 8fc:	6a 83       	std	Y+2, r22	; 0x02
 8fe:	4b 83       	std	Y+3, r20	; 0x03
 900:	2c 83       	std	Y+4, r18	; 0x04
 902:	0d 83       	std	Y+5, r16	; 0x05
 904:	ee 82       	std	Y+6, r14	; 0x06
 906:	cf 82       	std	Y+7, r12	; 0x07
 908:	89 81       	ldd	r24, Y+1	; 0x01
 90a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <timer2>
 90e:	8a 81       	ldd	r24, Y+2	; 0x02
 910:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <timer2+0x1>
 914:	8b 81       	ldd	r24, Y+3	; 0x03
 916:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <timer2+0x2>
 91a:	8c 81       	ldd	r24, Y+4	; 0x04
 91c:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <timer2+0x3>
 920:	8d 81       	ldd	r24, Y+5	; 0x05
 922:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <timer2+0x4>
 926:	8e 81       	ldd	r24, Y+6	; 0x06
 928:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <timer2+0x5>
 92c:	8f 81       	ldd	r24, Y+7	; 0x07
 92e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <timer2+0x6>
 932:	00 00       	nop
 934:	27 96       	adiw	r28, 0x07	; 7
 936:	0f b6       	in	r0, 0x3f	; 63
 938:	f8 94       	cli
 93a:	de bf       	out	0x3e, r29	; 62
 93c:	0f be       	out	0x3f, r0	; 63
 93e:	cd bf       	out	0x3d, r28	; 61
 940:	df 91       	pop	r29
 942:	cf 91       	pop	r28
 944:	0f 91       	pop	r16
 946:	ef 90       	pop	r14
 948:	cf 90       	pop	r12
 94a:	08 95       	ret

0000094c <timer2Set>:
 94c:	cf 93       	push	r28
 94e:	df 93       	push	r29
 950:	1f 92       	push	r1
 952:	cd b7       	in	r28, 0x3d	; 61
 954:	de b7       	in	r29, 0x3e	; 62
 956:	89 83       	std	Y+1, r24	; 0x01
 958:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <timer0>
 95c:	88 2f       	mov	r24, r24
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	00 97       	sbiw	r24, 0x00	; 0
 962:	19 f0       	breq	.+6      	; 0x96a <timer2Set+0x1e>
 964:	08 97       	sbiw	r24, 0x08	; 8
 966:	61 f0       	breq	.+24     	; 0x980 <timer2Set+0x34>
 968:	1a c0       	rjmp	.+52     	; 0x99e <timer2Set+0x52>
 96a:	84 e4       	ldi	r24, 0x44	; 68
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	24 e4       	ldi	r18, 0x44	; 68
 970:	30 e0       	ldi	r19, 0x00	; 0
 972:	f9 01       	movw	r30, r18
 974:	30 81       	ld	r19, Z
 976:	29 81       	ldd	r18, Y+1	; 0x01
 978:	23 2b       	or	r18, r19
 97a:	fc 01       	movw	r30, r24
 97c:	20 83       	st	Z, r18
 97e:	0f c0       	rjmp	.+30     	; 0x99e <timer2Set+0x52>
 980:	84 e4       	ldi	r24, 0x44	; 68
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	fc 01       	movw	r30, r24
 986:	10 82       	st	Z, r1
 988:	83 e4       	ldi	r24, 0x43	; 67
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	23 e4       	ldi	r18, 0x43	; 67
 98e:	30 e0       	ldi	r19, 0x00	; 0
 990:	f9 01       	movw	r30, r18
 992:	30 81       	ld	r19, Z
 994:	29 81       	ldd	r18, Y+1	; 0x01
 996:	23 2b       	or	r18, r19
 998:	fc 01       	movw	r30, r24
 99a:	20 83       	st	Z, r18
 99c:	00 00       	nop
 99e:	00 00       	nop
 9a0:	0f 90       	pop	r0
 9a2:	df 91       	pop	r29
 9a4:	cf 91       	pop	r28
 9a6:	08 95       	ret

000009a8 <timer2Read>:
 9a8:	cf 93       	push	r28
 9aa:	df 93       	push	r29
 9ac:	cd b7       	in	r28, 0x3d	; 61
 9ae:	de b7       	in	r29, 0x3e	; 62
 9b0:	84 e4       	ldi	r24, 0x44	; 68
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	fc 01       	movw	r30, r24
 9b6:	80 81       	ld	r24, Z
 9b8:	df 91       	pop	r29
 9ba:	cf 91       	pop	r28
 9bc:	08 95       	ret

000009be <timer2Start>:
 9be:	cf 93       	push	r28
 9c0:	df 93       	push	r29
 9c2:	cd b7       	in	r28, 0x3d	; 61
 9c4:	de b7       	in	r29, 0x3e	; 62
 9c6:	85 e4       	ldi	r24, 0x45	; 69
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	25 e4       	ldi	r18, 0x45	; 69
 9cc:	30 e0       	ldi	r19, 0x00	; 0
 9ce:	f9 01       	movw	r30, r18
 9d0:	30 81       	ld	r19, Z
 9d2:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <timer2>
 9d6:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <timer2+0x2>
 9da:	24 2b       	or	r18, r20
 9dc:	23 2b       	or	r18, r19
 9de:	fc 01       	movw	r30, r24
 9e0:	20 83       	st	Z, r18
 9e2:	00 00       	nop
 9e4:	df 91       	pop	r29
 9e6:	cf 91       	pop	r28
 9e8:	08 95       	ret

000009ea <timer2Stop>:
 9ea:	cf 93       	push	r28
 9ec:	df 93       	push	r29
 9ee:	cd b7       	in	r28, 0x3d	; 61
 9f0:	de b7       	in	r29, 0x3e	; 62
 9f2:	85 e4       	ldi	r24, 0x45	; 69
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	fc 01       	movw	r30, r24
 9f8:	80 81       	ld	r24, Z
 9fa:	85 e4       	ldi	r24, 0x45	; 69
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	fc 01       	movw	r30, r24
 a00:	10 82       	st	Z, r1
 a02:	00 00       	nop
 a04:	df 91       	pop	r29
 a06:	cf 91       	pop	r28
 a08:	08 95       	ret

00000a0a <__vector_11>:

/************************************************ Timers ISRs Control **********************************************************/
ISR_TIMER0_OVF(){
 a0a:	78 94       	sei
 a0c:	1f 92       	push	r1
 a0e:	0f 92       	push	r0
 a10:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 a14:	0f 92       	push	r0
 a16:	11 24       	eor	r1, r1
 a18:	2f 93       	push	r18
 a1a:	3f 93       	push	r19
 a1c:	4f 93       	push	r20
 a1e:	5f 93       	push	r21
 a20:	6f 93       	push	r22
 a22:	7f 93       	push	r23
 a24:	8f 93       	push	r24
 a26:	9f 93       	push	r25
 a28:	af 93       	push	r26
 a2a:	bf 93       	push	r27
 a2c:	ef 93       	push	r30
 a2e:	ff 93       	push	r31
 a30:	cf 93       	push	r28
 a32:	df 93       	push	r29
 a34:	cd b7       	in	r28, 0x3d	; 61
 a36:	de b7       	in	r29, 0x3e	; 62
   /*reset pins*/
   gpioPinWrite(GPIOD,(BIT4|BIT5),LOW);
 a38:	40 e0       	ldi	r20, 0x00	; 0
 a3a:	60 e3       	ldi	r22, 0x30	; 48
 a3c:	83 e0       	ldi	r24, 0x03	; 3
 a3e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <gpioPinWrite>
   /*reload TCNT0*/
   TCNT0 = gu8_preloader;  //debug point
 a42:	82 e5       	ldi	r24, 0x52	; 82
 a44:	90 e0       	ldi	r25, 0x00	; 0
 a46:	20 91 75 00 	lds	r18, 0x0075	; 0x800075 <gu8_preloader>
 a4a:	fc 01       	movw	r30, r24
 a4c:	20 83       	st	Z, r18
}
 a4e:	00 00       	nop
 a50:	df 91       	pop	r29
 a52:	cf 91       	pop	r28
 a54:	ff 91       	pop	r31
 a56:	ef 91       	pop	r30
 a58:	bf 91       	pop	r27
 a5a:	af 91       	pop	r26
 a5c:	9f 91       	pop	r25
 a5e:	8f 91       	pop	r24
 a60:	7f 91       	pop	r23
 a62:	6f 91       	pop	r22
 a64:	5f 91       	pop	r21
 a66:	4f 91       	pop	r20
 a68:	3f 91       	pop	r19
 a6a:	2f 91       	pop	r18
 a6c:	0f 90       	pop	r0
 a6e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 a72:	0f 90       	pop	r0
 a74:	1f 90       	pop	r1
 a76:	18 95       	reti

00000a78 <__vector_10>:

ISR_TIMER0_COMP(){
 a78:	78 94       	sei
 a7a:	1f 92       	push	r1
 a7c:	0f 92       	push	r0
 a7e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 a82:	0f 92       	push	r0
 a84:	11 24       	eor	r1, r1
 a86:	2f 93       	push	r18
 a88:	3f 93       	push	r19
 a8a:	4f 93       	push	r20
 a8c:	5f 93       	push	r21
 a8e:	6f 93       	push	r22
 a90:	7f 93       	push	r23
 a92:	8f 93       	push	r24
 a94:	9f 93       	push	r25
 a96:	af 93       	push	r26
 a98:	bf 93       	push	r27
 a9a:	ef 93       	push	r30
 a9c:	ff 93       	push	r31
 a9e:	cf 93       	push	r28
 aa0:	df 93       	push	r29
 aa2:	cd b7       	in	r28, 0x3d	; 61
 aa4:	de b7       	in	r29, 0x3e	; 62
   /*set pins*/
   gpioPinWrite(GPIOD,(BIT4|BIT5),HIGH);
 aa6:	4f ef       	ldi	r20, 0xFF	; 255
 aa8:	60 e3       	ldi	r22, 0x30	; 48
 aaa:	83 e0       	ldi	r24, 0x03	; 3
 aac:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <gpioPinWrite>
}
 ab0:	00 00       	nop
 ab2:	df 91       	pop	r29
 ab4:	cf 91       	pop	r28
 ab6:	ff 91       	pop	r31
 ab8:	ef 91       	pop	r30
 aba:	bf 91       	pop	r27
 abc:	af 91       	pop	r26
 abe:	9f 91       	pop	r25
 ac0:	8f 91       	pop	r24
 ac2:	7f 91       	pop	r23
 ac4:	6f 91       	pop	r22
 ac6:	5f 91       	pop	r21
 ac8:	4f 91       	pop	r20
 aca:	3f 91       	pop	r19
 acc:	2f 91       	pop	r18
 ace:	0f 90       	pop	r0
 ad0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 ad4:	0f 90       	pop	r0
 ad6:	1f 90       	pop	r1
 ad8:	18 95       	reti

00000ada <__vector_5>:

ISR_TIMER2_OVF(){
 ada:	78 94       	sei
 adc:	1f 92       	push	r1
 ade:	0f 92       	push	r0
 ae0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 ae4:	0f 92       	push	r0
 ae6:	11 24       	eor	r1, r1
 ae8:	8f 93       	push	r24
 aea:	9f 93       	push	r25
 aec:	cf 93       	push	r28
 aee:	df 93       	push	r29
 af0:	cd b7       	in	r28, 0x3d	; 61
 af2:	de b7       	in	r29, 0x3e	; 62
   /* decrement global software counter*/
   gu16_t2_sw_counter-=1;
 af4:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <gu16_t2_sw_counter>
 af8:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <gu16_t2_sw_counter+0x1>
 afc:	01 97       	sbiw	r24, 0x01	; 1
 afe:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <gu16_t2_sw_counter+0x1>
 b02:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <gu16_t2_sw_counter>
}
 b06:	00 00       	nop
 b08:	df 91       	pop	r29
 b0a:	cf 91       	pop	r28
 b0c:	9f 91       	pop	r25
 b0e:	8f 91       	pop	r24
 b10:	0f 90       	pop	r0
 b12:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 b16:	0f 90       	pop	r0
 b18:	1f 90       	pop	r1
 b1a:	18 95       	reti

00000b1c <__mulsi3>:
 b1c:	db 01       	movw	r26, r22
 b1e:	8f 93       	push	r24
 b20:	9f 93       	push	r25
 b22:	0e 94 d1 05 	call	0xba2	; 0xba2 <__muluhisi3>
 b26:	bf 91       	pop	r27
 b28:	af 91       	pop	r26
 b2a:	a2 9f       	mul	r26, r18
 b2c:	80 0d       	add	r24, r0
 b2e:	91 1d       	adc	r25, r1
 b30:	a3 9f       	mul	r26, r19
 b32:	90 0d       	add	r25, r0
 b34:	b2 9f       	mul	r27, r18
 b36:	90 0d       	add	r25, r0
 b38:	11 24       	eor	r1, r1
 b3a:	08 95       	ret

00000b3c <__divmodhi4>:
 b3c:	97 fb       	bst	r25, 7
 b3e:	07 2e       	mov	r0, r23
 b40:	16 f4       	brtc	.+4      	; 0xb46 <__divmodhi4+0xa>
 b42:	00 94       	com	r0
 b44:	07 d0       	rcall	.+14     	; 0xb54 <__divmodhi4_neg1>
 b46:	77 fd       	sbrc	r23, 7
 b48:	09 d0       	rcall	.+18     	; 0xb5c <__divmodhi4_neg2>
 b4a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__udivmodhi4>
 b4e:	07 fc       	sbrc	r0, 7
 b50:	05 d0       	rcall	.+10     	; 0xb5c <__divmodhi4_neg2>
 b52:	3e f4       	brtc	.+14     	; 0xb62 <__divmodhi4_exit>

00000b54 <__divmodhi4_neg1>:
 b54:	90 95       	com	r25
 b56:	81 95       	neg	r24
 b58:	9f 4f       	sbci	r25, 0xFF	; 255
 b5a:	08 95       	ret

00000b5c <__divmodhi4_neg2>:
 b5c:	70 95       	com	r23
 b5e:	61 95       	neg	r22
 b60:	7f 4f       	sbci	r23, 0xFF	; 255

00000b62 <__divmodhi4_exit>:
 b62:	08 95       	ret

00000b64 <__divmodsi4>:
 b64:	05 2e       	mov	r0, r21
 b66:	97 fb       	bst	r25, 7
 b68:	1e f4       	brtc	.+6      	; 0xb70 <__divmodsi4+0xc>
 b6a:	00 94       	com	r0
 b6c:	0e 94 c9 05 	call	0xb92	; 0xb92 <__negsi2>
 b70:	57 fd       	sbrc	r21, 7
 b72:	07 d0       	rcall	.+14     	; 0xb82 <__divmodsi4_neg2>
 b74:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__udivmodsi4>
 b78:	07 fc       	sbrc	r0, 7
 b7a:	03 d0       	rcall	.+6      	; 0xb82 <__divmodsi4_neg2>
 b7c:	4e f4       	brtc	.+18     	; 0xb90 <__divmodsi4_exit>
 b7e:	0c 94 c9 05 	jmp	0xb92	; 0xb92 <__negsi2>

00000b82 <__divmodsi4_neg2>:
 b82:	50 95       	com	r21
 b84:	40 95       	com	r20
 b86:	30 95       	com	r19
 b88:	21 95       	neg	r18
 b8a:	3f 4f       	sbci	r19, 0xFF	; 255
 b8c:	4f 4f       	sbci	r20, 0xFF	; 255
 b8e:	5f 4f       	sbci	r21, 0xFF	; 255

00000b90 <__divmodsi4_exit>:
 b90:	08 95       	ret

00000b92 <__negsi2>:
 b92:	90 95       	com	r25
 b94:	80 95       	com	r24
 b96:	70 95       	com	r23
 b98:	61 95       	neg	r22
 b9a:	7f 4f       	sbci	r23, 0xFF	; 255
 b9c:	8f 4f       	sbci	r24, 0xFF	; 255
 b9e:	9f 4f       	sbci	r25, 0xFF	; 255
 ba0:	08 95       	ret

00000ba2 <__muluhisi3>:
 ba2:	0e 94 12 06 	call	0xc24	; 0xc24 <__umulhisi3>
 ba6:	a5 9f       	mul	r26, r21
 ba8:	90 0d       	add	r25, r0
 baa:	b4 9f       	mul	r27, r20
 bac:	90 0d       	add	r25, r0
 bae:	a4 9f       	mul	r26, r20
 bb0:	80 0d       	add	r24, r0
 bb2:	91 1d       	adc	r25, r1
 bb4:	11 24       	eor	r1, r1
 bb6:	08 95       	ret

00000bb8 <__udivmodhi4>:
 bb8:	aa 1b       	sub	r26, r26
 bba:	bb 1b       	sub	r27, r27
 bbc:	51 e1       	ldi	r21, 0x11	; 17
 bbe:	07 c0       	rjmp	.+14     	; 0xbce <__udivmodhi4_ep>

00000bc0 <__udivmodhi4_loop>:
 bc0:	aa 1f       	adc	r26, r26
 bc2:	bb 1f       	adc	r27, r27
 bc4:	a6 17       	cp	r26, r22
 bc6:	b7 07       	cpc	r27, r23
 bc8:	10 f0       	brcs	.+4      	; 0xbce <__udivmodhi4_ep>
 bca:	a6 1b       	sub	r26, r22
 bcc:	b7 0b       	sbc	r27, r23

00000bce <__udivmodhi4_ep>:
 bce:	88 1f       	adc	r24, r24
 bd0:	99 1f       	adc	r25, r25
 bd2:	5a 95       	dec	r21
 bd4:	a9 f7       	brne	.-22     	; 0xbc0 <__udivmodhi4_loop>
 bd6:	80 95       	com	r24
 bd8:	90 95       	com	r25
 bda:	bc 01       	movw	r22, r24
 bdc:	cd 01       	movw	r24, r26
 bde:	08 95       	ret

00000be0 <__udivmodsi4>:
 be0:	a1 e2       	ldi	r26, 0x21	; 33
 be2:	1a 2e       	mov	r1, r26
 be4:	aa 1b       	sub	r26, r26
 be6:	bb 1b       	sub	r27, r27
 be8:	fd 01       	movw	r30, r26
 bea:	0d c0       	rjmp	.+26     	; 0xc06 <__udivmodsi4_ep>

00000bec <__udivmodsi4_loop>:
 bec:	aa 1f       	adc	r26, r26
 bee:	bb 1f       	adc	r27, r27
 bf0:	ee 1f       	adc	r30, r30
 bf2:	ff 1f       	adc	r31, r31
 bf4:	a2 17       	cp	r26, r18
 bf6:	b3 07       	cpc	r27, r19
 bf8:	e4 07       	cpc	r30, r20
 bfa:	f5 07       	cpc	r31, r21
 bfc:	20 f0       	brcs	.+8      	; 0xc06 <__udivmodsi4_ep>
 bfe:	a2 1b       	sub	r26, r18
 c00:	b3 0b       	sbc	r27, r19
 c02:	e4 0b       	sbc	r30, r20
 c04:	f5 0b       	sbc	r31, r21

00000c06 <__udivmodsi4_ep>:
 c06:	66 1f       	adc	r22, r22
 c08:	77 1f       	adc	r23, r23
 c0a:	88 1f       	adc	r24, r24
 c0c:	99 1f       	adc	r25, r25
 c0e:	1a 94       	dec	r1
 c10:	69 f7       	brne	.-38     	; 0xbec <__udivmodsi4_loop>
 c12:	60 95       	com	r22
 c14:	70 95       	com	r23
 c16:	80 95       	com	r24
 c18:	90 95       	com	r25
 c1a:	9b 01       	movw	r18, r22
 c1c:	ac 01       	movw	r20, r24
 c1e:	bd 01       	movw	r22, r26
 c20:	cf 01       	movw	r24, r30
 c22:	08 95       	ret

00000c24 <__umulhisi3>:
 c24:	a2 9f       	mul	r26, r18
 c26:	b0 01       	movw	r22, r0
 c28:	b3 9f       	mul	r27, r19
 c2a:	c0 01       	movw	r24, r0
 c2c:	a3 9f       	mul	r26, r19
 c2e:	70 0d       	add	r23, r0
 c30:	81 1d       	adc	r24, r1
 c32:	11 24       	eor	r1, r1
 c34:	91 1d       	adc	r25, r1
 c36:	b2 9f       	mul	r27, r18
 c38:	70 0d       	add	r23, r0
 c3a:	81 1d       	adc	r24, r1
 c3c:	11 24       	eor	r1, r1
 c3e:	91 1d       	adc	r25, r1
 c40:	08 95       	ret

00000c42 <_exit>:
 c42:	f8 94       	cli

00000c44 <__stop_program>:
 c44:	ff cf       	rjmp	.-2      	; 0xc44 <__stop_program>
