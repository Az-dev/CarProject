
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001056  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000010ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800060  00800060  000010ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00001138  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000177e  00000000  00000000  00001340  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4b  00000000  00000000  00002abe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000134f  00000000  00000000  00003509  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007dc  00000000  00000000  00004858  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d27  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000104c  00000000  00000000  00005d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00006da7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__vector_3>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 75 07 	jmp	0xeea	; 0xeea <__vector_5>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 44 07 	jmp	0xe88	; 0xe88 <__vector_10>
      2c:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__vector_11>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	20 e0       	ldi	r18, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a9 37       	cpi	r26, 0x79	; 121
      6c:	b2 07       	cpc	r27, r18
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 a3 02 	call	0x546	; 0x546 <main>
      74:	0c 94 29 08 	jmp	0x1052	; 0x1052 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <MotorDC_Init>:
 */
void MotorDC_Speed_PollingWithT0(uint8_t u8_motor_speed)
{
   
   timer0SwPWM(u8_motor_speed,1); // frequency is 250
}
      7c:	cf 93       	push	r28
      7e:	df 93       	push	r29
      80:	1f 92       	push	r1
      82:	cd b7       	in	r28, 0x3d	; 61
      84:	de b7       	in	r29, 0x3e	; 62
      86:	89 83       	std	Y+1, r24	; 0x01
      88:	89 81       	ldd	r24, Y+1	; 0x01
      8a:	88 2f       	mov	r24, r24
      8c:	90 e0       	ldi	r25, 0x00	; 0
      8e:	00 97       	sbiw	r24, 0x00	; 0
      90:	19 f0       	breq	.+6      	; 0x98 <MotorDC_Init+0x1c>
      92:	01 97       	sbiw	r24, 0x01	; 1
      94:	89 f0       	breq	.+34     	; 0xb8 <MotorDC_Init+0x3c>
      96:	20 c0       	rjmp	.+64     	; 0xd8 <MotorDC_Init+0x5c>
      98:	4f ef       	ldi	r20, 0xFF	; 255
      9a:	60 e1       	ldi	r22, 0x10	; 16
      9c:	83 e0       	ldi	r24, 0x03	; 3
      9e:	0e 94 0f 01 	call	0x21e	; 0x21e <gpioPinDirection>
      a2:	4f ef       	ldi	r20, 0xFF	; 255
      a4:	64 e0       	ldi	r22, 0x04	; 4
      a6:	83 e0       	ldi	r24, 0x03	; 3
      a8:	0e 94 0f 01 	call	0x21e	; 0x21e <gpioPinDirection>
      ac:	4f ef       	ldi	r20, 0xFF	; 255
      ae:	68 e0       	ldi	r22, 0x08	; 8
      b0:	83 e0       	ldi	r24, 0x03	; 3
      b2:	0e 94 0f 01 	call	0x21e	; 0x21e <gpioPinDirection>
      b6:	10 c0       	rjmp	.+32     	; 0xd8 <MotorDC_Init+0x5c>
      b8:	4f ef       	ldi	r20, 0xFF	; 255
      ba:	60 e2       	ldi	r22, 0x20	; 32
      bc:	83 e0       	ldi	r24, 0x03	; 3
      be:	0e 94 0f 01 	call	0x21e	; 0x21e <gpioPinDirection>
      c2:	4f ef       	ldi	r20, 0xFF	; 255
      c4:	60 e4       	ldi	r22, 0x40	; 64
      c6:	83 e0       	ldi	r24, 0x03	; 3
      c8:	0e 94 0f 01 	call	0x21e	; 0x21e <gpioPinDirection>
      cc:	4f ef       	ldi	r20, 0xFF	; 255
      ce:	60 e8       	ldi	r22, 0x80	; 128
      d0:	83 e0       	ldi	r24, 0x03	; 3
      d2:	0e 94 0f 01 	call	0x21e	; 0x21e <gpioPinDirection>
      d6:	00 00       	nop
      d8:	00 00       	nop
      da:	0f 90       	pop	r0
      dc:	df 91       	pop	r29
      de:	cf 91       	pop	r28
      e0:	08 95       	ret

000000e2 <MotorDC_Dir>:
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	00 d0       	rcall	.+0      	; 0xe8 <MotorDC_Dir+0x6>
      e8:	cd b7       	in	r28, 0x3d	; 61
      ea:	de b7       	in	r29, 0x3e	; 62
      ec:	89 83       	std	Y+1, r24	; 0x01
      ee:	6a 83       	std	Y+2, r22	; 0x02
      f0:	89 81       	ldd	r24, Y+1	; 0x01
      f2:	88 2f       	mov	r24, r24
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	00 97       	sbiw	r24, 0x00	; 0
      f8:	21 f0       	breq	.+8      	; 0x102 <MotorDC_Dir+0x20>
      fa:	01 97       	sbiw	r24, 0x01	; 1
      fc:	09 f4       	brne	.+2      	; 0x100 <MotorDC_Dir+0x1e>
      fe:	3e c0       	rjmp	.+124    	; 0x17c <MotorDC_Dir+0x9a>
     100:	7a c0       	rjmp	.+244    	; 0x1f6 <MotorDC_Dir+0x114>
     102:	8a 81       	ldd	r24, Y+2	; 0x02
     104:	88 2f       	mov	r24, r24
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	81 30       	cpi	r24, 0x01	; 1
     10a:	91 05       	cpc	r25, r1
     10c:	b1 f0       	breq	.+44     	; 0x13a <MotorDC_Dir+0x58>
     10e:	82 30       	cpi	r24, 0x02	; 2
     110:	91 05       	cpc	r25, r1
     112:	19 f1       	breq	.+70     	; 0x15a <MotorDC_Dir+0x78>
     114:	89 2b       	or	r24, r25
     116:	09 f0       	breq	.+2      	; 0x11a <MotorDC_Dir+0x38>
     118:	6e c0       	rjmp	.+220    	; 0x1f6 <MotorDC_Dir+0x114>
     11a:	40 e0       	ldi	r20, 0x00	; 0
     11c:	60 e1       	ldi	r22, 0x10	; 16
     11e:	83 e0       	ldi	r24, 0x03	; 3
     120:	0e 94 a3 01 	call	0x346	; 0x346 <gpioPinWrite>
     124:	40 e0       	ldi	r20, 0x00	; 0
     126:	64 e0       	ldi	r22, 0x04	; 4
     128:	83 e0       	ldi	r24, 0x03	; 3
     12a:	0e 94 a3 01 	call	0x346	; 0x346 <gpioPinWrite>
     12e:	40 e0       	ldi	r20, 0x00	; 0
     130:	68 e0       	ldi	r22, 0x08	; 8
     132:	83 e0       	ldi	r24, 0x03	; 3
     134:	0e 94 a3 01 	call	0x346	; 0x346 <gpioPinWrite>
     138:	20 c0       	rjmp	.+64     	; 0x17a <MotorDC_Dir+0x98>
     13a:	4f ef       	ldi	r20, 0xFF	; 255
     13c:	60 e1       	ldi	r22, 0x10	; 16
     13e:	83 e0       	ldi	r24, 0x03	; 3
     140:	0e 94 a3 01 	call	0x346	; 0x346 <gpioPinWrite>
     144:	40 e0       	ldi	r20, 0x00	; 0
     146:	64 e0       	ldi	r22, 0x04	; 4
     148:	83 e0       	ldi	r24, 0x03	; 3
     14a:	0e 94 a3 01 	call	0x346	; 0x346 <gpioPinWrite>
     14e:	4f ef       	ldi	r20, 0xFF	; 255
     150:	68 e0       	ldi	r22, 0x08	; 8
     152:	83 e0       	ldi	r24, 0x03	; 3
     154:	0e 94 a3 01 	call	0x346	; 0x346 <gpioPinWrite>
     158:	10 c0       	rjmp	.+32     	; 0x17a <MotorDC_Dir+0x98>
     15a:	4f ef       	ldi	r20, 0xFF	; 255
     15c:	60 e1       	ldi	r22, 0x10	; 16
     15e:	83 e0       	ldi	r24, 0x03	; 3
     160:	0e 94 a3 01 	call	0x346	; 0x346 <gpioPinWrite>
     164:	4f ef       	ldi	r20, 0xFF	; 255
     166:	64 e0       	ldi	r22, 0x04	; 4
     168:	83 e0       	ldi	r24, 0x03	; 3
     16a:	0e 94 a3 01 	call	0x346	; 0x346 <gpioPinWrite>
     16e:	40 e0       	ldi	r20, 0x00	; 0
     170:	68 e0       	ldi	r22, 0x08	; 8
     172:	83 e0       	ldi	r24, 0x03	; 3
     174:	0e 94 a3 01 	call	0x346	; 0x346 <gpioPinWrite>
     178:	00 00       	nop
     17a:	3d c0       	rjmp	.+122    	; 0x1f6 <MotorDC_Dir+0x114>
     17c:	8a 81       	ldd	r24, Y+2	; 0x02
     17e:	88 2f       	mov	r24, r24
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	81 30       	cpi	r24, 0x01	; 1
     184:	91 05       	cpc	r25, r1
     186:	b1 f0       	breq	.+44     	; 0x1b4 <MotorDC_Dir+0xd2>
     188:	82 30       	cpi	r24, 0x02	; 2
     18a:	91 05       	cpc	r25, r1
     18c:	19 f1       	breq	.+70     	; 0x1d4 <MotorDC_Dir+0xf2>
     18e:	89 2b       	or	r24, r25
     190:	09 f0       	breq	.+2      	; 0x194 <MotorDC_Dir+0xb2>
     192:	30 c0       	rjmp	.+96     	; 0x1f4 <MotorDC_Dir+0x112>
     194:	40 e0       	ldi	r20, 0x00	; 0
     196:	60 e2       	ldi	r22, 0x20	; 32
     198:	83 e0       	ldi	r24, 0x03	; 3
     19a:	0e 94 a3 01 	call	0x346	; 0x346 <gpioPinWrite>
     19e:	40 e0       	ldi	r20, 0x00	; 0
     1a0:	60 e4       	ldi	r22, 0x40	; 64
     1a2:	83 e0       	ldi	r24, 0x03	; 3
     1a4:	0e 94 a3 01 	call	0x346	; 0x346 <gpioPinWrite>
     1a8:	40 e0       	ldi	r20, 0x00	; 0
     1aa:	60 e8       	ldi	r22, 0x80	; 128
     1ac:	83 e0       	ldi	r24, 0x03	; 3
     1ae:	0e 94 a3 01 	call	0x346	; 0x346 <gpioPinWrite>
     1b2:	20 c0       	rjmp	.+64     	; 0x1f4 <MotorDC_Dir+0x112>
     1b4:	4f ef       	ldi	r20, 0xFF	; 255
     1b6:	60 e2       	ldi	r22, 0x20	; 32
     1b8:	83 e0       	ldi	r24, 0x03	; 3
     1ba:	0e 94 a3 01 	call	0x346	; 0x346 <gpioPinWrite>
     1be:	40 e0       	ldi	r20, 0x00	; 0
     1c0:	60 e4       	ldi	r22, 0x40	; 64
     1c2:	83 e0       	ldi	r24, 0x03	; 3
     1c4:	0e 94 a3 01 	call	0x346	; 0x346 <gpioPinWrite>
     1c8:	4f ef       	ldi	r20, 0xFF	; 255
     1ca:	60 e8       	ldi	r22, 0x80	; 128
     1cc:	83 e0       	ldi	r24, 0x03	; 3
     1ce:	0e 94 a3 01 	call	0x346	; 0x346 <gpioPinWrite>
     1d2:	10 c0       	rjmp	.+32     	; 0x1f4 <MotorDC_Dir+0x112>
     1d4:	4f ef       	ldi	r20, 0xFF	; 255
     1d6:	60 e2       	ldi	r22, 0x20	; 32
     1d8:	83 e0       	ldi	r24, 0x03	; 3
     1da:	0e 94 a3 01 	call	0x346	; 0x346 <gpioPinWrite>
     1de:	4f ef       	ldi	r20, 0xFF	; 255
     1e0:	60 e4       	ldi	r22, 0x40	; 64
     1e2:	83 e0       	ldi	r24, 0x03	; 3
     1e4:	0e 94 a3 01 	call	0x346	; 0x346 <gpioPinWrite>
     1e8:	40 e0       	ldi	r20, 0x00	; 0
     1ea:	60 e8       	ldi	r22, 0x80	; 128
     1ec:	83 e0       	ldi	r24, 0x03	; 3
     1ee:	0e 94 a3 01 	call	0x346	; 0x346 <gpioPinWrite>
     1f2:	00 00       	nop
     1f4:	00 00       	nop
     1f6:	00 00       	nop
     1f8:	0f 90       	pop	r0
     1fa:	0f 90       	pop	r0
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	08 95       	ret

00000202 <MotorDC_Speed_HwPWM>:
/**
 * Description: set the port value (which is PORT register)
 * @param 
 */
void MotorDC_Speed_HwPWM(uint8_t u8_motor_speed)
{
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	1f 92       	push	r1
     208:	cd b7       	in	r28, 0x3d	; 61
     20a:	de b7       	in	r29, 0x3e	; 62
     20c:	89 83       	std	Y+1, r24	; 0x01
   
   timer1HwPWM(u8_motor_speed); // frequency is 250
     20e:	89 81       	ldd	r24, Y+1	; 0x01
     210:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <timer1HwPWM>
     214:	00 00       	nop
     216:	0f 90       	pop	r0
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <gpioPinDirection>:
		break;
		case 3: /* GPIOD */
		PORTD_DIR = u8_direction;
		break;
	}	
}
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	00 d0       	rcall	.+0      	; 0x224 <gpioPinDirection+0x6>
     224:	1f 92       	push	r1
     226:	cd b7       	in	r28, 0x3d	; 61
     228:	de b7       	in	r29, 0x3e	; 62
     22a:	89 83       	std	Y+1, r24	; 0x01
     22c:	6a 83       	std	Y+2, r22	; 0x02
     22e:	4b 83       	std	Y+3, r20	; 0x03
     230:	8b 81       	ldd	r24, Y+3	; 0x03
     232:	88 23       	and	r24, r24
     234:	09 f0       	breq	.+2      	; 0x238 <gpioPinDirection+0x1a>
     236:	42 c0       	rjmp	.+132    	; 0x2bc <gpioPinDirection+0x9e>
     238:	8a 81       	ldd	r24, Y+2	; 0x02
     23a:	80 95       	com	r24
     23c:	8a 83       	std	Y+2, r24	; 0x02
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	88 2f       	mov	r24, r24
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	81 30       	cpi	r24, 0x01	; 1
     246:	91 05       	cpc	r25, r1
     248:	b9 f0       	breq	.+46     	; 0x278 <gpioPinDirection+0x5a>
     24a:	82 30       	cpi	r24, 0x02	; 2
     24c:	91 05       	cpc	r25, r1
     24e:	1c f4       	brge	.+6      	; 0x256 <gpioPinDirection+0x38>
     250:	89 2b       	or	r24, r25
     252:	39 f0       	breq	.+14     	; 0x262 <gpioPinDirection+0x44>
     254:	71 c0       	rjmp	.+226    	; 0x338 <gpioPinDirection+0x11a>
     256:	82 30       	cpi	r24, 0x02	; 2
     258:	91 05       	cpc	r25, r1
     25a:	c9 f0       	breq	.+50     	; 0x28e <gpioPinDirection+0x70>
     25c:	03 97       	sbiw	r24, 0x03	; 3
     25e:	11 f1       	breq	.+68     	; 0x2a4 <gpioPinDirection+0x86>
     260:	6b c0       	rjmp	.+214    	; 0x338 <gpioPinDirection+0x11a>
     262:	8a e3       	ldi	r24, 0x3A	; 58
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	2a e3       	ldi	r18, 0x3A	; 58
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	f9 01       	movw	r30, r18
     26c:	30 81       	ld	r19, Z
     26e:	2a 81       	ldd	r18, Y+2	; 0x02
     270:	23 23       	and	r18, r19
     272:	fc 01       	movw	r30, r24
     274:	20 83       	st	Z, r18
     276:	60 c0       	rjmp	.+192    	; 0x338 <gpioPinDirection+0x11a>
     278:	87 e3       	ldi	r24, 0x37	; 55
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	27 e3       	ldi	r18, 0x37	; 55
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	f9 01       	movw	r30, r18
     282:	30 81       	ld	r19, Z
     284:	2a 81       	ldd	r18, Y+2	; 0x02
     286:	23 23       	and	r18, r19
     288:	fc 01       	movw	r30, r24
     28a:	20 83       	st	Z, r18
     28c:	55 c0       	rjmp	.+170    	; 0x338 <gpioPinDirection+0x11a>
     28e:	84 e3       	ldi	r24, 0x34	; 52
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	24 e3       	ldi	r18, 0x34	; 52
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	f9 01       	movw	r30, r18
     298:	30 81       	ld	r19, Z
     29a:	2a 81       	ldd	r18, Y+2	; 0x02
     29c:	23 23       	and	r18, r19
     29e:	fc 01       	movw	r30, r24
     2a0:	20 83       	st	Z, r18
     2a2:	4a c0       	rjmp	.+148    	; 0x338 <gpioPinDirection+0x11a>
     2a4:	81 e3       	ldi	r24, 0x31	; 49
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	21 e3       	ldi	r18, 0x31	; 49
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	f9 01       	movw	r30, r18
     2ae:	30 81       	ld	r19, Z
     2b0:	2a 81       	ldd	r18, Y+2	; 0x02
     2b2:	23 23       	and	r18, r19
     2b4:	fc 01       	movw	r30, r24
     2b6:	20 83       	st	Z, r18
     2b8:	00 00       	nop
     2ba:	3e c0       	rjmp	.+124    	; 0x338 <gpioPinDirection+0x11a>
     2bc:	89 81       	ldd	r24, Y+1	; 0x01
     2be:	88 2f       	mov	r24, r24
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	81 30       	cpi	r24, 0x01	; 1
     2c4:	91 05       	cpc	r25, r1
     2c6:	b9 f0       	breq	.+46     	; 0x2f6 <gpioPinDirection+0xd8>
     2c8:	82 30       	cpi	r24, 0x02	; 2
     2ca:	91 05       	cpc	r25, r1
     2cc:	1c f4       	brge	.+6      	; 0x2d4 <gpioPinDirection+0xb6>
     2ce:	89 2b       	or	r24, r25
     2d0:	39 f0       	breq	.+14     	; 0x2e0 <gpioPinDirection+0xc2>
     2d2:	32 c0       	rjmp	.+100    	; 0x338 <gpioPinDirection+0x11a>
     2d4:	82 30       	cpi	r24, 0x02	; 2
     2d6:	91 05       	cpc	r25, r1
     2d8:	c9 f0       	breq	.+50     	; 0x30c <gpioPinDirection+0xee>
     2da:	03 97       	sbiw	r24, 0x03	; 3
     2dc:	11 f1       	breq	.+68     	; 0x322 <gpioPinDirection+0x104>
     2de:	2c c0       	rjmp	.+88     	; 0x338 <gpioPinDirection+0x11a>
     2e0:	8a e3       	ldi	r24, 0x3A	; 58
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	2a e3       	ldi	r18, 0x3A	; 58
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	f9 01       	movw	r30, r18
     2ea:	30 81       	ld	r19, Z
     2ec:	2a 81       	ldd	r18, Y+2	; 0x02
     2ee:	23 2b       	or	r18, r19
     2f0:	fc 01       	movw	r30, r24
     2f2:	20 83       	st	Z, r18
     2f4:	21 c0       	rjmp	.+66     	; 0x338 <gpioPinDirection+0x11a>
     2f6:	87 e3       	ldi	r24, 0x37	; 55
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	27 e3       	ldi	r18, 0x37	; 55
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	f9 01       	movw	r30, r18
     300:	30 81       	ld	r19, Z
     302:	2a 81       	ldd	r18, Y+2	; 0x02
     304:	23 2b       	or	r18, r19
     306:	fc 01       	movw	r30, r24
     308:	20 83       	st	Z, r18
     30a:	16 c0       	rjmp	.+44     	; 0x338 <gpioPinDirection+0x11a>
     30c:	84 e3       	ldi	r24, 0x34	; 52
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	24 e3       	ldi	r18, 0x34	; 52
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	f9 01       	movw	r30, r18
     316:	30 81       	ld	r19, Z
     318:	2a 81       	ldd	r18, Y+2	; 0x02
     31a:	23 2b       	or	r18, r19
     31c:	fc 01       	movw	r30, r24
     31e:	20 83       	st	Z, r18
     320:	0b c0       	rjmp	.+22     	; 0x338 <gpioPinDirection+0x11a>
     322:	81 e3       	ldi	r24, 0x31	; 49
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	21 e3       	ldi	r18, 0x31	; 49
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	f9 01       	movw	r30, r18
     32c:	30 81       	ld	r19, Z
     32e:	2a 81       	ldd	r18, Y+2	; 0x02
     330:	23 2b       	or	r18, r19
     332:	fc 01       	movw	r30, r24
     334:	20 83       	st	Z, r18
     336:	00 00       	nop
     338:	00 00       	nop
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	08 95       	ret

00000346 <gpioPinWrite>:
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	00 d0       	rcall	.+0      	; 0x34c <gpioPinWrite+0x6>
     34c:	1f 92       	push	r1
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
     352:	89 83       	std	Y+1, r24	; 0x01
     354:	6a 83       	std	Y+2, r22	; 0x02
     356:	4b 83       	std	Y+3, r20	; 0x03
     358:	8b 81       	ldd	r24, Y+3	; 0x03
     35a:	88 23       	and	r24, r24
     35c:	09 f0       	breq	.+2      	; 0x360 <gpioPinWrite+0x1a>
     35e:	42 c0       	rjmp	.+132    	; 0x3e4 <gpioPinWrite+0x9e>
     360:	8a 81       	ldd	r24, Y+2	; 0x02
     362:	80 95       	com	r24
     364:	8a 83       	std	Y+2, r24	; 0x02
     366:	89 81       	ldd	r24, Y+1	; 0x01
     368:	88 2f       	mov	r24, r24
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	81 30       	cpi	r24, 0x01	; 1
     36e:	91 05       	cpc	r25, r1
     370:	b9 f0       	breq	.+46     	; 0x3a0 <gpioPinWrite+0x5a>
     372:	82 30       	cpi	r24, 0x02	; 2
     374:	91 05       	cpc	r25, r1
     376:	1c f4       	brge	.+6      	; 0x37e <gpioPinWrite+0x38>
     378:	89 2b       	or	r24, r25
     37a:	39 f0       	breq	.+14     	; 0x38a <gpioPinWrite+0x44>
     37c:	71 c0       	rjmp	.+226    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     37e:	82 30       	cpi	r24, 0x02	; 2
     380:	91 05       	cpc	r25, r1
     382:	c9 f0       	breq	.+50     	; 0x3b6 <gpioPinWrite+0x70>
     384:	03 97       	sbiw	r24, 0x03	; 3
     386:	11 f1       	breq	.+68     	; 0x3cc <gpioPinWrite+0x86>
     388:	6b c0       	rjmp	.+214    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     38a:	8b e3       	ldi	r24, 0x3B	; 59
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	2b e3       	ldi	r18, 0x3B	; 59
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	f9 01       	movw	r30, r18
     394:	30 81       	ld	r19, Z
     396:	2a 81       	ldd	r18, Y+2	; 0x02
     398:	23 23       	and	r18, r19
     39a:	fc 01       	movw	r30, r24
     39c:	20 83       	st	Z, r18
     39e:	60 c0       	rjmp	.+192    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     3a0:	88 e3       	ldi	r24, 0x38	; 56
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	28 e3       	ldi	r18, 0x38	; 56
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	f9 01       	movw	r30, r18
     3aa:	30 81       	ld	r19, Z
     3ac:	2a 81       	ldd	r18, Y+2	; 0x02
     3ae:	23 23       	and	r18, r19
     3b0:	fc 01       	movw	r30, r24
     3b2:	20 83       	st	Z, r18
     3b4:	55 c0       	rjmp	.+170    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     3b6:	85 e3       	ldi	r24, 0x35	; 53
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	25 e3       	ldi	r18, 0x35	; 53
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	f9 01       	movw	r30, r18
     3c0:	30 81       	ld	r19, Z
     3c2:	2a 81       	ldd	r18, Y+2	; 0x02
     3c4:	23 23       	and	r18, r19
     3c6:	fc 01       	movw	r30, r24
     3c8:	20 83       	st	Z, r18
     3ca:	4a c0       	rjmp	.+148    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     3cc:	82 e3       	ldi	r24, 0x32	; 50
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	22 e3       	ldi	r18, 0x32	; 50
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	f9 01       	movw	r30, r18
     3d6:	30 81       	ld	r19, Z
     3d8:	2a 81       	ldd	r18, Y+2	; 0x02
     3da:	23 23       	and	r18, r19
     3dc:	fc 01       	movw	r30, r24
     3de:	20 83       	st	Z, r18
     3e0:	00 00       	nop
     3e2:	3e c0       	rjmp	.+124    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
     3e6:	88 2f       	mov	r24, r24
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	81 30       	cpi	r24, 0x01	; 1
     3ec:	91 05       	cpc	r25, r1
     3ee:	b9 f0       	breq	.+46     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     3f0:	82 30       	cpi	r24, 0x02	; 2
     3f2:	91 05       	cpc	r25, r1
     3f4:	1c f4       	brge	.+6      	; 0x3fc <gpioPinWrite+0xb6>
     3f6:	89 2b       	or	r24, r25
     3f8:	39 f0       	breq	.+14     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3fa:	32 c0       	rjmp	.+100    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     3fc:	82 30       	cpi	r24, 0x02	; 2
     3fe:	91 05       	cpc	r25, r1
     400:	c9 f0       	breq	.+50     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     402:	03 97       	sbiw	r24, 0x03	; 3
     404:	11 f1       	breq	.+68     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     406:	2c c0       	rjmp	.+88     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     408:	8b e3       	ldi	r24, 0x3B	; 59
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	2b e3       	ldi	r18, 0x3B	; 59
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	f9 01       	movw	r30, r18
     412:	30 81       	ld	r19, Z
     414:	2a 81       	ldd	r18, Y+2	; 0x02
     416:	23 2b       	or	r18, r19
     418:	fc 01       	movw	r30, r24
     41a:	20 83       	st	Z, r18
     41c:	21 c0       	rjmp	.+66     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     41e:	88 e3       	ldi	r24, 0x38	; 56
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	28 e3       	ldi	r18, 0x38	; 56
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	f9 01       	movw	r30, r18
     428:	30 81       	ld	r19, Z
     42a:	2a 81       	ldd	r18, Y+2	; 0x02
     42c:	23 2b       	or	r18, r19
     42e:	fc 01       	movw	r30, r24
     430:	20 83       	st	Z, r18
     432:	16 c0       	rjmp	.+44     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     434:	85 e3       	ldi	r24, 0x35	; 53
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	25 e3       	ldi	r18, 0x35	; 53
     43a:	30 e0       	ldi	r19, 0x00	; 0
     43c:	f9 01       	movw	r30, r18
     43e:	30 81       	ld	r19, Z
     440:	2a 81       	ldd	r18, Y+2	; 0x02
     442:	23 2b       	or	r18, r19
     444:	fc 01       	movw	r30, r24
     446:	20 83       	st	Z, r18
     448:	0b c0       	rjmp	.+22     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     44a:	82 e3       	ldi	r24, 0x32	; 50
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	22 e3       	ldi	r18, 0x32	; 50
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	f9 01       	movw	r30, r18
     454:	30 81       	ld	r19, Z
     456:	2a 81       	ldd	r18, Y+2	; 0x02
     458:	23 2b       	or	r18, r19
     45a:	fc 01       	movw	r30, r24
     45c:	20 83       	st	Z, r18
     45e:	00 00       	nop
     460:	00 00       	nop
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	08 95       	ret

0000046e <gpioPortWrite>:
 * @param value: set the port value and takes the following values
 * 				- 0x00 -> Low
 * 				- 0xff -> High
 */
void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	00 d0       	rcall	.+0      	; 0x474 <gpioPortWrite+0x6>
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
     478:	89 83       	std	Y+1, r24	; 0x01
     47a:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8_port)
     47c:	89 81       	ldd	r24, Y+1	; 0x01
     47e:	88 2f       	mov	r24, r24
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	81 30       	cpi	r24, 0x01	; 1
     484:	91 05       	cpc	r25, r1
     486:	91 f0       	breq	.+36     	; 0x4ac <gpioPortWrite+0x3e>
     488:	82 30       	cpi	r24, 0x02	; 2
     48a:	91 05       	cpc	r25, r1
     48c:	1c f4       	brge	.+6      	; 0x494 <gpioPortWrite+0x26>
     48e:	89 2b       	or	r24, r25
     490:	39 f0       	breq	.+14     	; 0x4a0 <gpioPortWrite+0x32>
		case 3: /* GPIOD */
		PORTD_DATA = u8_value;
		break;
	}
	
}
     492:	1e c0       	rjmp	.+60     	; 0x4d0 <gpioPortWrite+0x62>
 * 				- 0x00 -> Low
 * 				- 0xff -> High
 */
void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
	switch(u8_port)
     494:	82 30       	cpi	r24, 0x02	; 2
     496:	91 05       	cpc	r25, r1
     498:	79 f0       	breq	.+30     	; 0x4b8 <gpioPortWrite+0x4a>
     49a:	03 97       	sbiw	r24, 0x03	; 3
     49c:	99 f0       	breq	.+38     	; 0x4c4 <gpioPortWrite+0x56>
		case 3: /* GPIOD */
		PORTD_DATA = u8_value;
		break;
	}
	
}
     49e:	18 c0       	rjmp	.+48     	; 0x4d0 <gpioPortWrite+0x62>
void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
	switch(u8_port)
	{
		case 0: /* GPIOA */
		PORTA_DATA = u8_value;
     4a0:	8b e3       	ldi	r24, 0x3B	; 59
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	2a 81       	ldd	r18, Y+2	; 0x02
     4a6:	fc 01       	movw	r30, r24
     4a8:	20 83       	st	Z, r18
		break;
     4aa:	12 c0       	rjmp	.+36     	; 0x4d0 <gpioPortWrite+0x62>
		case 1: /* GPIOB */
		PORTB_DATA = u8_value;
     4ac:	88 e3       	ldi	r24, 0x38	; 56
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	2a 81       	ldd	r18, Y+2	; 0x02
     4b2:	fc 01       	movw	r30, r24
     4b4:	20 83       	st	Z, r18
		break;
     4b6:	0c c0       	rjmp	.+24     	; 0x4d0 <gpioPortWrite+0x62>
		case 2: /* GPIOC */
		PORTC_DATA = u8_value;
     4b8:	85 e3       	ldi	r24, 0x35	; 53
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	2a 81       	ldd	r18, Y+2	; 0x02
     4be:	fc 01       	movw	r30, r24
     4c0:	20 83       	st	Z, r18
		break;
     4c2:	06 c0       	rjmp	.+12     	; 0x4d0 <gpioPortWrite+0x62>
		case 3: /* GPIOD */
		PORTD_DATA = u8_value;
     4c4:	82 e3       	ldi	r24, 0x32	; 50
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	2a 81       	ldd	r18, Y+2	; 0x02
     4ca:	fc 01       	movw	r30, r24
     4cc:	20 83       	st	Z, r18
		break;
     4ce:	00 00       	nop
	}
	
}
     4d0:	00 00       	nop
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	08 95       	ret

000004dc <Led_Init>:
 * @param led_id: The led to be initialized and it takes
 * 				  one of the enum (En_LedNumber_t) parameters
 *
 */
void Led_Init(En_LedNumber_t en_led_id)
{
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	1f 92       	push	r1
     4e2:	cd b7       	in	r28, 0x3d	; 61
     4e4:	de b7       	in	r29, 0x3e	; 62
     4e6:	89 83       	std	Y+1, r24	; 0x01
	switch (en_led_id)
     4e8:	89 81       	ldd	r24, Y+1	; 0x01
     4ea:	88 2f       	mov	r24, r24
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	81 30       	cpi	r24, 0x01	; 1
     4f0:	91 05       	cpc	r25, r1
     4f2:	91 f0       	breq	.+36     	; 0x518 <Led_Init+0x3c>
     4f4:	82 30       	cpi	r24, 0x02	; 2
     4f6:	91 05       	cpc	r25, r1
     4f8:	1c f4       	brge	.+6      	; 0x500 <Led_Init+0x24>
     4fa:	89 2b       	or	r24, r25
     4fc:	39 f0       	breq	.+14     	; 0x50c <Led_Init+0x30>
		break;
		case LED_3:
		gpioPinDirection(LED_3_GPIO,LED_3_BIT,HIGH);
		break;
	}	
}
     4fe:	1e c0       	rjmp	.+60     	; 0x53c <Led_Init+0x60>
 * 				  one of the enum (En_LedNumber_t) parameters
 *
 */
void Led_Init(En_LedNumber_t en_led_id)
{
	switch (en_led_id)
     500:	82 30       	cpi	r24, 0x02	; 2
     502:	91 05       	cpc	r25, r1
     504:	79 f0       	breq	.+30     	; 0x524 <Led_Init+0x48>
     506:	03 97       	sbiw	r24, 0x03	; 3
     508:	99 f0       	breq	.+38     	; 0x530 <Led_Init+0x54>
		break;
		case LED_3:
		gpioPinDirection(LED_3_GPIO,LED_3_BIT,HIGH);
		break;
	}	
}
     50a:	18 c0       	rjmp	.+48     	; 0x53c <Led_Init+0x60>
void Led_Init(En_LedNumber_t en_led_id)
{
	switch (en_led_id)
	{
		case LED_0:
		gpioPinDirection(LED_0_GPIO,LED_0_BIT,HIGH);
     50c:	4f ef       	ldi	r20, 0xFF	; 255
     50e:	60 e1       	ldi	r22, 0x10	; 16
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	0e 94 0f 01 	call	0x21e	; 0x21e <gpioPinDirection>
		break;
     516:	12 c0       	rjmp	.+36     	; 0x53c <Led_Init+0x60>
		case LED_1:
		gpioPinDirection(LED_1_GPIO,LED_1_BIT,HIGH);
     518:	4f ef       	ldi	r20, 0xFF	; 255
     51a:	60 e2       	ldi	r22, 0x20	; 32
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	0e 94 0f 01 	call	0x21e	; 0x21e <gpioPinDirection>
		break;
     522:	0c c0       	rjmp	.+24     	; 0x53c <Led_Init+0x60>
		case LED_2:
		gpioPinDirection(LED_2_GPIO,LED_2_BIT,HIGH);
     524:	4f ef       	ldi	r20, 0xFF	; 255
     526:	60 e4       	ldi	r22, 0x40	; 64
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	0e 94 0f 01 	call	0x21e	; 0x21e <gpioPinDirection>
		break;
     52e:	06 c0       	rjmp	.+12     	; 0x53c <Led_Init+0x60>
		case LED_3:
		gpioPinDirection(LED_3_GPIO,LED_3_BIT,HIGH);
     530:	4f ef       	ldi	r20, 0xFF	; 255
     532:	60 e8       	ldi	r22, 0x80	; 128
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	0e 94 0f 01 	call	0x21e	; 0x21e <gpioPinDirection>
		break;
     53a:	00 00       	nop
	}	
}
     53c:	00 00       	nop
     53e:	0f 90       	pop	r0
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	08 95       	ret

00000546 <main>:
         gu_distance_read = LOW;
         gpioPinWrite(ULTRA_EN_GPIO,ULTRA_ENABLE_BIT,HIGH);         
         timer0DelayMs(1);
         gpioPinWrite(ULTRA_EN_GPIO,ULTRA_ENABLE_BIT,LOW);                     
      }     
   }
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	cd b7       	in	r28, 0x3d	; 61
     54c:	de b7       	in	r29, 0x3e	; 62
     54e:	0e 94 45 03 	call	0x68a	; 0x68a <carObtsacleDetection>
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	08 95       	ret

0000055c <__vector_3>:
   
}

/************ INT2 ISR ***********/
ISR_INT2()
{
     55c:	78 94       	sei
     55e:	1f 92       	push	r1
     560:	0f 92       	push	r0
     562:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     566:	0f 92       	push	r0
     568:	11 24       	eor	r1, r1
     56a:	2f 93       	push	r18
     56c:	3f 93       	push	r19
     56e:	4f 93       	push	r20
     570:	5f 93       	push	r21
     572:	6f 93       	push	r22
     574:	7f 93       	push	r23
     576:	8f 93       	push	r24
     578:	9f 93       	push	r25
     57a:	af 93       	push	r26
     57c:	bf 93       	push	r27
     57e:	ef 93       	push	r30
     580:	ff 93       	push	r31
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	cd b7       	in	r28, 0x3d	; 61
     588:	de b7       	in	r29, 0x3e	; 62
   if(MCUCSR & BIT6)  /* if ISC2 is set --> Rising edge */
     58a:	84 e5       	ldi	r24, 0x54	; 84
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	fc 01       	movw	r30, r24
     590:	80 81       	ld	r24, Z
     592:	88 2f       	mov	r24, r24
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	80 74       	andi	r24, 0x40	; 64
     598:	99 27       	eor	r25, r25
     59a:	89 2b       	or	r24, r25
     59c:	39 f1       	breq	.+78     	; 0x5ec <__vector_3+0x90>
   {
      /*start timer2*/
      timer2Start();
     59e:	0e 94 e7 06 	call	0xdce	; 0xdce <timer2Start>
      /*change edge*/
      /**********/
      /*Disable INT2*/
      GICR &= ~(BIT5);
     5a2:	8b e5       	ldi	r24, 0x5B	; 91
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	2b e5       	ldi	r18, 0x5B	; 91
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	f9 01       	movw	r30, r18
     5ac:	20 81       	ld	r18, Z
     5ae:	2f 7d       	andi	r18, 0xDF	; 223
     5b0:	fc 01       	movw	r30, r24
     5b2:	20 83       	st	Z, r18
      /*Set ISC2 to (0) : that will fire INT2 on falling edge */
      MCUCSR &= (~BIT6);      
     5b4:	84 e5       	ldi	r24, 0x54	; 84
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	24 e5       	ldi	r18, 0x54	; 84
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	f9 01       	movw	r30, r18
     5be:	20 81       	ld	r18, Z
     5c0:	2f 7b       	andi	r18, 0xBF	; 191
     5c2:	fc 01       	movw	r30, r24
     5c4:	20 83       	st	Z, r18
      /*Reset INTF2 flag bit by setting 1*/
      GIFR |= BIT5;
     5c6:	8a e5       	ldi	r24, 0x5A	; 90
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	2a e5       	ldi	r18, 0x5A	; 90
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	f9 01       	movw	r30, r18
     5d0:	20 81       	ld	r18, Z
     5d2:	20 62       	ori	r18, 0x20	; 32
     5d4:	fc 01       	movw	r30, r24
     5d6:	20 83       	st	Z, r18
      /*Enable INT2*/
      GICR |= (BIT5);            
     5d8:	8b e5       	ldi	r24, 0x5B	; 91
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	2b e5       	ldi	r18, 0x5B	; 91
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	f9 01       	movw	r30, r18
     5e2:	20 81       	ld	r18, Z
     5e4:	20 62       	ori	r18, 0x20	; 32
     5e6:	fc 01       	movw	r30, r24
     5e8:	20 83       	st	Z, r18
      GICR |= (BIT5);
      /*set read flag*/
      gu_distance_read = HIGH;
   }    
   
}
     5ea:	3a c0       	rjmp	.+116    	; 0x660 <__vector_3+0x104>
      /*Reset INTF2 flag bit by setting 1*/
      GIFR |= BIT5;
      /*Enable INT2*/
      GICR |= (BIT5);            
   }
   else if(!(MCUCSR & BIT6)) /* if ISC2 is set to (0) --> Falling Edge */ /* assert its value !!!??*/
     5ec:	84 e5       	ldi	r24, 0x54	; 84
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	fc 01       	movw	r30, r24
     5f2:	80 81       	ld	r24, Z
     5f4:	88 2f       	mov	r24, r24
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	80 74       	andi	r24, 0x40	; 64
     5fa:	99 27       	eor	r25, r25
     5fc:	89 2b       	or	r24, r25
     5fe:	81 f5       	brne	.+96     	; 0x660 <__vector_3+0x104>
   {
      /*stop timer counter*/
      timer2Stop();
     600:	0e 94 fd 06 	call	0xdfa	; 0xdfa <timer2Stop>
      /*read TCNT2*/
      gu_sw_icu = timer2Read();
     604:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <timer2Read>
     608:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <gu_sw_icu>
      /*Reset TCNT2*/
      timer2Set(0);
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	0e 94 ae 06 	call	0xd5c	; 0xd5c <timer2Set>
      /*change edge*/
      /**********/
      /*Disable INT2*/
      GICR &= ~(BIT5);
     612:	8b e5       	ldi	r24, 0x5B	; 91
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	2b e5       	ldi	r18, 0x5B	; 91
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	f9 01       	movw	r30, r18
     61c:	20 81       	ld	r18, Z
     61e:	2f 7d       	andi	r18, 0xDF	; 223
     620:	fc 01       	movw	r30, r24
     622:	20 83       	st	Z, r18
      /*Set ISC2 to (1) : that will fire INT2 on rising edge */
      MCUCSR |= (BIT6);      
     624:	84 e5       	ldi	r24, 0x54	; 84
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	24 e5       	ldi	r18, 0x54	; 84
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	f9 01       	movw	r30, r18
     62e:	20 81       	ld	r18, Z
     630:	20 64       	ori	r18, 0x40	; 64
     632:	fc 01       	movw	r30, r24
     634:	20 83       	st	Z, r18
      /*Reset INTF2 flag bit by setting 1*/
      GIFR |= BIT5;
     636:	8a e5       	ldi	r24, 0x5A	; 90
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	2a e5       	ldi	r18, 0x5A	; 90
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	f9 01       	movw	r30, r18
     640:	20 81       	ld	r18, Z
     642:	20 62       	ori	r18, 0x20	; 32
     644:	fc 01       	movw	r30, r24
     646:	20 83       	st	Z, r18
      /*Enable INT2*/
      GICR |= (BIT5);
     648:	8b e5       	ldi	r24, 0x5B	; 91
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	2b e5       	ldi	r18, 0x5B	; 91
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	f9 01       	movw	r30, r18
     652:	20 81       	ld	r18, Z
     654:	20 62       	ori	r18, 0x20	; 32
     656:	fc 01       	movw	r30, r24
     658:	20 83       	st	Z, r18
      /*set read flag*/
      gu_distance_read = HIGH;
     65a:	8f ef       	ldi	r24, 0xFF	; 255
     65c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
   }    
   
}
     660:	00 00       	nop
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	ff 91       	pop	r31
     668:	ef 91       	pop	r30
     66a:	bf 91       	pop	r27
     66c:	af 91       	pop	r26
     66e:	9f 91       	pop	r25
     670:	8f 91       	pop	r24
     672:	7f 91       	pop	r23
     674:	6f 91       	pop	r22
     676:	5f 91       	pop	r21
     678:	4f 91       	pop	r20
     67a:	3f 91       	pop	r19
     67c:	2f 91       	pop	r18
     67e:	0f 90       	pop	r0
     680:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     684:	0f 90       	pop	r0
     686:	1f 90       	pop	r1
     688:	18 95       	reti

0000068a <carObtsacleDetection>:

void carObtsacleDetection()
{
     68a:	cf 92       	push	r12
     68c:	ef 92       	push	r14
     68e:	0f 93       	push	r16
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
   /*------------------------------------------------------ Initialization --------------------------------------------------*/
   /* Initialize Timer2 : Its counts will be used for distance measurement */
   timer2Init(T2_NORMAL_MODE,T2_OC2_CLEAR,T2_PRESCALER_64,0,0,0,T2_INTERRUPT_NORMAL);
     698:	68 94       	set
     69a:	cc 24       	eor	r12, r12
     69c:	c6 f8       	bld	r12, 6
     69e:	e1 2c       	mov	r14, r1
     6a0:	00 e0       	ldi	r16, 0x00	; 0
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	44 e0       	ldi	r20, 0x04	; 4
     6a6:	60 e2       	ldi	r22, 0x20	; 32
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	0e 94 78 06 	call	0xcf0	; 0xcf0 <timer2Init>
   /*Initialize motors*/
   MotorDC_Init(MOT_1);
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	0e 94 3e 00 	call	0x7c	; 0x7c <MotorDC_Init>
   MotorDC_Init(MOT_2);
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	0e 94 3e 00 	call	0x7c	; 0x7c <MotorDC_Init>
   /* Initialize UltraSonicSensor */
   //gpioPinDirection(ULTRA_EN_GPIO,ULTRA_ENABLE_BIT,OUTPUT); /* Triggering pin */
   gpioPinDirection(ULTRA_OUT_GPIO,ULTRA_OUT_BIT,INPUT);    /* Echo pin */
     6ba:	40 e0       	ldi	r20, 0x00	; 0
     6bc:	64 e0       	ldi	r22, 0x04	; 4
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	0e 94 0f 01 	call	0x21e	; 0x21e <gpioPinDirection>
   PORTB_DIR |= BIT3;
     6c4:	87 e3       	ldi	r24, 0x37	; 55
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	27 e3       	ldi	r18, 0x37	; 55
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	f9 01       	movw	r30, r18
     6ce:	20 81       	ld	r18, Z
     6d0:	28 60       	ori	r18, 0x08	; 8
     6d2:	fc 01       	movw	r30, r24
     6d4:	20 83       	st	Z, r18
   /* Initialize LEDs : will be used to as an output for distance measurement value */
   Led_Init(LED_0);
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Led_Init>
   Led_Init(LED_1);
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Led_Init>
   Led_Init(LED_2);
     6e2:	82 e0       	ldi	r24, 0x02	; 2
     6e4:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Led_Init>
   Led_Init(LED_3);
     6e8:	83 e0       	ldi	r24, 0x03	; 3
     6ea:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Led_Init>
   /* Set Global Interrupt */
   sei();
     6ee:	78 94       	sei
   /**********/
   /*Disable INT2*/
   GICR &= ~(BIT5);
     6f0:	8b e5       	ldi	r24, 0x5B	; 91
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	2b e5       	ldi	r18, 0x5B	; 91
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	f9 01       	movw	r30, r18
     6fa:	20 81       	ld	r18, Z
     6fc:	2f 7d       	andi	r18, 0xDF	; 223
     6fe:	fc 01       	movw	r30, r24
     700:	20 83       	st	Z, r18
   /*Set ISC2 to (1) : that will fire INT2 on rising edge */
   MCUCSR |= BIT6;
     702:	84 e5       	ldi	r24, 0x54	; 84
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	24 e5       	ldi	r18, 0x54	; 84
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	f9 01       	movw	r30, r18
     70c:	20 81       	ld	r18, Z
     70e:	20 64       	ori	r18, 0x40	; 64
     710:	fc 01       	movw	r30, r24
     712:	20 83       	st	Z, r18
   /*Reset INTF2 flag bit by setting 1*/
   GIFR |= BIT5;
     714:	8a e5       	ldi	r24, 0x5A	; 90
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	2a e5       	ldi	r18, 0x5A	; 90
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	f9 01       	movw	r30, r18
     71e:	20 81       	ld	r18, Z
     720:	20 62       	ori	r18, 0x20	; 32
     722:	fc 01       	movw	r30, r24
     724:	20 83       	st	Z, r18
   /*Enable INT2*/
   GICR |= (BIT5);
     726:	8b e5       	ldi	r24, 0x5B	; 91
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	2b e5       	ldi	r18, 0x5B	; 91
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	f9 01       	movw	r30, r18
     730:	20 81       	ld	r18, Z
     732:	20 62       	ori	r18, 0x20	; 32
     734:	fc 01       	movw	r30, r24
     736:	20 83       	st	Z, r18
   /*---------------------------------------------------- Trigger the Sensor -----------------------------------------------------*/
   gpioPinWrite(ULTRA_EN_GPIO,ULTRA_ENABLE_BIT,HIGH);
     738:	4f ef       	ldi	r20, 0xFF	; 255
     73a:	68 e0       	ldi	r22, 0x08	; 8
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	0e 94 a3 01 	call	0x346	; 0x346 <gpioPinWrite>
   timer0DelayMs(1);
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	0e 94 b9 05 	call	0xb72	; 0xb72 <timer0DelayMs>
   gpioPinWrite(ULTRA_EN_GPIO,ULTRA_ENABLE_BIT,LOW);
     74a:	40 e0       	ldi	r20, 0x00	; 0
     74c:	68 e0       	ldi	r22, 0x08	; 8
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	0e 94 a3 01 	call	0x346	; 0x346 <gpioPinWrite>
   while(1)
   {
      if(gu_distance_read == HIGH)
     754:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     758:	8f 3f       	cpi	r24, 0xFF	; 255
     75a:	e1 f7       	brne	.-8      	; 0x754 <carObtsacleDetection+0xca>
      {
         gpioPortWrite(GPIOB,((68*gu_sw_icu)/1000)<<4);
     75c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <gu_sw_icu>
     760:	88 2f       	mov	r24, r24
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	24 e4       	ldi	r18, 0x44	; 68
     766:	28 9f       	mul	r18, r24
     768:	a0 01       	movw	r20, r0
     76a:	29 9f       	mul	r18, r25
     76c:	50 0d       	add	r21, r0
     76e:	11 24       	eor	r1, r1
     770:	28 ee       	ldi	r18, 0xE8	; 232
     772:	33 e0       	ldi	r19, 0x03	; 3
     774:	ca 01       	movw	r24, r20
     776:	b9 01       	movw	r22, r18
     778:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__divmodhi4>
     77c:	cb 01       	movw	r24, r22
     77e:	82 95       	swap	r24
     780:	80 7f       	andi	r24, 0xF0	; 240
     782:	68 2f       	mov	r22, r24
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	0e 94 37 02 	call	0x46e	; 0x46e <gpioPortWrite>
         timer0DelayMs(100);
     78a:	84 e6       	ldi	r24, 0x64	; 100
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	0e 94 b9 05 	call	0xb72	; 0xb72 <timer0DelayMs>
         gu_distance_read = LOW;
     792:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
         gpioPinWrite(ULTRA_EN_GPIO,ULTRA_ENABLE_BIT,HIGH);
     796:	4f ef       	ldi	r20, 0xFF	; 255
     798:	68 e0       	ldi	r22, 0x08	; 8
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	0e 94 a3 01 	call	0x346	; 0x346 <gpioPinWrite>
         timer0DelayMs(1);
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0e 94 b9 05 	call	0xb72	; 0xb72 <timer0DelayMs>
         gpioPinWrite(ULTRA_EN_GPIO,ULTRA_ENABLE_BIT,LOW);
     7a8:	40 e0       	ldi	r20, 0x00	; 0
     7aa:	68 e0       	ldi	r22, 0x08	; 8
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	0e 94 a3 01 	call	0x346	; 0x346 <gpioPinWrite>
         if(((68*gu_sw_icu)/1000) > 5)
     7b2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <gu_sw_icu>
     7b6:	28 2f       	mov	r18, r24
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	44 e4       	ldi	r20, 0x44	; 68
     7bc:	42 9f       	mul	r20, r18
     7be:	c0 01       	movw	r24, r0
     7c0:	43 9f       	mul	r20, r19
     7c2:	90 0d       	add	r25, r0
     7c4:	11 24       	eor	r1, r1
     7c6:	80 37       	cpi	r24, 0x70	; 112
     7c8:	97 41       	sbci	r25, 0x17	; 23
     7ca:	94 f0       	brlt	.+36     	; 0x7f0 <carObtsacleDetection+0x166>
         {
            /* start moving forward*/
            MotorDC_Dir(MOT_1,FORWARD);
     7cc:	61 e0       	ldi	r22, 0x01	; 1
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	0e 94 71 00 	call	0xe2	; 0xe2 <MotorDC_Dir>
            MotorDC_Dir(MOT_2,FORWARD);
     7d4:	61 e0       	ldi	r22, 0x01	; 1
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	0e 94 71 00 	call	0xe2	; 0xe2 <MotorDC_Dir>
            MotorDC_Speed_HwPWM(70);
     7dc:	86 e4       	ldi	r24, 0x46	; 70
     7de:	0e 94 01 01 	call	0x202	; 0x202 <MotorDC_Speed_HwPWM>
            softwareDelayMs(300);
     7e2:	6c e2       	ldi	r22, 0x2C	; 44
     7e4:	71 e0       	ldi	r23, 0x01	; 1
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 03 04 	call	0x806	; 0x806 <softwareDelayMs>
     7ee:	b2 cf       	rjmp	.-156    	; 0x754 <carObtsacleDetection+0xca>
         }else{
            MotorDC_Dir(MOT_1,STOP);
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	0e 94 71 00 	call	0xe2	; 0xe2 <MotorDC_Dir>
            MotorDC_Dir(MOT_2,STOP);
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	0e 94 71 00 	call	0xe2	; 0xe2 <MotorDC_Dir>
            timer1Stop();
     800:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <timer1Stop>
         }
         
      }
      
      
   }         
     804:	a7 cf       	rjmp	.-178    	; 0x754 <carObtsacleDetection+0xca>

00000806 <softwareDelayMs>:
 * Description: this delay function operate in a polling manner
 * 				don't use it with RTOSs
 * @param a_delay_in_ms: the milli-seconds
 */
void softwareDelayMs(uint32_t u32_delay_in_ms)
{
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	00 d0       	rcall	.+0      	; 0x80c <softwareDelayMs+0x6>
     80c:	00 d0       	rcall	.+0      	; 0x80e <softwareDelayMs+0x8>
     80e:	00 d0       	rcall	.+0      	; 0x810 <softwareDelayMs+0xa>
     810:	cd b7       	in	r28, 0x3d	; 61
     812:	de b7       	in	r29, 0x3e	; 62
     814:	6b 83       	std	Y+3, r22	; 0x03
     816:	7c 83       	std	Y+4, r23	; 0x04
     818:	8d 83       	std	Y+5, r24	; 0x05
     81a:	9e 83       	std	Y+6, r25	; 0x06
	while(u32_delay_in_ms > 0)
     81c:	19 c0       	rjmp	.+50     	; 0x850 <softwareDelayMs+0x4a>
	{
		volatile uint16_t i = 360;
     81e:	88 e6       	ldi	r24, 0x68	; 104
     820:	91 e0       	ldi	r25, 0x01	; 1
     822:	9a 83       	std	Y+2, r25	; 0x02
     824:	89 83       	std	Y+1, r24	; 0x01
		while(i>0)
     826:	05 c0       	rjmp	.+10     	; 0x832 <softwareDelayMs+0x2c>
		{
			i--;
     828:	89 81       	ldd	r24, Y+1	; 0x01
     82a:	9a 81       	ldd	r25, Y+2	; 0x02
     82c:	01 97       	sbiw	r24, 0x01	; 1
     82e:	9a 83       	std	Y+2, r25	; 0x02
     830:	89 83       	std	Y+1, r24	; 0x01
void softwareDelayMs(uint32_t u32_delay_in_ms)
{
	while(u32_delay_in_ms > 0)
	{
		volatile uint16_t i = 360;
		while(i>0)
     832:	89 81       	ldd	r24, Y+1	; 0x01
     834:	9a 81       	ldd	r25, Y+2	; 0x02
     836:	89 2b       	or	r24, r25
     838:	b9 f7       	brne	.-18     	; 0x828 <softwareDelayMs+0x22>
		{
			i--;
		}
		u32_delay_in_ms--;		
     83a:	8b 81       	ldd	r24, Y+3	; 0x03
     83c:	9c 81       	ldd	r25, Y+4	; 0x04
     83e:	ad 81       	ldd	r26, Y+5	; 0x05
     840:	be 81       	ldd	r27, Y+6	; 0x06
     842:	01 97       	sbiw	r24, 0x01	; 1
     844:	a1 09       	sbc	r26, r1
     846:	b1 09       	sbc	r27, r1
     848:	8b 83       	std	Y+3, r24	; 0x03
     84a:	9c 83       	std	Y+4, r25	; 0x04
     84c:	ad 83       	std	Y+5, r26	; 0x05
     84e:	be 83       	std	Y+6, r27	; 0x06
 * 				don't use it with RTOSs
 * @param a_delay_in_ms: the milli-seconds
 */
void softwareDelayMs(uint32_t u32_delay_in_ms)
{
	while(u32_delay_in_ms > 0)
     850:	8b 81       	ldd	r24, Y+3	; 0x03
     852:	9c 81       	ldd	r25, Y+4	; 0x04
     854:	ad 81       	ldd	r26, Y+5	; 0x05
     856:	be 81       	ldd	r27, Y+6	; 0x06
     858:	89 2b       	or	r24, r25
     85a:	8a 2b       	or	r24, r26
     85c:	8b 2b       	or	r24, r27
     85e:	f9 f6       	brne	.-66     	; 0x81e <softwareDelayMs+0x18>
		{
			i--;
		}
		u32_delay_in_ms--;		
	}
}
     860:	00 00       	nop
     862:	26 96       	adiw	r28, 0x06	; 6
     864:	0f b6       	in	r0, 0x3f	; 63
     866:	f8 94       	cli
     868:	de bf       	out	0x3e, r29	; 62
     86a:	0f be       	out	0x3f, r0	; 63
     86c:	cd bf       	out	0x3d, r28	; 61
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	08 95       	ret

00000874 <timer1Init>:
       TIMSK &= ~(timer2.en_interruptMask);
       /* clear Global interrupt bit*/
       cli();
       break;
   } 
}
     874:	af 92       	push	r10
     876:	cf 92       	push	r12
     878:	df 92       	push	r13
     87a:	ef 92       	push	r14
     87c:	ff 92       	push	r15
     87e:	0f 93       	push	r16
     880:	1f 93       	push	r17
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	cd b7       	in	r28, 0x3d	; 61
     888:	de b7       	in	r29, 0x3e	; 62
     88a:	2e 97       	sbiw	r28, 0x0e	; 14
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	f8 94       	cli
     890:	de bf       	out	0x3e, r29	; 62
     892:	0f be       	out	0x3f, r0	; 63
     894:	cd bf       	out	0x3d, r28	; 61
     896:	9a 83       	std	Y+2, r25	; 0x02
     898:	89 83       	std	Y+1, r24	; 0x01
     89a:	7c 83       	std	Y+4, r23	; 0x04
     89c:	6b 83       	std	Y+3, r22	; 0x03
     89e:	4d 83       	std	Y+5, r20	; 0x05
     8a0:	3f 83       	std	Y+7, r19	; 0x07
     8a2:	2e 83       	std	Y+6, r18	; 0x06
     8a4:	19 87       	std	Y+9, r17	; 0x09
     8a6:	08 87       	std	Y+8, r16	; 0x08
     8a8:	fb 86       	std	Y+11, r15	; 0x0b
     8aa:	ea 86       	std	Y+10, r14	; 0x0a
     8ac:	dd 86       	std	Y+13, r13	; 0x0d
     8ae:	cc 86       	std	Y+12, r12	; 0x0c
     8b0:	ae 86       	std	Y+14, r10	; 0x0e
     8b2:	8e e4       	ldi	r24, 0x4E	; 78
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	2e e4       	ldi	r18, 0x4E	; 78
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	f9 01       	movw	r30, r18
     8bc:	40 81       	ld	r20, Z
     8be:	51 81       	ldd	r21, Z+1	; 0x01
     8c0:	29 81       	ldd	r18, Y+1	; 0x01
     8c2:	3a 81       	ldd	r19, Y+2	; 0x02
     8c4:	24 2b       	or	r18, r20
     8c6:	35 2b       	or	r19, r21
     8c8:	fc 01       	movw	r30, r24
     8ca:	31 83       	std	Z+1, r19	; 0x01
     8cc:	20 83       	st	Z, r18
     8ce:	8e e4       	ldi	r24, 0x4E	; 78
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	2e e4       	ldi	r18, 0x4E	; 78
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	f9 01       	movw	r30, r18
     8d8:	20 81       	ld	r18, Z
     8da:	31 81       	ldd	r19, Z+1	; 0x01
     8dc:	30 6a       	ori	r19, 0xA0	; 160
     8de:	fc 01       	movw	r30, r24
     8e0:	31 83       	std	Z+1, r19	; 0x01
     8e2:	20 83       	st	Z, r18
     8e4:	8c e4       	ldi	r24, 0x4C	; 76
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	2c e4       	ldi	r18, 0x4C	; 76
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	f9 01       	movw	r30, r18
     8ee:	40 81       	ld	r20, Z
     8f0:	51 81       	ldd	r21, Z+1	; 0x01
     8f2:	2e 81       	ldd	r18, Y+6	; 0x06
     8f4:	3f 81       	ldd	r19, Y+7	; 0x07
     8f6:	24 2b       	or	r18, r20
     8f8:	35 2b       	or	r19, r21
     8fa:	fc 01       	movw	r30, r24
     8fc:	31 83       	std	Z+1, r19	; 0x01
     8fe:	20 83       	st	Z, r18
     900:	8a e4       	ldi	r24, 0x4A	; 74
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	2a e4       	ldi	r18, 0x4A	; 74
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	f9 01       	movw	r30, r18
     90a:	40 81       	ld	r20, Z
     90c:	51 81       	ldd	r21, Z+1	; 0x01
     90e:	28 85       	ldd	r18, Y+8	; 0x08
     910:	39 85       	ldd	r19, Y+9	; 0x09
     912:	24 2b       	or	r18, r20
     914:	35 2b       	or	r19, r21
     916:	fc 01       	movw	r30, r24
     918:	31 83       	std	Z+1, r19	; 0x01
     91a:	20 83       	st	Z, r18
     91c:	88 e4       	ldi	r24, 0x48	; 72
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	28 e4       	ldi	r18, 0x48	; 72
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	f9 01       	movw	r30, r18
     926:	40 81       	ld	r20, Z
     928:	51 81       	ldd	r21, Z+1	; 0x01
     92a:	2a 85       	ldd	r18, Y+10	; 0x0a
     92c:	3b 85       	ldd	r19, Y+11	; 0x0b
     92e:	24 2b       	or	r18, r20
     930:	35 2b       	or	r19, r21
     932:	fc 01       	movw	r30, r24
     934:	31 83       	std	Z+1, r19	; 0x01
     936:	20 83       	st	Z, r18
     938:	86 e4       	ldi	r24, 0x46	; 70
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	26 e4       	ldi	r18, 0x46	; 70
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	f9 01       	movw	r30, r18
     942:	40 81       	ld	r20, Z
     944:	51 81       	ldd	r21, Z+1	; 0x01
     946:	2c 85       	ldd	r18, Y+12	; 0x0c
     948:	3d 85       	ldd	r19, Y+13	; 0x0d
     94a:	24 2b       	or	r18, r20
     94c:	35 2b       	or	r19, r21
     94e:	fc 01       	movw	r30, r24
     950:	31 83       	std	Z+1, r19	; 0x01
     952:	20 83       	st	Z, r18
     954:	8d 81       	ldd	r24, Y+5	; 0x05
     956:	88 2f       	mov	r24, r24
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <gu16_t1_en_prescal+0x1>
     95e:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <gu16_t1_en_prescal>
     962:	00 00       	nop
     964:	2e 96       	adiw	r28, 0x0e	; 14
     966:	0f b6       	in	r0, 0x3f	; 63
     968:	f8 94       	cli
     96a:	de bf       	out	0x3e, r29	; 62
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	cd bf       	out	0x3d, r28	; 61
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	1f 91       	pop	r17
     976:	0f 91       	pop	r16
     978:	ff 90       	pop	r15
     97a:	ef 90       	pop	r14
     97c:	df 90       	pop	r13
     97e:	cf 90       	pop	r12
     980:	af 90       	pop	r10
     982:	08 95       	ret

00000984 <timer1Start>:
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	cd b7       	in	r28, 0x3d	; 61
     98a:	de b7       	in	r29, 0x3e	; 62
     98c:	40 91 77 00 	lds	r20, 0x0077	; 0x800077 <gu16_t1_en_prescal>
     990:	50 91 78 00 	lds	r21, 0x0078	; 0x800078 <gu16_t1_en_prescal+0x1>
     994:	8e e4       	ldi	r24, 0x4E	; 78
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	2e e4       	ldi	r18, 0x4E	; 78
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	f9 01       	movw	r30, r18
     99e:	20 81       	ld	r18, Z
     9a0:	34 2f       	mov	r19, r20
     9a2:	23 2b       	or	r18, r19
     9a4:	fc 01       	movw	r30, r24
     9a6:	20 83       	st	Z, r18
     9a8:	00 00       	nop
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	08 95       	ret

000009b0 <timer1Stop>:
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	cd b7       	in	r28, 0x3d	; 61
     9b6:	de b7       	in	r29, 0x3e	; 62
     9b8:	8e e4       	ldi	r24, 0x4E	; 78
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	fc 01       	movw	r30, r24
     9be:	10 82       	st	Z, r1
     9c0:	00 00       	nop
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	08 95       	ret

000009c8 <timer1HwPWM>:
     9c8:	af 92       	push	r10
     9ca:	cf 92       	push	r12
     9cc:	df 92       	push	r13
     9ce:	ef 92       	push	r14
     9d0:	ff 92       	push	r15
     9d2:	0f 93       	push	r16
     9d4:	1f 93       	push	r17
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	00 d0       	rcall	.+0      	; 0x9dc <timer1HwPWM+0x14>
     9dc:	00 d0       	rcall	.+0      	; 0x9de <timer1HwPWM+0x16>
     9de:	1f 92       	push	r1
     9e0:	cd b7       	in	r28, 0x3d	; 61
     9e2:	de b7       	in	r29, 0x3e	; 62
     9e4:	8d 83       	std	Y+5, r24	; 0x05
     9e6:	4f ef       	ldi	r20, 0xFF	; 255
     9e8:	6c e0       	ldi	r22, 0x0C	; 12
     9ea:	83 e0       	ldi	r24, 0x03	; 3
     9ec:	0e 94 0f 01 	call	0x21e	; 0x21e <gpioPinDirection>
     9f0:	40 e0       	ldi	r20, 0x00	; 0
     9f2:	60 e3       	ldi	r22, 0x30	; 48
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	0e 94 a3 01 	call	0x346	; 0x346 <gpioPinWrite>
     9fa:	8d 81       	ldd	r24, Y+5	; 0x05
     9fc:	48 2f       	mov	r20, r24
     9fe:	50 e0       	ldi	r21, 0x00	; 0
     a00:	20 e4       	ldi	r18, 0x40	; 64
     a02:	31 e0       	ldi	r19, 0x01	; 1
     a04:	42 9f       	mul	r20, r18
     a06:	c0 01       	movw	r24, r0
     a08:	43 9f       	mul	r20, r19
     a0a:	90 0d       	add	r25, r0
     a0c:	52 9f       	mul	r21, r18
     a0e:	90 0d       	add	r25, r0
     a10:	11 24       	eor	r1, r1
     a12:	09 2e       	mov	r0, r25
     a14:	00 0c       	add	r0, r0
     a16:	aa 0b       	sbc	r26, r26
     a18:	bb 0b       	sbc	r27, r27
     a1a:	89 83       	std	Y+1, r24	; 0x01
     a1c:	9a 83       	std	Y+2, r25	; 0x02
     a1e:	ab 83       	std	Y+3, r26	; 0x03
     a20:	bc 83       	std	Y+4, r27	; 0x04
     a22:	29 81       	ldd	r18, Y+1	; 0x01
     a24:	3a 81       	ldd	r19, Y+2	; 0x02
     a26:	89 81       	ldd	r24, Y+1	; 0x01
     a28:	9a 81       	ldd	r25, Y+2	; 0x02
     a2a:	a1 2c       	mov	r10, r1
     a2c:	0f 2e       	mov	r0, r31
     a2e:	c1 2c       	mov	r12, r1
     a30:	fd e7       	ldi	r31, 0x7D	; 125
     a32:	df 2e       	mov	r13, r31
     a34:	f0 2d       	mov	r31, r0
     a36:	79 01       	movw	r14, r18
     a38:	8c 01       	movw	r16, r24
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	41 e0       	ldi	r20, 0x01	; 1
     a40:	60 e0       	ldi	r22, 0x00	; 0
     a42:	70 ea       	ldi	r23, 0xA0	; 160
     a44:	80 e1       	ldi	r24, 0x10	; 16
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0e 94 3a 04 	call	0x874	; 0x874 <timer1Init>
     a4c:	0e 94 c2 04 	call	0x984	; 0x984 <timer1Start>
     a50:	00 00       	nop
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	0f 90       	pop	r0
     a58:	0f 90       	pop	r0
     a5a:	0f 90       	pop	r0
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	1f 91       	pop	r17
     a62:	0f 91       	pop	r16
     a64:	ff 90       	pop	r15
     a66:	ef 90       	pop	r14
     a68:	df 90       	pop	r13
     a6a:	cf 90       	pop	r12
     a6c:	af 90       	pop	r10
     a6e:	08 95       	ret

00000a70 <timer0Init>:
     a70:	ef 92       	push	r14
     a72:	0f 93       	push	r16
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	00 d0       	rcall	.+0      	; 0xa7a <timer0Init+0xa>
     a7a:	00 d0       	rcall	.+0      	; 0xa7c <timer0Init+0xc>
     a7c:	00 d0       	rcall	.+0      	; 0xa7e <timer0Init+0xe>
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
     a82:	89 83       	std	Y+1, r24	; 0x01
     a84:	6a 83       	std	Y+2, r22	; 0x02
     a86:	4b 83       	std	Y+3, r20	; 0x03
     a88:	2c 83       	std	Y+4, r18	; 0x04
     a8a:	0d 83       	std	Y+5, r16	; 0x05
     a8c:	ee 82       	std	Y+6, r14	; 0x06
     a8e:	89 81       	ldd	r24, Y+1	; 0x01
     a90:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <timer0>
     a94:	8a 81       	ldd	r24, Y+2	; 0x02
     a96:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <timer0+0x1>
     a9a:	8b 81       	ldd	r24, Y+3	; 0x03
     a9c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <timer0+0x2>
     aa0:	8c 81       	ldd	r24, Y+4	; 0x04
     aa2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <timer0+0x3>
     aa6:	8d 81       	ldd	r24, Y+5	; 0x05
     aa8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <timer0+0x4>
     aac:	8e 81       	ldd	r24, Y+6	; 0x06
     aae:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <timer0+0x6>
     ab2:	00 00       	nop
     ab4:	26 96       	adiw	r28, 0x06	; 6
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	f8 94       	cli
     aba:	de bf       	out	0x3e, r29	; 62
     abc:	0f be       	out	0x3f, r0	; 63
     abe:	cd bf       	out	0x3d, r28	; 61
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
     ac4:	0f 91       	pop	r16
     ac6:	ef 90       	pop	r14
     ac8:	08 95       	ret

00000aca <timer0Set>:
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	1f 92       	push	r1
     ad0:	cd b7       	in	r28, 0x3d	; 61
     ad2:	de b7       	in	r29, 0x3e	; 62
     ad4:	89 83       	std	Y+1, r24	; 0x01
     ad6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <timer0>
     ada:	88 2f       	mov	r24, r24
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	00 97       	sbiw	r24, 0x00	; 0
     ae0:	19 f0       	breq	.+6      	; 0xae8 <timer0Set+0x1e>
     ae2:	08 97       	sbiw	r24, 0x08	; 8
     ae4:	61 f0       	breq	.+24     	; 0xafe <timer0Set+0x34>
     ae6:	1a c0       	rjmp	.+52     	; 0xb1c <timer0Set+0x52>
     ae8:	82 e5       	ldi	r24, 0x52	; 82
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	22 e5       	ldi	r18, 0x52	; 82
     aee:	30 e0       	ldi	r19, 0x00	; 0
     af0:	f9 01       	movw	r30, r18
     af2:	30 81       	ld	r19, Z
     af4:	29 81       	ldd	r18, Y+1	; 0x01
     af6:	23 2b       	or	r18, r19
     af8:	fc 01       	movw	r30, r24
     afa:	20 83       	st	Z, r18
     afc:	0f c0       	rjmp	.+30     	; 0xb1c <timer0Set+0x52>
     afe:	82 e5       	ldi	r24, 0x52	; 82
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	fc 01       	movw	r30, r24
     b04:	10 82       	st	Z, r1
     b06:	8c e5       	ldi	r24, 0x5C	; 92
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	2c e5       	ldi	r18, 0x5C	; 92
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	f9 01       	movw	r30, r18
     b10:	30 81       	ld	r19, Z
     b12:	29 81       	ldd	r18, Y+1	; 0x01
     b14:	23 2b       	or	r18, r19
     b16:	fc 01       	movw	r30, r24
     b18:	20 83       	st	Z, r18
     b1a:	00 00       	nop
     b1c:	00 00       	nop
     b1e:	0f 90       	pop	r0
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	08 95       	ret

00000b26 <timer0Start>:
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	cd b7       	in	r28, 0x3d	; 61
     b2c:	de b7       	in	r29, 0x3e	; 62
     b2e:	83 e5       	ldi	r24, 0x53	; 83
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	23 e5       	ldi	r18, 0x53	; 83
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	f9 01       	movw	r30, r18
     b38:	30 81       	ld	r19, Z
     b3a:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <timer0>
     b3e:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <timer0+0x2>
     b42:	24 2b       	or	r18, r20
     b44:	23 2b       	or	r18, r19
     b46:	fc 01       	movw	r30, r24
     b48:	20 83       	st	Z, r18
     b4a:	00 00       	nop
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	08 95       	ret

00000b52 <timer0Stop>:
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
     b5a:	83 e5       	ldi	r24, 0x53	; 83
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	fc 01       	movw	r30, r24
     b60:	80 81       	ld	r24, Z
     b62:	83 e5       	ldi	r24, 0x53	; 83
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	fc 01       	movw	r30, r24
     b68:	10 82       	st	Z, r1
     b6a:	00 00       	nop
     b6c:	df 91       	pop	r29
     b6e:	cf 91       	pop	r28
     b70:	08 95       	ret

00000b72 <timer0DelayMs>:
     b72:	ef 92       	push	r14
     b74:	0f 93       	push	r16
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
     b7e:	29 97       	sbiw	r28, 0x09	; 9
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	f8 94       	cli
     b84:	de bf       	out	0x3e, r29	; 62
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	cd bf       	out	0x3d, r28	; 61
     b8a:	99 87       	std	Y+9, r25	; 0x09
     b8c:	88 87       	std	Y+8, r24	; 0x08
     b8e:	1c 82       	std	Y+4, r1	; 0x04
     b90:	1d 82       	std	Y+5, r1	; 0x05
     b92:	1e 82       	std	Y+6, r1	; 0x06
     b94:	1f 82       	std	Y+7, r1	; 0x07
     b96:	19 82       	std	Y+1, r1	; 0x01
     b98:	1b 82       	std	Y+3, r1	; 0x03
     b9a:	1a 82       	std	Y+2, r1	; 0x02
     b9c:	e1 2c       	mov	r14, r1
     b9e:	00 e0       	ldi	r16, 0x00	; 0
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	41 e0       	ldi	r20, 0x01	; 1
     ba4:	60 e2       	ldi	r22, 0x20	; 32
     ba6:	88 e0       	ldi	r24, 0x08	; 8
     ba8:	0e 94 38 05 	call	0xa70	; 0xa70 <timer0Init>
     bac:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <timer0+0x2>
     bb0:	48 2f       	mov	r20, r24
     bb2:	50 e0       	ldi	r21, 0x00	; 0
     bb4:	28 ee       	ldi	r18, 0xE8	; 232
     bb6:	33 e0       	ldi	r19, 0x03	; 3
     bb8:	42 9f       	mul	r20, r18
     bba:	c0 01       	movw	r24, r0
     bbc:	43 9f       	mul	r20, r19
     bbe:	90 0d       	add	r25, r0
     bc0:	52 9f       	mul	r21, r18
     bc2:	90 0d       	add	r25, r0
     bc4:	11 24       	eor	r1, r1
     bc6:	9c 01       	movw	r18, r24
     bc8:	99 0f       	add	r25, r25
     bca:	44 0b       	sbc	r20, r20
     bcc:	55 0b       	sbc	r21, r21
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	94 e2       	ldi	r25, 0x24	; 36
     bd2:	a4 ef       	ldi	r26, 0xF4	; 244
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	bc 01       	movw	r22, r24
     bd8:	cd 01       	movw	r24, r26
     bda:	0e 94 ba 07 	call	0xf74	; 0xf74 <__divmodsi4>
     bde:	da 01       	movw	r26, r20
     be0:	c9 01       	movw	r24, r18
     be2:	9c 01       	movw	r18, r24
     be4:	ad 01       	movw	r20, r26
     be6:	88 85       	ldd	r24, Y+8	; 0x08
     be8:	99 85       	ldd	r25, Y+9	; 0x09
     bea:	cc 01       	movw	r24, r24
     bec:	a0 e0       	ldi	r26, 0x00	; 0
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	bc 01       	movw	r22, r24
     bf2:	cd 01       	movw	r24, r26
     bf4:	0e 94 96 07 	call	0xf2c	; 0xf2c <__mulsi3>
     bf8:	dc 01       	movw	r26, r24
     bfa:	cb 01       	movw	r24, r22
     bfc:	8c 83       	std	Y+4, r24	; 0x04
     bfe:	9d 83       	std	Y+5, r25	; 0x05
     c00:	ae 83       	std	Y+6, r26	; 0x06
     c02:	bf 83       	std	Y+7, r27	; 0x07
     c04:	8c 81       	ldd	r24, Y+4	; 0x04
     c06:	9d 81       	ldd	r25, Y+5	; 0x05
     c08:	ae 81       	ldd	r26, Y+6	; 0x06
     c0a:	bf 81       	ldd	r27, Y+7	; 0x07
     c0c:	89 2f       	mov	r24, r25
     c0e:	9a 2f       	mov	r25, r26
     c10:	ab 2f       	mov	r26, r27
     c12:	bb 27       	eor	r27, r27
     c14:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <gu32_sw_counter>
     c18:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <gu32_sw_counter+0x1>
     c1c:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <gu32_sw_counter+0x2>
     c20:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <gu32_sw_counter+0x3>
     c24:	8c 81       	ldd	r24, Y+4	; 0x04
     c26:	9d 81       	ldd	r25, Y+5	; 0x05
     c28:	ae 81       	ldd	r26, Y+6	; 0x06
     c2a:	bf 81       	ldd	r27, Y+7	; 0x07
     c2c:	99 27       	eor	r25, r25
     c2e:	aa 27       	eor	r26, r26
     c30:	bb 27       	eor	r27, r27
     c32:	89 2b       	or	r24, r25
     c34:	8a 2b       	or	r24, r26
     c36:	8b 2b       	or	r24, r27
     c38:	b1 f0       	breq	.+44     	; 0xc66 <timer0DelayMs+0xf4>
     c3a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <gu32_sw_counter>
     c3e:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <gu32_sw_counter+0x1>
     c42:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <gu32_sw_counter+0x2>
     c46:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <gu32_sw_counter+0x3>
     c4a:	01 96       	adiw	r24, 0x01	; 1
     c4c:	a1 1d       	adc	r26, r1
     c4e:	b1 1d       	adc	r27, r1
     c50:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <gu32_sw_counter>
     c54:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <gu32_sw_counter+0x1>
     c58:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <gu32_sw_counter+0x2>
     c5c:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <gu32_sw_counter+0x3>
     c60:	8c 81       	ldd	r24, Y+4	; 0x04
     c62:	89 83       	std	Y+1, r24	; 0x01
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <timer0DelayMs+0xf8>
     c66:	8f ef       	ldi	r24, 0xFF	; 255
     c68:	89 83       	std	Y+1, r24	; 0x01
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	0e 94 65 05 	call	0xaca	; 0xaca <timer0Set>
     c70:	0e 94 93 05 	call	0xb26	; 0xb26 <timer0Start>
     c74:	1d c0       	rjmp	.+58     	; 0xcb0 <timer0DelayMs+0x13e>
     c76:	8a 81       	ldd	r24, Y+2	; 0x02
     c78:	9b 81       	ldd	r25, Y+3	; 0x03
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	9b 83       	std	Y+3, r25	; 0x03
     c7e:	8a 83       	std	Y+2, r24	; 0x02
     c80:	88 e5       	ldi	r24, 0x58	; 88
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	fc 01       	movw	r30, r24
     c86:	80 81       	ld	r24, Z
     c88:	88 2f       	mov	r24, r24
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	82 70       	andi	r24, 0x02	; 2
     c8e:	99 27       	eor	r25, r25
     c90:	89 2b       	or	r24, r25
     c92:	b1 f3       	breq	.-20     	; 0xc80 <timer0DelayMs+0x10e>
     c94:	88 e5       	ldi	r24, 0x58	; 88
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	28 e5       	ldi	r18, 0x58	; 88
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	f9 01       	movw	r30, r18
     c9e:	20 81       	ld	r18, Z
     ca0:	22 60       	ori	r18, 0x02	; 2
     ca2:	fc 01       	movw	r30, r24
     ca4:	20 83       	st	Z, r18
     ca6:	8c e5       	ldi	r24, 0x5C	; 92
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	2f ef       	ldi	r18, 0xFF	; 255
     cac:	fc 01       	movw	r30, r24
     cae:	20 83       	st	Z, r18
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	9b 81       	ldd	r25, Y+3	; 0x03
     cb4:	9c 01       	movw	r18, r24
     cb6:	40 e0       	ldi	r20, 0x00	; 0
     cb8:	50 e0       	ldi	r21, 0x00	; 0
     cba:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <gu32_sw_counter>
     cbe:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <gu32_sw_counter+0x1>
     cc2:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <gu32_sw_counter+0x2>
     cc6:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <gu32_sw_counter+0x3>
     cca:	28 17       	cp	r18, r24
     ccc:	39 07       	cpc	r19, r25
     cce:	4a 07       	cpc	r20, r26
     cd0:	5b 07       	cpc	r21, r27
     cd2:	88 f2       	brcs	.-94     	; 0xc76 <timer0DelayMs+0x104>
     cd4:	0e 94 a9 05 	call	0xb52	; 0xb52 <timer0Stop>
     cd8:	00 00       	nop
     cda:	29 96       	adiw	r28, 0x09	; 9
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	0f 91       	pop	r16
     cec:	ef 90       	pop	r14
     cee:	08 95       	ret

00000cf0 <timer2Init>:
     cf0:	cf 92       	push	r12
     cf2:	ef 92       	push	r14
     cf4:	0f 93       	push	r16
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
     cfe:	27 97       	sbiw	r28, 0x07	; 7
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	f8 94       	cli
     d04:	de bf       	out	0x3e, r29	; 62
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	cd bf       	out	0x3d, r28	; 61
     d0a:	89 83       	std	Y+1, r24	; 0x01
     d0c:	6a 83       	std	Y+2, r22	; 0x02
     d0e:	4b 83       	std	Y+3, r20	; 0x03
     d10:	2c 83       	std	Y+4, r18	; 0x04
     d12:	0d 83       	std	Y+5, r16	; 0x05
     d14:	ee 82       	std	Y+6, r14	; 0x06
     d16:	cf 82       	std	Y+7, r12	; 0x07
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <timer2>
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <timer2+0x1>
     d24:	8b 81       	ldd	r24, Y+3	; 0x03
     d26:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <timer2+0x2>
     d2a:	8c 81       	ldd	r24, Y+4	; 0x04
     d2c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <timer2+0x3>
     d30:	8d 81       	ldd	r24, Y+5	; 0x05
     d32:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <timer2+0x4>
     d36:	8e 81       	ldd	r24, Y+6	; 0x06
     d38:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <timer2+0x5>
     d3c:	8f 81       	ldd	r24, Y+7	; 0x07
     d3e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <timer2+0x6>
     d42:	00 00       	nop
     d44:	27 96       	adiw	r28, 0x07	; 7
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	cd bf       	out	0x3d, r28	; 61
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	0f 91       	pop	r16
     d56:	ef 90       	pop	r14
     d58:	cf 90       	pop	r12
     d5a:	08 95       	ret

00000d5c <timer2Set>:
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	1f 92       	push	r1
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	89 83       	std	Y+1, r24	; 0x01
     d68:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <timer0>
     d6c:	88 2f       	mov	r24, r24
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	00 97       	sbiw	r24, 0x00	; 0
     d72:	19 f0       	breq	.+6      	; 0xd7a <timer2Set+0x1e>
     d74:	08 97       	sbiw	r24, 0x08	; 8
     d76:	61 f0       	breq	.+24     	; 0xd90 <timer2Set+0x34>
     d78:	1a c0       	rjmp	.+52     	; 0xdae <timer2Set+0x52>
     d7a:	84 e4       	ldi	r24, 0x44	; 68
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	24 e4       	ldi	r18, 0x44	; 68
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	f9 01       	movw	r30, r18
     d84:	30 81       	ld	r19, Z
     d86:	29 81       	ldd	r18, Y+1	; 0x01
     d88:	23 2b       	or	r18, r19
     d8a:	fc 01       	movw	r30, r24
     d8c:	20 83       	st	Z, r18
     d8e:	0f c0       	rjmp	.+30     	; 0xdae <timer2Set+0x52>
     d90:	84 e4       	ldi	r24, 0x44	; 68
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	fc 01       	movw	r30, r24
     d96:	10 82       	st	Z, r1
     d98:	83 e4       	ldi	r24, 0x43	; 67
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	23 e4       	ldi	r18, 0x43	; 67
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	f9 01       	movw	r30, r18
     da2:	30 81       	ld	r19, Z
     da4:	29 81       	ldd	r18, Y+1	; 0x01
     da6:	23 2b       	or	r18, r19
     da8:	fc 01       	movw	r30, r24
     daa:	20 83       	st	Z, r18
     dac:	00 00       	nop
     dae:	00 00       	nop
     db0:	0f 90       	pop	r0
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	08 95       	ret

00000db8 <timer2Read>:
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
     dc0:	84 e4       	ldi	r24, 0x44	; 68
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	fc 01       	movw	r30, r24
     dc6:	80 81       	ld	r24, Z
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	08 95       	ret

00000dce <timer2Start>:
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	85 e4       	ldi	r24, 0x45	; 69
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	25 e4       	ldi	r18, 0x45	; 69
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	f9 01       	movw	r30, r18
     de0:	30 81       	ld	r19, Z
     de2:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer2>
     de6:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <timer2+0x2>
     dea:	24 2b       	or	r18, r20
     dec:	23 2b       	or	r18, r19
     dee:	fc 01       	movw	r30, r24
     df0:	20 83       	st	Z, r18
     df2:	00 00       	nop
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	08 95       	ret

00000dfa <timer2Stop>:
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	85 e4       	ldi	r24, 0x45	; 69
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	fc 01       	movw	r30, r24
     e08:	80 81       	ld	r24, Z
     e0a:	85 e4       	ldi	r24, 0x45	; 69
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	fc 01       	movw	r30, r24
     e10:	10 82       	st	Z, r1
     e12:	00 00       	nop
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	08 95       	ret

00000e1a <__vector_11>:

/************************************************ Timers ISRs Control **********************************************************/
ISR_TIMER0_OVF(){
     e1a:	78 94       	sei
     e1c:	1f 92       	push	r1
     e1e:	0f 92       	push	r0
     e20:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e24:	0f 92       	push	r0
     e26:	11 24       	eor	r1, r1
     e28:	2f 93       	push	r18
     e2a:	3f 93       	push	r19
     e2c:	4f 93       	push	r20
     e2e:	5f 93       	push	r21
     e30:	6f 93       	push	r22
     e32:	7f 93       	push	r23
     e34:	8f 93       	push	r24
     e36:	9f 93       	push	r25
     e38:	af 93       	push	r26
     e3a:	bf 93       	push	r27
     e3c:	ef 93       	push	r30
     e3e:	ff 93       	push	r31
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
   /*reset pins*/
   gpioPinWrite(GPIOD,(BIT4|BIT5),LOW);
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	60 e3       	ldi	r22, 0x30	; 48
     e4c:	83 e0       	ldi	r24, 0x03	; 3
     e4e:	0e 94 a3 01 	call	0x346	; 0x346 <gpioPinWrite>
   /*reload TCNT0*/
   TCNT0 = gu8_preloader;  //debug point
     e52:	82 e5       	ldi	r24, 0x52	; 82
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <gu8_preloader>
     e5a:	fc 01       	movw	r30, r24
     e5c:	20 83       	st	Z, r18
}
     e5e:	00 00       	nop
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	ff 91       	pop	r31
     e66:	ef 91       	pop	r30
     e68:	bf 91       	pop	r27
     e6a:	af 91       	pop	r26
     e6c:	9f 91       	pop	r25
     e6e:	8f 91       	pop	r24
     e70:	7f 91       	pop	r23
     e72:	6f 91       	pop	r22
     e74:	5f 91       	pop	r21
     e76:	4f 91       	pop	r20
     e78:	3f 91       	pop	r19
     e7a:	2f 91       	pop	r18
     e7c:	0f 90       	pop	r0
     e7e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e82:	0f 90       	pop	r0
     e84:	1f 90       	pop	r1
     e86:	18 95       	reti

00000e88 <__vector_10>:

ISR_TIMER0_COMP(){
     e88:	78 94       	sei
     e8a:	1f 92       	push	r1
     e8c:	0f 92       	push	r0
     e8e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e92:	0f 92       	push	r0
     e94:	11 24       	eor	r1, r1
     e96:	2f 93       	push	r18
     e98:	3f 93       	push	r19
     e9a:	4f 93       	push	r20
     e9c:	5f 93       	push	r21
     e9e:	6f 93       	push	r22
     ea0:	7f 93       	push	r23
     ea2:	8f 93       	push	r24
     ea4:	9f 93       	push	r25
     ea6:	af 93       	push	r26
     ea8:	bf 93       	push	r27
     eaa:	ef 93       	push	r30
     eac:	ff 93       	push	r31
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
   /*set pins*/
   gpioPinWrite(GPIOD,(BIT4|BIT5),HIGH);
     eb6:	4f ef       	ldi	r20, 0xFF	; 255
     eb8:	60 e3       	ldi	r22, 0x30	; 48
     eba:	83 e0       	ldi	r24, 0x03	; 3
     ebc:	0e 94 a3 01 	call	0x346	; 0x346 <gpioPinWrite>
}
     ec0:	00 00       	nop
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	ff 91       	pop	r31
     ec8:	ef 91       	pop	r30
     eca:	bf 91       	pop	r27
     ecc:	af 91       	pop	r26
     ece:	9f 91       	pop	r25
     ed0:	8f 91       	pop	r24
     ed2:	7f 91       	pop	r23
     ed4:	6f 91       	pop	r22
     ed6:	5f 91       	pop	r21
     ed8:	4f 91       	pop	r20
     eda:	3f 91       	pop	r19
     edc:	2f 91       	pop	r18
     ede:	0f 90       	pop	r0
     ee0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     ee4:	0f 90       	pop	r0
     ee6:	1f 90       	pop	r1
     ee8:	18 95       	reti

00000eea <__vector_5>:

ISR_TIMER2_OVF(){
     eea:	78 94       	sei
     eec:	1f 92       	push	r1
     eee:	0f 92       	push	r0
     ef0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     ef4:	0f 92       	push	r0
     ef6:	11 24       	eor	r1, r1
     ef8:	8f 93       	push	r24
     efa:	9f 93       	push	r25
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
   /* decrement global software counter*/
   gu16_t2_sw_counter-=1;
     f04:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <gu16_t2_sw_counter>
     f08:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <gu16_t2_sw_counter+0x1>
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <gu16_t2_sw_counter+0x1>
     f12:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <gu16_t2_sw_counter>
}
     f16:	00 00       	nop
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	9f 91       	pop	r25
     f1e:	8f 91       	pop	r24
     f20:	0f 90       	pop	r0
     f22:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     f26:	0f 90       	pop	r0
     f28:	1f 90       	pop	r1
     f2a:	18 95       	reti

00000f2c <__mulsi3>:
     f2c:	db 01       	movw	r26, r22
     f2e:	8f 93       	push	r24
     f30:	9f 93       	push	r25
     f32:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__muluhisi3>
     f36:	bf 91       	pop	r27
     f38:	af 91       	pop	r26
     f3a:	a2 9f       	mul	r26, r18
     f3c:	80 0d       	add	r24, r0
     f3e:	91 1d       	adc	r25, r1
     f40:	a3 9f       	mul	r26, r19
     f42:	90 0d       	add	r25, r0
     f44:	b2 9f       	mul	r27, r18
     f46:	90 0d       	add	r25, r0
     f48:	11 24       	eor	r1, r1
     f4a:	08 95       	ret

00000f4c <__divmodhi4>:
     f4c:	97 fb       	bst	r25, 7
     f4e:	07 2e       	mov	r0, r23
     f50:	16 f4       	brtc	.+4      	; 0xf56 <__divmodhi4+0xa>
     f52:	00 94       	com	r0
     f54:	07 d0       	rcall	.+14     	; 0xf64 <__divmodhi4_neg1>
     f56:	77 fd       	sbrc	r23, 7
     f58:	09 d0       	rcall	.+18     	; 0xf6c <__divmodhi4_neg2>
     f5a:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__udivmodhi4>
     f5e:	07 fc       	sbrc	r0, 7
     f60:	05 d0       	rcall	.+10     	; 0xf6c <__divmodhi4_neg2>
     f62:	3e f4       	brtc	.+14     	; 0xf72 <__divmodhi4_exit>

00000f64 <__divmodhi4_neg1>:
     f64:	90 95       	com	r25
     f66:	81 95       	neg	r24
     f68:	9f 4f       	sbci	r25, 0xFF	; 255
     f6a:	08 95       	ret

00000f6c <__divmodhi4_neg2>:
     f6c:	70 95       	com	r23
     f6e:	61 95       	neg	r22
     f70:	7f 4f       	sbci	r23, 0xFF	; 255

00000f72 <__divmodhi4_exit>:
     f72:	08 95       	ret

00000f74 <__divmodsi4>:
     f74:	05 2e       	mov	r0, r21
     f76:	97 fb       	bst	r25, 7
     f78:	1e f4       	brtc	.+6      	; 0xf80 <__divmodsi4+0xc>
     f7a:	00 94       	com	r0
     f7c:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__negsi2>
     f80:	57 fd       	sbrc	r21, 7
     f82:	07 d0       	rcall	.+14     	; 0xf92 <__divmodsi4_neg2>
     f84:	0e 94 f8 07 	call	0xff0	; 0xff0 <__udivmodsi4>
     f88:	07 fc       	sbrc	r0, 7
     f8a:	03 d0       	rcall	.+6      	; 0xf92 <__divmodsi4_neg2>
     f8c:	4e f4       	brtc	.+18     	; 0xfa0 <__divmodsi4_exit>
     f8e:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__negsi2>

00000f92 <__divmodsi4_neg2>:
     f92:	50 95       	com	r21
     f94:	40 95       	com	r20
     f96:	30 95       	com	r19
     f98:	21 95       	neg	r18
     f9a:	3f 4f       	sbci	r19, 0xFF	; 255
     f9c:	4f 4f       	sbci	r20, 0xFF	; 255
     f9e:	5f 4f       	sbci	r21, 0xFF	; 255

00000fa0 <__divmodsi4_exit>:
     fa0:	08 95       	ret

00000fa2 <__negsi2>:
     fa2:	90 95       	com	r25
     fa4:	80 95       	com	r24
     fa6:	70 95       	com	r23
     fa8:	61 95       	neg	r22
     faa:	7f 4f       	sbci	r23, 0xFF	; 255
     fac:	8f 4f       	sbci	r24, 0xFF	; 255
     fae:	9f 4f       	sbci	r25, 0xFF	; 255
     fb0:	08 95       	ret

00000fb2 <__muluhisi3>:
     fb2:	0e 94 1a 08 	call	0x1034	; 0x1034 <__umulhisi3>
     fb6:	a5 9f       	mul	r26, r21
     fb8:	90 0d       	add	r25, r0
     fba:	b4 9f       	mul	r27, r20
     fbc:	90 0d       	add	r25, r0
     fbe:	a4 9f       	mul	r26, r20
     fc0:	80 0d       	add	r24, r0
     fc2:	91 1d       	adc	r25, r1
     fc4:	11 24       	eor	r1, r1
     fc6:	08 95       	ret

00000fc8 <__udivmodhi4>:
     fc8:	aa 1b       	sub	r26, r26
     fca:	bb 1b       	sub	r27, r27
     fcc:	51 e1       	ldi	r21, 0x11	; 17
     fce:	07 c0       	rjmp	.+14     	; 0xfde <__udivmodhi4_ep>

00000fd0 <__udivmodhi4_loop>:
     fd0:	aa 1f       	adc	r26, r26
     fd2:	bb 1f       	adc	r27, r27
     fd4:	a6 17       	cp	r26, r22
     fd6:	b7 07       	cpc	r27, r23
     fd8:	10 f0       	brcs	.+4      	; 0xfde <__udivmodhi4_ep>
     fda:	a6 1b       	sub	r26, r22
     fdc:	b7 0b       	sbc	r27, r23

00000fde <__udivmodhi4_ep>:
     fde:	88 1f       	adc	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	5a 95       	dec	r21
     fe4:	a9 f7       	brne	.-22     	; 0xfd0 <__udivmodhi4_loop>
     fe6:	80 95       	com	r24
     fe8:	90 95       	com	r25
     fea:	bc 01       	movw	r22, r24
     fec:	cd 01       	movw	r24, r26
     fee:	08 95       	ret

00000ff0 <__udivmodsi4>:
     ff0:	a1 e2       	ldi	r26, 0x21	; 33
     ff2:	1a 2e       	mov	r1, r26
     ff4:	aa 1b       	sub	r26, r26
     ff6:	bb 1b       	sub	r27, r27
     ff8:	fd 01       	movw	r30, r26
     ffa:	0d c0       	rjmp	.+26     	; 0x1016 <__udivmodsi4_ep>

00000ffc <__udivmodsi4_loop>:
     ffc:	aa 1f       	adc	r26, r26
     ffe:	bb 1f       	adc	r27, r27
    1000:	ee 1f       	adc	r30, r30
    1002:	ff 1f       	adc	r31, r31
    1004:	a2 17       	cp	r26, r18
    1006:	b3 07       	cpc	r27, r19
    1008:	e4 07       	cpc	r30, r20
    100a:	f5 07       	cpc	r31, r21
    100c:	20 f0       	brcs	.+8      	; 0x1016 <__udivmodsi4_ep>
    100e:	a2 1b       	sub	r26, r18
    1010:	b3 0b       	sbc	r27, r19
    1012:	e4 0b       	sbc	r30, r20
    1014:	f5 0b       	sbc	r31, r21

00001016 <__udivmodsi4_ep>:
    1016:	66 1f       	adc	r22, r22
    1018:	77 1f       	adc	r23, r23
    101a:	88 1f       	adc	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	1a 94       	dec	r1
    1020:	69 f7       	brne	.-38     	; 0xffc <__udivmodsi4_loop>
    1022:	60 95       	com	r22
    1024:	70 95       	com	r23
    1026:	80 95       	com	r24
    1028:	90 95       	com	r25
    102a:	9b 01       	movw	r18, r22
    102c:	ac 01       	movw	r20, r24
    102e:	bd 01       	movw	r22, r26
    1030:	cf 01       	movw	r24, r30
    1032:	08 95       	ret

00001034 <__umulhisi3>:
    1034:	a2 9f       	mul	r26, r18
    1036:	b0 01       	movw	r22, r0
    1038:	b3 9f       	mul	r27, r19
    103a:	c0 01       	movw	r24, r0
    103c:	a3 9f       	mul	r26, r19
    103e:	70 0d       	add	r23, r0
    1040:	81 1d       	adc	r24, r1
    1042:	11 24       	eor	r1, r1
    1044:	91 1d       	adc	r25, r1
    1046:	b2 9f       	mul	r27, r18
    1048:	70 0d       	add	r23, r0
    104a:	81 1d       	adc	r24, r1
    104c:	11 24       	eor	r1, r1
    104e:	91 1d       	adc	r25, r1
    1050:	08 95       	ret

00001052 <_exit>:
    1052:	f8 94       	cli

00001054 <__stop_program>:
    1054:	ff cf       	rjmp	.-2      	; 0x1054 <__stop_program>
