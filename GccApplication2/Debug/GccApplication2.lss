
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000c60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800060  00800060  00000c60  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c60  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012da  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ba  00000000  00000000  0000212e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f95  00000000  00000000  000029e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000620  00000000  00000000  00003980  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009f3  00000000  00000000  00003fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cc7  00000000  00000000  00004993  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  0000565a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 40 05 	jmp	0xa80	; 0xa80 <__vector_5>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__vector_10>
  2c:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 37       	cpi	r26, 0x77	; 119
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <main>
  74:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <gpioPinDirection>:
		break;
		case 3: /* GPIOD */
		PORTD_DIR = u8_direction;
		break;
	}	
}
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	00 d0       	rcall	.+0      	; 0x82 <gpioPinDirection+0x6>
  82:	1f 92       	push	r1
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	89 83       	std	Y+1, r24	; 0x01
  8a:	6a 83       	std	Y+2, r22	; 0x02
  8c:	4b 83       	std	Y+3, r20	; 0x03
  8e:	8b 81       	ldd	r24, Y+3	; 0x03
  90:	88 23       	and	r24, r24
  92:	09 f0       	breq	.+2      	; 0x96 <gpioPinDirection+0x1a>
  94:	42 c0       	rjmp	.+132    	; 0x11a <gpioPinDirection+0x9e>
  96:	8a 81       	ldd	r24, Y+2	; 0x02
  98:	80 95       	com	r24
  9a:	8a 83       	std	Y+2, r24	; 0x02
  9c:	89 81       	ldd	r24, Y+1	; 0x01
  9e:	88 2f       	mov	r24, r24
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	91 05       	cpc	r25, r1
  a6:	b9 f0       	breq	.+46     	; 0xd6 <gpioPinDirection+0x5a>
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	91 05       	cpc	r25, r1
  ac:	1c f4       	brge	.+6      	; 0xb4 <gpioPinDirection+0x38>
  ae:	89 2b       	or	r24, r25
  b0:	39 f0       	breq	.+14     	; 0xc0 <gpioPinDirection+0x44>
  b2:	71 c0       	rjmp	.+226    	; 0x196 <gpioPinDirection+0x11a>
  b4:	82 30       	cpi	r24, 0x02	; 2
  b6:	91 05       	cpc	r25, r1
  b8:	c9 f0       	breq	.+50     	; 0xec <gpioPinDirection+0x70>
  ba:	03 97       	sbiw	r24, 0x03	; 3
  bc:	11 f1       	breq	.+68     	; 0x102 <gpioPinDirection+0x86>
  be:	6b c0       	rjmp	.+214    	; 0x196 <gpioPinDirection+0x11a>
  c0:	8a e3       	ldi	r24, 0x3A	; 58
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	2a e3       	ldi	r18, 0x3A	; 58
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	f9 01       	movw	r30, r18
  ca:	30 81       	ld	r19, Z
  cc:	2a 81       	ldd	r18, Y+2	; 0x02
  ce:	23 23       	and	r18, r19
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
  d4:	60 c0       	rjmp	.+192    	; 0x196 <gpioPinDirection+0x11a>
  d6:	87 e3       	ldi	r24, 0x37	; 55
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	27 e3       	ldi	r18, 0x37	; 55
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	f9 01       	movw	r30, r18
  e0:	30 81       	ld	r19, Z
  e2:	2a 81       	ldd	r18, Y+2	; 0x02
  e4:	23 23       	and	r18, r19
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
  ea:	55 c0       	rjmp	.+170    	; 0x196 <gpioPinDirection+0x11a>
  ec:	84 e3       	ldi	r24, 0x34	; 52
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	24 e3       	ldi	r18, 0x34	; 52
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	f9 01       	movw	r30, r18
  f6:	30 81       	ld	r19, Z
  f8:	2a 81       	ldd	r18, Y+2	; 0x02
  fa:	23 23       	and	r18, r19
  fc:	fc 01       	movw	r30, r24
  fe:	20 83       	st	Z, r18
 100:	4a c0       	rjmp	.+148    	; 0x196 <gpioPinDirection+0x11a>
 102:	81 e3       	ldi	r24, 0x31	; 49
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	21 e3       	ldi	r18, 0x31	; 49
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	f9 01       	movw	r30, r18
 10c:	30 81       	ld	r19, Z
 10e:	2a 81       	ldd	r18, Y+2	; 0x02
 110:	23 23       	and	r18, r19
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
 116:	00 00       	nop
 118:	3e c0       	rjmp	.+124    	; 0x196 <gpioPinDirection+0x11a>
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	88 2f       	mov	r24, r24
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	91 05       	cpc	r25, r1
 124:	b9 f0       	breq	.+46     	; 0x154 <gpioPinDirection+0xd8>
 126:	82 30       	cpi	r24, 0x02	; 2
 128:	91 05       	cpc	r25, r1
 12a:	1c f4       	brge	.+6      	; 0x132 <gpioPinDirection+0xb6>
 12c:	89 2b       	or	r24, r25
 12e:	39 f0       	breq	.+14     	; 0x13e <gpioPinDirection+0xc2>
 130:	32 c0       	rjmp	.+100    	; 0x196 <gpioPinDirection+0x11a>
 132:	82 30       	cpi	r24, 0x02	; 2
 134:	91 05       	cpc	r25, r1
 136:	c9 f0       	breq	.+50     	; 0x16a <gpioPinDirection+0xee>
 138:	03 97       	sbiw	r24, 0x03	; 3
 13a:	11 f1       	breq	.+68     	; 0x180 <gpioPinDirection+0x104>
 13c:	2c c0       	rjmp	.+88     	; 0x196 <gpioPinDirection+0x11a>
 13e:	8a e3       	ldi	r24, 0x3A	; 58
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	2a e3       	ldi	r18, 0x3A	; 58
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	f9 01       	movw	r30, r18
 148:	30 81       	ld	r19, Z
 14a:	2a 81       	ldd	r18, Y+2	; 0x02
 14c:	23 2b       	or	r18, r19
 14e:	fc 01       	movw	r30, r24
 150:	20 83       	st	Z, r18
 152:	21 c0       	rjmp	.+66     	; 0x196 <gpioPinDirection+0x11a>
 154:	87 e3       	ldi	r24, 0x37	; 55
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	27 e3       	ldi	r18, 0x37	; 55
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	f9 01       	movw	r30, r18
 15e:	30 81       	ld	r19, Z
 160:	2a 81       	ldd	r18, Y+2	; 0x02
 162:	23 2b       	or	r18, r19
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18
 168:	16 c0       	rjmp	.+44     	; 0x196 <gpioPinDirection+0x11a>
 16a:	84 e3       	ldi	r24, 0x34	; 52
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	24 e3       	ldi	r18, 0x34	; 52
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	f9 01       	movw	r30, r18
 174:	30 81       	ld	r19, Z
 176:	2a 81       	ldd	r18, Y+2	; 0x02
 178:	23 2b       	or	r18, r19
 17a:	fc 01       	movw	r30, r24
 17c:	20 83       	st	Z, r18
 17e:	0b c0       	rjmp	.+22     	; 0x196 <gpioPinDirection+0x11a>
 180:	81 e3       	ldi	r24, 0x31	; 49
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	21 e3       	ldi	r18, 0x31	; 49
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	f9 01       	movw	r30, r18
 18a:	30 81       	ld	r19, Z
 18c:	2a 81       	ldd	r18, Y+2	; 0x02
 18e:	23 2b       	or	r18, r19
 190:	fc 01       	movw	r30, r24
 192:	20 83       	st	Z, r18
 194:	00 00       	nop
 196:	00 00       	nop
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <gpioPinWrite>:
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	00 d0       	rcall	.+0      	; 0x1aa <gpioPinWrite+0x6>
 1aa:	1f 92       	push	r1
 1ac:	cd b7       	in	r28, 0x3d	; 61
 1ae:	de b7       	in	r29, 0x3e	; 62
 1b0:	89 83       	std	Y+1, r24	; 0x01
 1b2:	6a 83       	std	Y+2, r22	; 0x02
 1b4:	4b 83       	std	Y+3, r20	; 0x03
 1b6:	8b 81       	ldd	r24, Y+3	; 0x03
 1b8:	88 23       	and	r24, r24
 1ba:	09 f0       	breq	.+2      	; 0x1be <gpioPinWrite+0x1a>
 1bc:	42 c0       	rjmp	.+132    	; 0x242 <gpioPinWrite+0x9e>
 1be:	8a 81       	ldd	r24, Y+2	; 0x02
 1c0:	80 95       	com	r24
 1c2:	8a 83       	std	Y+2, r24	; 0x02
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	88 2f       	mov	r24, r24
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	91 05       	cpc	r25, r1
 1ce:	b9 f0       	breq	.+46     	; 0x1fe <gpioPinWrite+0x5a>
 1d0:	82 30       	cpi	r24, 0x02	; 2
 1d2:	91 05       	cpc	r25, r1
 1d4:	1c f4       	brge	.+6      	; 0x1dc <gpioPinWrite+0x38>
 1d6:	89 2b       	or	r24, r25
 1d8:	39 f0       	breq	.+14     	; 0x1e8 <gpioPinWrite+0x44>
 1da:	71 c0       	rjmp	.+226    	; 0x2be <gpioPinWrite+0x11a>
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	91 05       	cpc	r25, r1
 1e0:	c9 f0       	breq	.+50     	; 0x214 <gpioPinWrite+0x70>
 1e2:	03 97       	sbiw	r24, 0x03	; 3
 1e4:	11 f1       	breq	.+68     	; 0x22a <gpioPinWrite+0x86>
 1e6:	6b c0       	rjmp	.+214    	; 0x2be <gpioPinWrite+0x11a>
 1e8:	8b e3       	ldi	r24, 0x3B	; 59
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	2b e3       	ldi	r18, 0x3B	; 59
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	f9 01       	movw	r30, r18
 1f2:	30 81       	ld	r19, Z
 1f4:	2a 81       	ldd	r18, Y+2	; 0x02
 1f6:	23 23       	and	r18, r19
 1f8:	fc 01       	movw	r30, r24
 1fa:	20 83       	st	Z, r18
 1fc:	60 c0       	rjmp	.+192    	; 0x2be <gpioPinWrite+0x11a>
 1fe:	88 e3       	ldi	r24, 0x38	; 56
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	28 e3       	ldi	r18, 0x38	; 56
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	f9 01       	movw	r30, r18
 208:	30 81       	ld	r19, Z
 20a:	2a 81       	ldd	r18, Y+2	; 0x02
 20c:	23 23       	and	r18, r19
 20e:	fc 01       	movw	r30, r24
 210:	20 83       	st	Z, r18
 212:	55 c0       	rjmp	.+170    	; 0x2be <gpioPinWrite+0x11a>
 214:	85 e3       	ldi	r24, 0x35	; 53
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	25 e3       	ldi	r18, 0x35	; 53
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	f9 01       	movw	r30, r18
 21e:	30 81       	ld	r19, Z
 220:	2a 81       	ldd	r18, Y+2	; 0x02
 222:	23 23       	and	r18, r19
 224:	fc 01       	movw	r30, r24
 226:	20 83       	st	Z, r18
 228:	4a c0       	rjmp	.+148    	; 0x2be <gpioPinWrite+0x11a>
 22a:	82 e3       	ldi	r24, 0x32	; 50
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	22 e3       	ldi	r18, 0x32	; 50
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	f9 01       	movw	r30, r18
 234:	30 81       	ld	r19, Z
 236:	2a 81       	ldd	r18, Y+2	; 0x02
 238:	23 23       	and	r18, r19
 23a:	fc 01       	movw	r30, r24
 23c:	20 83       	st	Z, r18
 23e:	00 00       	nop
 240:	3e c0       	rjmp	.+124    	; 0x2be <gpioPinWrite+0x11a>
 242:	89 81       	ldd	r24, Y+1	; 0x01
 244:	88 2f       	mov	r24, r24
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	91 05       	cpc	r25, r1
 24c:	b9 f0       	breq	.+46     	; 0x27c <gpioPinWrite+0xd8>
 24e:	82 30       	cpi	r24, 0x02	; 2
 250:	91 05       	cpc	r25, r1
 252:	1c f4       	brge	.+6      	; 0x25a <gpioPinWrite+0xb6>
 254:	89 2b       	or	r24, r25
 256:	39 f0       	breq	.+14     	; 0x266 <gpioPinWrite+0xc2>
 258:	32 c0       	rjmp	.+100    	; 0x2be <gpioPinWrite+0x11a>
 25a:	82 30       	cpi	r24, 0x02	; 2
 25c:	91 05       	cpc	r25, r1
 25e:	c9 f0       	breq	.+50     	; 0x292 <gpioPinWrite+0xee>
 260:	03 97       	sbiw	r24, 0x03	; 3
 262:	11 f1       	breq	.+68     	; 0x2a8 <gpioPinWrite+0x104>
 264:	2c c0       	rjmp	.+88     	; 0x2be <gpioPinWrite+0x11a>
 266:	8b e3       	ldi	r24, 0x3B	; 59
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	2b e3       	ldi	r18, 0x3B	; 59
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	f9 01       	movw	r30, r18
 270:	30 81       	ld	r19, Z
 272:	2a 81       	ldd	r18, Y+2	; 0x02
 274:	23 2b       	or	r18, r19
 276:	fc 01       	movw	r30, r24
 278:	20 83       	st	Z, r18
 27a:	21 c0       	rjmp	.+66     	; 0x2be <gpioPinWrite+0x11a>
 27c:	88 e3       	ldi	r24, 0x38	; 56
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	28 e3       	ldi	r18, 0x38	; 56
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	f9 01       	movw	r30, r18
 286:	30 81       	ld	r19, Z
 288:	2a 81       	ldd	r18, Y+2	; 0x02
 28a:	23 2b       	or	r18, r19
 28c:	fc 01       	movw	r30, r24
 28e:	20 83       	st	Z, r18
 290:	16 c0       	rjmp	.+44     	; 0x2be <gpioPinWrite+0x11a>
 292:	85 e3       	ldi	r24, 0x35	; 53
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	25 e3       	ldi	r18, 0x35	; 53
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	f9 01       	movw	r30, r18
 29c:	30 81       	ld	r19, Z
 29e:	2a 81       	ldd	r18, Y+2	; 0x02
 2a0:	23 2b       	or	r18, r19
 2a2:	fc 01       	movw	r30, r24
 2a4:	20 83       	st	Z, r18
 2a6:	0b c0       	rjmp	.+22     	; 0x2be <gpioPinWrite+0x11a>
 2a8:	82 e3       	ldi	r24, 0x32	; 50
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	22 e3       	ldi	r18, 0x32	; 50
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	f9 01       	movw	r30, r18
 2b2:	30 81       	ld	r19, Z
 2b4:	2a 81       	ldd	r18, Y+2	; 0x02
 2b6:	23 2b       	or	r18, r19
 2b8:	fc 01       	movw	r30, r24
 2ba:	20 83       	st	Z, r18
 2bc:	00 00       	nop
 2be:	00 00       	nop
 2c0:	0f 90       	pop	r0
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <gpioPortWrite>:
 * @param value: set the port value and takes the following values
 * 				- 0x00 -> Low
 * 				- 0xff -> High
 */
void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	00 d0       	rcall	.+0      	; 0x2d2 <gpioPortWrite+0x6>
 2d2:	cd b7       	in	r28, 0x3d	; 61
 2d4:	de b7       	in	r29, 0x3e	; 62
 2d6:	89 83       	std	Y+1, r24	; 0x01
 2d8:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8_port)
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	88 2f       	mov	r24, r24
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	91 05       	cpc	r25, r1
 2e4:	91 f0       	breq	.+36     	; 0x30a <gpioPortWrite+0x3e>
 2e6:	82 30       	cpi	r24, 0x02	; 2
 2e8:	91 05       	cpc	r25, r1
 2ea:	1c f4       	brge	.+6      	; 0x2f2 <gpioPortWrite+0x26>
 2ec:	89 2b       	or	r24, r25
 2ee:	39 f0       	breq	.+14     	; 0x2fe <gpioPortWrite+0x32>
		case 3: /* GPIOD */
		PORTD_DATA = u8_value;
		break;
	}
	
}
 2f0:	1e c0       	rjmp	.+60     	; 0x32e <gpioPortWrite+0x62>
 * 				- 0x00 -> Low
 * 				- 0xff -> High
 */
void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
	switch(u8_port)
 2f2:	82 30       	cpi	r24, 0x02	; 2
 2f4:	91 05       	cpc	r25, r1
 2f6:	79 f0       	breq	.+30     	; 0x316 <gpioPortWrite+0x4a>
 2f8:	03 97       	sbiw	r24, 0x03	; 3
 2fa:	99 f0       	breq	.+38     	; 0x322 <gpioPortWrite+0x56>
		case 3: /* GPIOD */
		PORTD_DATA = u8_value;
		break;
	}
	
}
 2fc:	18 c0       	rjmp	.+48     	; 0x32e <gpioPortWrite+0x62>
void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
	switch(u8_port)
	{
		case 0: /* GPIOA */
		PORTA_DATA = u8_value;
 2fe:	8b e3       	ldi	r24, 0x3B	; 59
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	2a 81       	ldd	r18, Y+2	; 0x02
 304:	fc 01       	movw	r30, r24
 306:	20 83       	st	Z, r18
		break;
 308:	12 c0       	rjmp	.+36     	; 0x32e <gpioPortWrite+0x62>
		case 1: /* GPIOB */
		PORTB_DATA = u8_value;
 30a:	88 e3       	ldi	r24, 0x38	; 56
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	2a 81       	ldd	r18, Y+2	; 0x02
 310:	fc 01       	movw	r30, r24
 312:	20 83       	st	Z, r18
		break;
 314:	0c c0       	rjmp	.+24     	; 0x32e <gpioPortWrite+0x62>
		case 2: /* GPIOC */
		PORTC_DATA = u8_value;
 316:	85 e3       	ldi	r24, 0x35	; 53
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	2a 81       	ldd	r18, Y+2	; 0x02
 31c:	fc 01       	movw	r30, r24
 31e:	20 83       	st	Z, r18
		break;
 320:	06 c0       	rjmp	.+12     	; 0x32e <gpioPortWrite+0x62>
		case 3: /* GPIOD */
		PORTD_DATA = u8_value;
 322:	82 e3       	ldi	r24, 0x32	; 50
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	2a 81       	ldd	r18, Y+2	; 0x02
 328:	fc 01       	movw	r30, r24
 32a:	20 83       	st	Z, r18
		break;
 32c:	00 00       	nop
	}
	
}
 32e:	00 00       	nop
 330:	0f 90       	pop	r0
 332:	0f 90       	pop	r0
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	08 95       	ret

0000033a <Led_Init>:
 * @param led_id: The led to be initialized and it takes
 * 				  one of the enum (En_LedNumber_t) parameters
 *
 */
void Led_Init(En_LedNumber_t en_led_id)
{
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	1f 92       	push	r1
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	de b7       	in	r29, 0x3e	; 62
 344:	89 83       	std	Y+1, r24	; 0x01
	switch (en_led_id)
 346:	89 81       	ldd	r24, Y+1	; 0x01
 348:	88 2f       	mov	r24, r24
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	81 30       	cpi	r24, 0x01	; 1
 34e:	91 05       	cpc	r25, r1
 350:	91 f0       	breq	.+36     	; 0x376 <Led_Init+0x3c>
 352:	82 30       	cpi	r24, 0x02	; 2
 354:	91 05       	cpc	r25, r1
 356:	1c f4       	brge	.+6      	; 0x35e <Led_Init+0x24>
 358:	89 2b       	or	r24, r25
 35a:	39 f0       	breq	.+14     	; 0x36a <Led_Init+0x30>
		break;
		case LED_3:
		gpioPinDirection(LED_3_GPIO,LED_3_BIT,HIGH);
		break;
	}	
}
 35c:	1e c0       	rjmp	.+60     	; 0x39a <Led_Init+0x60>
 * 				  one of the enum (En_LedNumber_t) parameters
 *
 */
void Led_Init(En_LedNumber_t en_led_id)
{
	switch (en_led_id)
 35e:	82 30       	cpi	r24, 0x02	; 2
 360:	91 05       	cpc	r25, r1
 362:	79 f0       	breq	.+30     	; 0x382 <Led_Init+0x48>
 364:	03 97       	sbiw	r24, 0x03	; 3
 366:	99 f0       	breq	.+38     	; 0x38e <Led_Init+0x54>
		break;
		case LED_3:
		gpioPinDirection(LED_3_GPIO,LED_3_BIT,HIGH);
		break;
	}	
}
 368:	18 c0       	rjmp	.+48     	; 0x39a <Led_Init+0x60>
void Led_Init(En_LedNumber_t en_led_id)
{
	switch (en_led_id)
	{
		case LED_0:
		gpioPinDirection(LED_0_GPIO,LED_0_BIT,HIGH);
 36a:	4f ef       	ldi	r20, 0xFF	; 255
 36c:	60 e1       	ldi	r22, 0x10	; 16
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
		break;
 374:	12 c0       	rjmp	.+36     	; 0x39a <Led_Init+0x60>
		case LED_1:
		gpioPinDirection(LED_1_GPIO,LED_1_BIT,HIGH);
 376:	4f ef       	ldi	r20, 0xFF	; 255
 378:	60 e2       	ldi	r22, 0x20	; 32
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
		break;
 380:	0c c0       	rjmp	.+24     	; 0x39a <Led_Init+0x60>
		case LED_2:
		gpioPinDirection(LED_2_GPIO,LED_2_BIT,HIGH);
 382:	4f ef       	ldi	r20, 0xFF	; 255
 384:	60 e4       	ldi	r22, 0x40	; 64
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
		break;
 38c:	06 c0       	rjmp	.+12     	; 0x39a <Led_Init+0x60>
		case LED_3:
		gpioPinDirection(LED_3_GPIO,LED_3_BIT,HIGH);
 38e:	4f ef       	ldi	r20, 0xFF	; 255
 390:	60 e8       	ldi	r22, 0x80	; 128
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
		break;
 398:	00 00       	nop
	}	
}
 39a:	00 00       	nop
 39c:	0f 90       	pop	r0
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

000003a4 <main>:




int main(void)
{ 
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	cd b7       	in	r28, 0x3d	; 61
 3aa:	de b7       	in	r29, 0x3e	; 62
	/* gpioReq9(); */
	//test(); 
   /*testPwm();*/
   /*car();*/
   //swIcuTest();
   swIcuDistanceMeasurement();   
 3ac:	0e 94 dd 01 	call	0x3ba	; 0x3ba <swIcuDistanceMeasurement>
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	90 e0       	ldi	r25, 0x00	; 0
}
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	08 95       	ret

000003ba <swIcuDistanceMeasurement>:

void swIcuDistanceMeasurement()
{
 3ba:	cf 92       	push	r12
 3bc:	ef 92       	push	r14
 3be:	0f 93       	push	r16
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	cd b7       	in	r28, 0x3d	; 61
 3c6:	de b7       	in	r29, 0x3e	; 62
   /*------------------------------------------------------ Initialization --------------------------------------------------*/   
   /* Initialize Timer2 : Its counts will be used for distance measurement */
   timer2Init(T2_NORMAL_MODE,T2_OC2_CLEAR,T2_PRESCALER_64,0,0,0,T2_INTERRUPT_NORMAL);
 3c8:	68 94       	set
 3ca:	cc 24       	eor	r12, r12
 3cc:	c6 f8       	bld	r12, 6
 3ce:	e1 2c       	mov	r14, r1
 3d0:	00 e0       	ldi	r16, 0x00	; 0
 3d2:	20 e0       	ldi	r18, 0x00	; 0
 3d4:	44 e0       	ldi	r20, 0x04	; 4
 3d6:	60 e2       	ldi	r22, 0x20	; 32
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	0e 94 43 04 	call	0x886	; 0x886 <timer2Init>
   /* Initialize UltraSonicSensor */
   //gpioPinDirection(ULTRA_EN_GPIO,ULTRA_ENABLE_BIT,OUTPUT); /* Triggering pin */
   gpioPinDirection(ULTRA_OUT_GPIO,ULTRA_OUT_BIT,INPUT);    /* Echo pin */
 3de:	40 e0       	ldi	r20, 0x00	; 0
 3e0:	64 e0       	ldi	r22, 0x04	; 4
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
   PORTB_DIR |= BIT3;
 3e8:	87 e3       	ldi	r24, 0x37	; 55
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	27 e3       	ldi	r18, 0x37	; 55
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	f9 01       	movw	r30, r18
 3f2:	20 81       	ld	r18, Z
 3f4:	28 60       	ori	r18, 0x08	; 8
 3f6:	fc 01       	movw	r30, r24
 3f8:	20 83       	st	Z, r18
   /* Initialize LEDs : will be used to as an output for distance measurement value */
   Led_Init(LED_0);
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	0e 94 9d 01 	call	0x33a	; 0x33a <Led_Init>
   Led_Init(LED_1);
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 9d 01 	call	0x33a	; 0x33a <Led_Init>
   Led_Init(LED_2);
 406:	82 e0       	ldi	r24, 0x02	; 2
 408:	0e 94 9d 01 	call	0x33a	; 0x33a <Led_Init>
   Led_Init(LED_3);
 40c:	83 e0       	ldi	r24, 0x03	; 3
 40e:	0e 94 9d 01 	call	0x33a	; 0x33a <Led_Init>
   /* Set Global Interrupt */
   sei(); 
 412:	78 94       	sei
   /**********/
   /*Disable INT2*/
   GICR &= ~(BIT5);   
 414:	8b e5       	ldi	r24, 0x5B	; 91
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	2b e5       	ldi	r18, 0x5B	; 91
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	f9 01       	movw	r30, r18
 41e:	20 81       	ld	r18, Z
 420:	2f 7d       	andi	r18, 0xDF	; 223
 422:	fc 01       	movw	r30, r24
 424:	20 83       	st	Z, r18
   /*Set ISC2 to (1) : that will fire INT2 on rising edge */
   MCUCSR |= BIT6; 
 426:	84 e5       	ldi	r24, 0x54	; 84
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	24 e5       	ldi	r18, 0x54	; 84
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	f9 01       	movw	r30, r18
 430:	20 81       	ld	r18, Z
 432:	20 64       	ori	r18, 0x40	; 64
 434:	fc 01       	movw	r30, r24
 436:	20 83       	st	Z, r18
   /*Reset INTF2 flag bit by setting 1*/
   GIFR |= BIT5; 
 438:	8a e5       	ldi	r24, 0x5A	; 90
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	2a e5       	ldi	r18, 0x5A	; 90
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	f9 01       	movw	r30, r18
 442:	20 81       	ld	r18, Z
 444:	20 62       	ori	r18, 0x20	; 32
 446:	fc 01       	movw	r30, r24
 448:	20 83       	st	Z, r18
   /*Enable INT2*/
   GICR |= (BIT5);   
 44a:	8b e5       	ldi	r24, 0x5B	; 91
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	2b e5       	ldi	r18, 0x5B	; 91
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	f9 01       	movw	r30, r18
 454:	20 81       	ld	r18, Z
 456:	20 62       	ori	r18, 0x20	; 32
 458:	fc 01       	movw	r30, r24
 45a:	20 83       	st	Z, r18
   /*---------------------------------------------------- Trigger the Sensor -----------------------------------------------------*/
    
   gpioPinWrite(ULTRA_EN_GPIO,ULTRA_ENABLE_BIT,HIGH);
 45c:	4f ef       	ldi	r20, 0xFF	; 255
 45e:	68 e0       	ldi	r22, 0x08	; 8
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <gpioPinWrite>
   //PORTB_DATA = 0x08;   
   timer0DelayMs(1);   
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	0e 94 84 03 	call	0x708	; 0x708 <timer0DelayMs>
   gpioPinWrite(ULTRA_EN_GPIO,ULTRA_ENABLE_BIT,LOW);
 46e:	40 e0       	ldi	r20, 0x00	; 0
 470:	68 e0       	ldi	r22, 0x08	; 8
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <gpioPinWrite>
   
   
      
   while(1)
   {       
      if(gu_distance_read == HIGH)
 478:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 47c:	8f 3f       	cpi	r24, 0xFF	; 255
 47e:	e1 f7       	brne	.-8      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
      {   
            
         gpioPortWrite(GPIOB,((68*gu_sw_icu)/1000)<<4);
 480:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <gu_sw_icu>
 484:	88 2f       	mov	r24, r24
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	24 e4       	ldi	r18, 0x44	; 68
 48a:	28 9f       	mul	r18, r24
 48c:	a0 01       	movw	r20, r0
 48e:	29 9f       	mul	r18, r25
 490:	50 0d       	add	r21, r0
 492:	11 24       	eor	r1, r1
 494:	28 ee       	ldi	r18, 0xE8	; 232
 496:	33 e0       	ldi	r19, 0x03	; 3
 498:	ca 01       	movw	r24, r20
 49a:	b9 01       	movw	r22, r18
 49c:	0e 94 71 05 	call	0xae2	; 0xae2 <__divmodhi4>
 4a0:	cb 01       	movw	r24, r22
 4a2:	82 95       	swap	r24
 4a4:	80 7f       	andi	r24, 0xF0	; 240
 4a6:	68 2f       	mov	r22, r24
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	0e 94 66 01 	call	0x2cc	; 0x2cc <gpioPortWrite>
         timer0DelayMs(100);  
 4ae:	84 e6       	ldi	r24, 0x64	; 100
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0e 94 84 03 	call	0x708	; 0x708 <timer0DelayMs>
         gu_distance_read = LOW;
 4b6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
         gpioPinWrite(ULTRA_EN_GPIO,ULTRA_ENABLE_BIT,HIGH);
 4ba:	4f ef       	ldi	r20, 0xFF	; 255
 4bc:	68 e0       	ldi	r22, 0x08	; 8
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <gpioPinWrite>
         //PORTB_DATA = 0x08;
         timer0DelayMs(1);
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 84 03 	call	0x708	; 0x708 <timer0DelayMs>
         gpioPinWrite(ULTRA_EN_GPIO,ULTRA_ENABLE_BIT,LOW);
 4cc:	40 e0       	ldi	r20, 0x00	; 0
 4ce:	68 e0       	ldi	r22, 0x08	; 8
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <gpioPinWrite>
         //PORTB_DATA = 0x00;             
      }     
   }
 4d6:	d0 cf       	rjmp	.-96     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>

000004d8 <__vector_3>:
   
}

/************ INT2 ISR ***********/
ISR_INT2()
{
 4d8:	78 94       	sei
 4da:	1f 92       	push	r1
 4dc:	0f 92       	push	r0
 4de:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 4e2:	0f 92       	push	r0
 4e4:	11 24       	eor	r1, r1
 4e6:	2f 93       	push	r18
 4e8:	3f 93       	push	r19
 4ea:	4f 93       	push	r20
 4ec:	5f 93       	push	r21
 4ee:	6f 93       	push	r22
 4f0:	7f 93       	push	r23
 4f2:	8f 93       	push	r24
 4f4:	9f 93       	push	r25
 4f6:	af 93       	push	r26
 4f8:	bf 93       	push	r27
 4fa:	ef 93       	push	r30
 4fc:	ff 93       	push	r31
 4fe:	cf 93       	push	r28
 500:	df 93       	push	r29
 502:	cd b7       	in	r28, 0x3d	; 61
 504:	de b7       	in	r29, 0x3e	; 62
   if(MCUCSR & BIT6)  /* if ISC2 is set --> Rising edge */
 506:	84 e5       	ldi	r24, 0x54	; 84
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	fc 01       	movw	r30, r24
 50c:	80 81       	ld	r24, Z
 50e:	88 2f       	mov	r24, r24
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	80 74       	andi	r24, 0x40	; 64
 514:	99 27       	eor	r25, r25
 516:	89 2b       	or	r24, r25
 518:	39 f1       	breq	.+78     	; 0x568 <__vector_3+0x90>
   {
      /*start timer2*/
      timer2Start();
 51a:	0e 94 b2 04 	call	0x964	; 0x964 <timer2Start>
      /*change edge*/
      /**********/
      /*Disable INT2*/
      GICR &= ~(BIT5);
 51e:	8b e5       	ldi	r24, 0x5B	; 91
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	2b e5       	ldi	r18, 0x5B	; 91
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	f9 01       	movw	r30, r18
 528:	20 81       	ld	r18, Z
 52a:	2f 7d       	andi	r18, 0xDF	; 223
 52c:	fc 01       	movw	r30, r24
 52e:	20 83       	st	Z, r18
      /*Set ISC2 to (0) : that will fire INT2 on falling edge */
      MCUCSR &= (~BIT6);      
 530:	84 e5       	ldi	r24, 0x54	; 84
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	24 e5       	ldi	r18, 0x54	; 84
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	f9 01       	movw	r30, r18
 53a:	20 81       	ld	r18, Z
 53c:	2f 7b       	andi	r18, 0xBF	; 191
 53e:	fc 01       	movw	r30, r24
 540:	20 83       	st	Z, r18
      /*Reset INTF2 flag bit by setting 1*/
      GIFR |= BIT5;
 542:	8a e5       	ldi	r24, 0x5A	; 90
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	2a e5       	ldi	r18, 0x5A	; 90
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	f9 01       	movw	r30, r18
 54c:	20 81       	ld	r18, Z
 54e:	20 62       	ori	r18, 0x20	; 32
 550:	fc 01       	movw	r30, r24
 552:	20 83       	st	Z, r18
      /*Enable INT2*/
      GICR |= (BIT5);            
 554:	8b e5       	ldi	r24, 0x5B	; 91
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	2b e5       	ldi	r18, 0x5B	; 91
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	f9 01       	movw	r30, r18
 55e:	20 81       	ld	r18, Z
 560:	20 62       	ori	r18, 0x20	; 32
 562:	fc 01       	movw	r30, r24
 564:	20 83       	st	Z, r18
      GICR |= (BIT5);
      /*set read flag*/
      gu_distance_read = HIGH;
   }    
   
}
 566:	3a c0       	rjmp	.+116    	; 0x5dc <__vector_3+0x104>
      /*Reset INTF2 flag bit by setting 1*/
      GIFR |= BIT5;
      /*Enable INT2*/
      GICR |= (BIT5);            
   }
   else if(!(MCUCSR & BIT6)) /* if ISC2 is set to (0) --> Falling Edge */ /* assert its value !!!??*/
 568:	84 e5       	ldi	r24, 0x54	; 84
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	fc 01       	movw	r30, r24
 56e:	80 81       	ld	r24, Z
 570:	88 2f       	mov	r24, r24
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	80 74       	andi	r24, 0x40	; 64
 576:	99 27       	eor	r25, r25
 578:	89 2b       	or	r24, r25
 57a:	81 f5       	brne	.+96     	; 0x5dc <__vector_3+0x104>
   {
      /*stop timer counter*/
      timer2Stop();
 57c:	0e 94 c8 04 	call	0x990	; 0x990 <timer2Stop>
      /*read TCNT2*/
      gu_sw_icu = timer2Read();
 580:	0e 94 a7 04 	call	0x94e	; 0x94e <timer2Read>
 584:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <gu_sw_icu>
      /*Reset TCNT2*/
      timer2Set(0);
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <timer2Set>
      /*change edge*/
      /**********/
      /*Disable INT2*/
      GICR &= ~(BIT5);
 58e:	8b e5       	ldi	r24, 0x5B	; 91
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	2b e5       	ldi	r18, 0x5B	; 91
 594:	30 e0       	ldi	r19, 0x00	; 0
 596:	f9 01       	movw	r30, r18
 598:	20 81       	ld	r18, Z
 59a:	2f 7d       	andi	r18, 0xDF	; 223
 59c:	fc 01       	movw	r30, r24
 59e:	20 83       	st	Z, r18
      /*Set ISC2 to (1) : that will fire INT2 on rising edge */
      MCUCSR |= (BIT6);      
 5a0:	84 e5       	ldi	r24, 0x54	; 84
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	24 e5       	ldi	r18, 0x54	; 84
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	f9 01       	movw	r30, r18
 5aa:	20 81       	ld	r18, Z
 5ac:	20 64       	ori	r18, 0x40	; 64
 5ae:	fc 01       	movw	r30, r24
 5b0:	20 83       	st	Z, r18
      /*Reset INTF2 flag bit by setting 1*/
      GIFR |= BIT5;
 5b2:	8a e5       	ldi	r24, 0x5A	; 90
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	2a e5       	ldi	r18, 0x5A	; 90
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	f9 01       	movw	r30, r18
 5bc:	20 81       	ld	r18, Z
 5be:	20 62       	ori	r18, 0x20	; 32
 5c0:	fc 01       	movw	r30, r24
 5c2:	20 83       	st	Z, r18
      /*Enable INT2*/
      GICR |= (BIT5);
 5c4:	8b e5       	ldi	r24, 0x5B	; 91
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	2b e5       	ldi	r18, 0x5B	; 91
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	f9 01       	movw	r30, r18
 5ce:	20 81       	ld	r18, Z
 5d0:	20 62       	ori	r18, 0x20	; 32
 5d2:	fc 01       	movw	r30, r24
 5d4:	20 83       	st	Z, r18
      /*set read flag*/
      gu_distance_read = HIGH;
 5d6:	8f ef       	ldi	r24, 0xFF	; 255
 5d8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
   }    
   
}
 5dc:	00 00       	nop
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	ff 91       	pop	r31
 5e4:	ef 91       	pop	r30
 5e6:	bf 91       	pop	r27
 5e8:	af 91       	pop	r26
 5ea:	9f 91       	pop	r25
 5ec:	8f 91       	pop	r24
 5ee:	7f 91       	pop	r23
 5f0:	6f 91       	pop	r22
 5f2:	5f 91       	pop	r21
 5f4:	4f 91       	pop	r20
 5f6:	3f 91       	pop	r19
 5f8:	2f 91       	pop	r18
 5fa:	0f 90       	pop	r0
 5fc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 600:	0f 90       	pop	r0
 602:	1f 90       	pop	r1
 604:	18 95       	reti

00000606 <timer0Init>:
       TIMSK &= ~(timer2.en_interruptMask);
       /* clear Global interrupt bit*/
       cli();
       break;
   } 
}
 606:	ef 92       	push	r14
 608:	0f 93       	push	r16
 60a:	cf 93       	push	r28
 60c:	df 93       	push	r29
 60e:	00 d0       	rcall	.+0      	; 0x610 <timer0Init+0xa>
 610:	00 d0       	rcall	.+0      	; 0x612 <timer0Init+0xc>
 612:	00 d0       	rcall	.+0      	; 0x614 <timer0Init+0xe>
 614:	cd b7       	in	r28, 0x3d	; 61
 616:	de b7       	in	r29, 0x3e	; 62
 618:	89 83       	std	Y+1, r24	; 0x01
 61a:	6a 83       	std	Y+2, r22	; 0x02
 61c:	4b 83       	std	Y+3, r20	; 0x03
 61e:	2c 83       	std	Y+4, r18	; 0x04
 620:	0d 83       	std	Y+5, r16	; 0x05
 622:	ee 82       	std	Y+6, r14	; 0x06
 624:	89 81       	ldd	r24, Y+1	; 0x01
 626:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <timer0>
 62a:	8a 81       	ldd	r24, Y+2	; 0x02
 62c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <timer0+0x1>
 630:	8b 81       	ldd	r24, Y+3	; 0x03
 632:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <timer0+0x2>
 636:	8c 81       	ldd	r24, Y+4	; 0x04
 638:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <timer0+0x3>
 63c:	8d 81       	ldd	r24, Y+5	; 0x05
 63e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <timer0+0x4>
 642:	8e 81       	ldd	r24, Y+6	; 0x06
 644:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <timer0+0x6>
 648:	00 00       	nop
 64a:	26 96       	adiw	r28, 0x06	; 6
 64c:	0f b6       	in	r0, 0x3f	; 63
 64e:	f8 94       	cli
 650:	de bf       	out	0x3e, r29	; 62
 652:	0f be       	out	0x3f, r0	; 63
 654:	cd bf       	out	0x3d, r28	; 61
 656:	df 91       	pop	r29
 658:	cf 91       	pop	r28
 65a:	0f 91       	pop	r16
 65c:	ef 90       	pop	r14
 65e:	08 95       	ret

00000660 <timer0Set>:
 660:	cf 93       	push	r28
 662:	df 93       	push	r29
 664:	1f 92       	push	r1
 666:	cd b7       	in	r28, 0x3d	; 61
 668:	de b7       	in	r29, 0x3e	; 62
 66a:	89 83       	std	Y+1, r24	; 0x01
 66c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <timer0>
 670:	88 2f       	mov	r24, r24
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	00 97       	sbiw	r24, 0x00	; 0
 676:	19 f0       	breq	.+6      	; 0x67e <timer0Set+0x1e>
 678:	08 97       	sbiw	r24, 0x08	; 8
 67a:	61 f0       	breq	.+24     	; 0x694 <timer0Set+0x34>
 67c:	1a c0       	rjmp	.+52     	; 0x6b2 <timer0Set+0x52>
 67e:	82 e5       	ldi	r24, 0x52	; 82
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	22 e5       	ldi	r18, 0x52	; 82
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	f9 01       	movw	r30, r18
 688:	30 81       	ld	r19, Z
 68a:	29 81       	ldd	r18, Y+1	; 0x01
 68c:	23 2b       	or	r18, r19
 68e:	fc 01       	movw	r30, r24
 690:	20 83       	st	Z, r18
 692:	0f c0       	rjmp	.+30     	; 0x6b2 <timer0Set+0x52>
 694:	82 e5       	ldi	r24, 0x52	; 82
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	fc 01       	movw	r30, r24
 69a:	10 82       	st	Z, r1
 69c:	8c e5       	ldi	r24, 0x5C	; 92
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	2c e5       	ldi	r18, 0x5C	; 92
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	f9 01       	movw	r30, r18
 6a6:	30 81       	ld	r19, Z
 6a8:	29 81       	ldd	r18, Y+1	; 0x01
 6aa:	23 2b       	or	r18, r19
 6ac:	fc 01       	movw	r30, r24
 6ae:	20 83       	st	Z, r18
 6b0:	00 00       	nop
 6b2:	00 00       	nop
 6b4:	0f 90       	pop	r0
 6b6:	df 91       	pop	r29
 6b8:	cf 91       	pop	r28
 6ba:	08 95       	ret

000006bc <timer0Start>:
 6bc:	cf 93       	push	r28
 6be:	df 93       	push	r29
 6c0:	cd b7       	in	r28, 0x3d	; 61
 6c2:	de b7       	in	r29, 0x3e	; 62
 6c4:	83 e5       	ldi	r24, 0x53	; 83
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	23 e5       	ldi	r18, 0x53	; 83
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	f9 01       	movw	r30, r18
 6ce:	30 81       	ld	r19, Z
 6d0:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <timer0>
 6d4:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <timer0+0x2>
 6d8:	24 2b       	or	r18, r20
 6da:	23 2b       	or	r18, r19
 6dc:	fc 01       	movw	r30, r24
 6de:	20 83       	st	Z, r18
 6e0:	00 00       	nop
 6e2:	df 91       	pop	r29
 6e4:	cf 91       	pop	r28
 6e6:	08 95       	ret

000006e8 <timer0Stop>:
 6e8:	cf 93       	push	r28
 6ea:	df 93       	push	r29
 6ec:	cd b7       	in	r28, 0x3d	; 61
 6ee:	de b7       	in	r29, 0x3e	; 62
 6f0:	83 e5       	ldi	r24, 0x53	; 83
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	fc 01       	movw	r30, r24
 6f6:	80 81       	ld	r24, Z
 6f8:	83 e5       	ldi	r24, 0x53	; 83
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	fc 01       	movw	r30, r24
 6fe:	10 82       	st	Z, r1
 700:	00 00       	nop
 702:	df 91       	pop	r29
 704:	cf 91       	pop	r28
 706:	08 95       	ret

00000708 <timer0DelayMs>:
 708:	ef 92       	push	r14
 70a:	0f 93       	push	r16
 70c:	cf 93       	push	r28
 70e:	df 93       	push	r29
 710:	cd b7       	in	r28, 0x3d	; 61
 712:	de b7       	in	r29, 0x3e	; 62
 714:	29 97       	sbiw	r28, 0x09	; 9
 716:	0f b6       	in	r0, 0x3f	; 63
 718:	f8 94       	cli
 71a:	de bf       	out	0x3e, r29	; 62
 71c:	0f be       	out	0x3f, r0	; 63
 71e:	cd bf       	out	0x3d, r28	; 61
 720:	99 87       	std	Y+9, r25	; 0x09
 722:	88 87       	std	Y+8, r24	; 0x08
 724:	1c 82       	std	Y+4, r1	; 0x04
 726:	1d 82       	std	Y+5, r1	; 0x05
 728:	1e 82       	std	Y+6, r1	; 0x06
 72a:	1f 82       	std	Y+7, r1	; 0x07
 72c:	19 82       	std	Y+1, r1	; 0x01
 72e:	1b 82       	std	Y+3, r1	; 0x03
 730:	1a 82       	std	Y+2, r1	; 0x02
 732:	e1 2c       	mov	r14, r1
 734:	00 e0       	ldi	r16, 0x00	; 0
 736:	20 e0       	ldi	r18, 0x00	; 0
 738:	41 e0       	ldi	r20, 0x01	; 1
 73a:	60 e2       	ldi	r22, 0x20	; 32
 73c:	88 e0       	ldi	r24, 0x08	; 8
 73e:	0e 94 03 03 	call	0x606	; 0x606 <timer0Init>
 742:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <timer0+0x2>
 746:	48 2f       	mov	r20, r24
 748:	50 e0       	ldi	r21, 0x00	; 0
 74a:	28 ee       	ldi	r18, 0xE8	; 232
 74c:	33 e0       	ldi	r19, 0x03	; 3
 74e:	42 9f       	mul	r20, r18
 750:	c0 01       	movw	r24, r0
 752:	43 9f       	mul	r20, r19
 754:	90 0d       	add	r25, r0
 756:	52 9f       	mul	r21, r18
 758:	90 0d       	add	r25, r0
 75a:	11 24       	eor	r1, r1
 75c:	9c 01       	movw	r18, r24
 75e:	99 0f       	add	r25, r25
 760:	44 0b       	sbc	r20, r20
 762:	55 0b       	sbc	r21, r21
 764:	80 e0       	ldi	r24, 0x00	; 0
 766:	94 e2       	ldi	r25, 0x24	; 36
 768:	a4 ef       	ldi	r26, 0xF4	; 244
 76a:	b0 e0       	ldi	r27, 0x00	; 0
 76c:	bc 01       	movw	r22, r24
 76e:	cd 01       	movw	r24, r26
 770:	0e 94 85 05 	call	0xb0a	; 0xb0a <__divmodsi4>
 774:	da 01       	movw	r26, r20
 776:	c9 01       	movw	r24, r18
 778:	9c 01       	movw	r18, r24
 77a:	ad 01       	movw	r20, r26
 77c:	88 85       	ldd	r24, Y+8	; 0x08
 77e:	99 85       	ldd	r25, Y+9	; 0x09
 780:	cc 01       	movw	r24, r24
 782:	a0 e0       	ldi	r26, 0x00	; 0
 784:	b0 e0       	ldi	r27, 0x00	; 0
 786:	bc 01       	movw	r22, r24
 788:	cd 01       	movw	r24, r26
 78a:	0e 94 61 05 	call	0xac2	; 0xac2 <__mulsi3>
 78e:	dc 01       	movw	r26, r24
 790:	cb 01       	movw	r24, r22
 792:	8c 83       	std	Y+4, r24	; 0x04
 794:	9d 83       	std	Y+5, r25	; 0x05
 796:	ae 83       	std	Y+6, r26	; 0x06
 798:	bf 83       	std	Y+7, r27	; 0x07
 79a:	8c 81       	ldd	r24, Y+4	; 0x04
 79c:	9d 81       	ldd	r25, Y+5	; 0x05
 79e:	ae 81       	ldd	r26, Y+6	; 0x06
 7a0:	bf 81       	ldd	r27, Y+7	; 0x07
 7a2:	89 2f       	mov	r24, r25
 7a4:	9a 2f       	mov	r25, r26
 7a6:	ab 2f       	mov	r26, r27
 7a8:	bb 27       	eor	r27, r27
 7aa:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <gu32_sw_counter>
 7ae:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <gu32_sw_counter+0x1>
 7b2:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <gu32_sw_counter+0x2>
 7b6:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <gu32_sw_counter+0x3>
 7ba:	8c 81       	ldd	r24, Y+4	; 0x04
 7bc:	9d 81       	ldd	r25, Y+5	; 0x05
 7be:	ae 81       	ldd	r26, Y+6	; 0x06
 7c0:	bf 81       	ldd	r27, Y+7	; 0x07
 7c2:	99 27       	eor	r25, r25
 7c4:	aa 27       	eor	r26, r26
 7c6:	bb 27       	eor	r27, r27
 7c8:	89 2b       	or	r24, r25
 7ca:	8a 2b       	or	r24, r26
 7cc:	8b 2b       	or	r24, r27
 7ce:	b1 f0       	breq	.+44     	; 0x7fc <timer0DelayMs+0xf4>
 7d0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <gu32_sw_counter>
 7d4:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <gu32_sw_counter+0x1>
 7d8:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <gu32_sw_counter+0x2>
 7dc:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <gu32_sw_counter+0x3>
 7e0:	01 96       	adiw	r24, 0x01	; 1
 7e2:	a1 1d       	adc	r26, r1
 7e4:	b1 1d       	adc	r27, r1
 7e6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <gu32_sw_counter>
 7ea:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <gu32_sw_counter+0x1>
 7ee:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <gu32_sw_counter+0x2>
 7f2:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <gu32_sw_counter+0x3>
 7f6:	8c 81       	ldd	r24, Y+4	; 0x04
 7f8:	89 83       	std	Y+1, r24	; 0x01
 7fa:	02 c0       	rjmp	.+4      	; 0x800 <timer0DelayMs+0xf8>
 7fc:	8f ef       	ldi	r24, 0xFF	; 255
 7fe:	89 83       	std	Y+1, r24	; 0x01
 800:	89 81       	ldd	r24, Y+1	; 0x01
 802:	0e 94 30 03 	call	0x660	; 0x660 <timer0Set>
 806:	0e 94 5e 03 	call	0x6bc	; 0x6bc <timer0Start>
 80a:	1d c0       	rjmp	.+58     	; 0x846 <timer0DelayMs+0x13e>
 80c:	8a 81       	ldd	r24, Y+2	; 0x02
 80e:	9b 81       	ldd	r25, Y+3	; 0x03
 810:	01 96       	adiw	r24, 0x01	; 1
 812:	9b 83       	std	Y+3, r25	; 0x03
 814:	8a 83       	std	Y+2, r24	; 0x02
 816:	88 e5       	ldi	r24, 0x58	; 88
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	fc 01       	movw	r30, r24
 81c:	80 81       	ld	r24, Z
 81e:	88 2f       	mov	r24, r24
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	82 70       	andi	r24, 0x02	; 2
 824:	99 27       	eor	r25, r25
 826:	89 2b       	or	r24, r25
 828:	b1 f3       	breq	.-20     	; 0x816 <timer0DelayMs+0x10e>
 82a:	88 e5       	ldi	r24, 0x58	; 88
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	28 e5       	ldi	r18, 0x58	; 88
 830:	30 e0       	ldi	r19, 0x00	; 0
 832:	f9 01       	movw	r30, r18
 834:	20 81       	ld	r18, Z
 836:	22 60       	ori	r18, 0x02	; 2
 838:	fc 01       	movw	r30, r24
 83a:	20 83       	st	Z, r18
 83c:	8c e5       	ldi	r24, 0x5C	; 92
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	2f ef       	ldi	r18, 0xFF	; 255
 842:	fc 01       	movw	r30, r24
 844:	20 83       	st	Z, r18
 846:	8a 81       	ldd	r24, Y+2	; 0x02
 848:	9b 81       	ldd	r25, Y+3	; 0x03
 84a:	9c 01       	movw	r18, r24
 84c:	40 e0       	ldi	r20, 0x00	; 0
 84e:	50 e0       	ldi	r21, 0x00	; 0
 850:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <gu32_sw_counter>
 854:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <gu32_sw_counter+0x1>
 858:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <gu32_sw_counter+0x2>
 85c:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <gu32_sw_counter+0x3>
 860:	28 17       	cp	r18, r24
 862:	39 07       	cpc	r19, r25
 864:	4a 07       	cpc	r20, r26
 866:	5b 07       	cpc	r21, r27
 868:	88 f2       	brcs	.-94     	; 0x80c <timer0DelayMs+0x104>
 86a:	0e 94 74 03 	call	0x6e8	; 0x6e8 <timer0Stop>
 86e:	00 00       	nop
 870:	29 96       	adiw	r28, 0x09	; 9
 872:	0f b6       	in	r0, 0x3f	; 63
 874:	f8 94       	cli
 876:	de bf       	out	0x3e, r29	; 62
 878:	0f be       	out	0x3f, r0	; 63
 87a:	cd bf       	out	0x3d, r28	; 61
 87c:	df 91       	pop	r29
 87e:	cf 91       	pop	r28
 880:	0f 91       	pop	r16
 882:	ef 90       	pop	r14
 884:	08 95       	ret

00000886 <timer2Init>:
 886:	cf 92       	push	r12
 888:	ef 92       	push	r14
 88a:	0f 93       	push	r16
 88c:	cf 93       	push	r28
 88e:	df 93       	push	r29
 890:	cd b7       	in	r28, 0x3d	; 61
 892:	de b7       	in	r29, 0x3e	; 62
 894:	27 97       	sbiw	r28, 0x07	; 7
 896:	0f b6       	in	r0, 0x3f	; 63
 898:	f8 94       	cli
 89a:	de bf       	out	0x3e, r29	; 62
 89c:	0f be       	out	0x3f, r0	; 63
 89e:	cd bf       	out	0x3d, r28	; 61
 8a0:	89 83       	std	Y+1, r24	; 0x01
 8a2:	6a 83       	std	Y+2, r22	; 0x02
 8a4:	4b 83       	std	Y+3, r20	; 0x03
 8a6:	2c 83       	std	Y+4, r18	; 0x04
 8a8:	0d 83       	std	Y+5, r16	; 0x05
 8aa:	ee 82       	std	Y+6, r14	; 0x06
 8ac:	cf 82       	std	Y+7, r12	; 0x07
 8ae:	89 81       	ldd	r24, Y+1	; 0x01
 8b0:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <timer2>
 8b4:	8a 81       	ldd	r24, Y+2	; 0x02
 8b6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <timer2+0x1>
 8ba:	8b 81       	ldd	r24, Y+3	; 0x03
 8bc:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <timer2+0x2>
 8c0:	8c 81       	ldd	r24, Y+4	; 0x04
 8c2:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <timer2+0x3>
 8c6:	8d 81       	ldd	r24, Y+5	; 0x05
 8c8:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <timer2+0x4>
 8cc:	8e 81       	ldd	r24, Y+6	; 0x06
 8ce:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <timer2+0x5>
 8d2:	8f 81       	ldd	r24, Y+7	; 0x07
 8d4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <timer2+0x6>
 8d8:	00 00       	nop
 8da:	27 96       	adiw	r28, 0x07	; 7
 8dc:	0f b6       	in	r0, 0x3f	; 63
 8de:	f8 94       	cli
 8e0:	de bf       	out	0x3e, r29	; 62
 8e2:	0f be       	out	0x3f, r0	; 63
 8e4:	cd bf       	out	0x3d, r28	; 61
 8e6:	df 91       	pop	r29
 8e8:	cf 91       	pop	r28
 8ea:	0f 91       	pop	r16
 8ec:	ef 90       	pop	r14
 8ee:	cf 90       	pop	r12
 8f0:	08 95       	ret

000008f2 <timer2Set>:
 8f2:	cf 93       	push	r28
 8f4:	df 93       	push	r29
 8f6:	1f 92       	push	r1
 8f8:	cd b7       	in	r28, 0x3d	; 61
 8fa:	de b7       	in	r29, 0x3e	; 62
 8fc:	89 83       	std	Y+1, r24	; 0x01
 8fe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <timer0>
 902:	88 2f       	mov	r24, r24
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	00 97       	sbiw	r24, 0x00	; 0
 908:	19 f0       	breq	.+6      	; 0x910 <timer2Set+0x1e>
 90a:	08 97       	sbiw	r24, 0x08	; 8
 90c:	61 f0       	breq	.+24     	; 0x926 <timer2Set+0x34>
 90e:	1a c0       	rjmp	.+52     	; 0x944 <timer2Set+0x52>
 910:	84 e4       	ldi	r24, 0x44	; 68
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	24 e4       	ldi	r18, 0x44	; 68
 916:	30 e0       	ldi	r19, 0x00	; 0
 918:	f9 01       	movw	r30, r18
 91a:	30 81       	ld	r19, Z
 91c:	29 81       	ldd	r18, Y+1	; 0x01
 91e:	23 2b       	or	r18, r19
 920:	fc 01       	movw	r30, r24
 922:	20 83       	st	Z, r18
 924:	0f c0       	rjmp	.+30     	; 0x944 <timer2Set+0x52>
 926:	84 e4       	ldi	r24, 0x44	; 68
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	fc 01       	movw	r30, r24
 92c:	10 82       	st	Z, r1
 92e:	83 e4       	ldi	r24, 0x43	; 67
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	23 e4       	ldi	r18, 0x43	; 67
 934:	30 e0       	ldi	r19, 0x00	; 0
 936:	f9 01       	movw	r30, r18
 938:	30 81       	ld	r19, Z
 93a:	29 81       	ldd	r18, Y+1	; 0x01
 93c:	23 2b       	or	r18, r19
 93e:	fc 01       	movw	r30, r24
 940:	20 83       	st	Z, r18
 942:	00 00       	nop
 944:	00 00       	nop
 946:	0f 90       	pop	r0
 948:	df 91       	pop	r29
 94a:	cf 91       	pop	r28
 94c:	08 95       	ret

0000094e <timer2Read>:
 94e:	cf 93       	push	r28
 950:	df 93       	push	r29
 952:	cd b7       	in	r28, 0x3d	; 61
 954:	de b7       	in	r29, 0x3e	; 62
 956:	84 e4       	ldi	r24, 0x44	; 68
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	fc 01       	movw	r30, r24
 95c:	80 81       	ld	r24, Z
 95e:	df 91       	pop	r29
 960:	cf 91       	pop	r28
 962:	08 95       	ret

00000964 <timer2Start>:
 964:	cf 93       	push	r28
 966:	df 93       	push	r29
 968:	cd b7       	in	r28, 0x3d	; 61
 96a:	de b7       	in	r29, 0x3e	; 62
 96c:	85 e4       	ldi	r24, 0x45	; 69
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	25 e4       	ldi	r18, 0x45	; 69
 972:	30 e0       	ldi	r19, 0x00	; 0
 974:	f9 01       	movw	r30, r18
 976:	30 81       	ld	r19, Z
 978:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer2>
 97c:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <timer2+0x2>
 980:	24 2b       	or	r18, r20
 982:	23 2b       	or	r18, r19
 984:	fc 01       	movw	r30, r24
 986:	20 83       	st	Z, r18
 988:	00 00       	nop
 98a:	df 91       	pop	r29
 98c:	cf 91       	pop	r28
 98e:	08 95       	ret

00000990 <timer2Stop>:
 990:	cf 93       	push	r28
 992:	df 93       	push	r29
 994:	cd b7       	in	r28, 0x3d	; 61
 996:	de b7       	in	r29, 0x3e	; 62
 998:	85 e4       	ldi	r24, 0x45	; 69
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	fc 01       	movw	r30, r24
 99e:	80 81       	ld	r24, Z
 9a0:	85 e4       	ldi	r24, 0x45	; 69
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	fc 01       	movw	r30, r24
 9a6:	10 82       	st	Z, r1
 9a8:	00 00       	nop
 9aa:	df 91       	pop	r29
 9ac:	cf 91       	pop	r28
 9ae:	08 95       	ret

000009b0 <__vector_11>:

/************************************************ Timers ISRs Control **********************************************************/
ISR_TIMER0_OVF(){
 9b0:	78 94       	sei
 9b2:	1f 92       	push	r1
 9b4:	0f 92       	push	r0
 9b6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 9ba:	0f 92       	push	r0
 9bc:	11 24       	eor	r1, r1
 9be:	2f 93       	push	r18
 9c0:	3f 93       	push	r19
 9c2:	4f 93       	push	r20
 9c4:	5f 93       	push	r21
 9c6:	6f 93       	push	r22
 9c8:	7f 93       	push	r23
 9ca:	8f 93       	push	r24
 9cc:	9f 93       	push	r25
 9ce:	af 93       	push	r26
 9d0:	bf 93       	push	r27
 9d2:	ef 93       	push	r30
 9d4:	ff 93       	push	r31
 9d6:	cf 93       	push	r28
 9d8:	df 93       	push	r29
 9da:	cd b7       	in	r28, 0x3d	; 61
 9dc:	de b7       	in	r29, 0x3e	; 62
   /*reset pins*/
   gpioPinWrite(GPIOD,(BIT4|BIT5),LOW);
 9de:	40 e0       	ldi	r20, 0x00	; 0
 9e0:	60 e3       	ldi	r22, 0x30	; 48
 9e2:	83 e0       	ldi	r24, 0x03	; 3
 9e4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <gpioPinWrite>
   /*reload TCNT0*/
   TCNT0 = gu8_preloader;  //debug point
 9e8:	82 e5       	ldi	r24, 0x52	; 82
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <gu8_preloader>
 9f0:	fc 01       	movw	r30, r24
 9f2:	20 83       	st	Z, r18
}
 9f4:	00 00       	nop
 9f6:	df 91       	pop	r29
 9f8:	cf 91       	pop	r28
 9fa:	ff 91       	pop	r31
 9fc:	ef 91       	pop	r30
 9fe:	bf 91       	pop	r27
 a00:	af 91       	pop	r26
 a02:	9f 91       	pop	r25
 a04:	8f 91       	pop	r24
 a06:	7f 91       	pop	r23
 a08:	6f 91       	pop	r22
 a0a:	5f 91       	pop	r21
 a0c:	4f 91       	pop	r20
 a0e:	3f 91       	pop	r19
 a10:	2f 91       	pop	r18
 a12:	0f 90       	pop	r0
 a14:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 a18:	0f 90       	pop	r0
 a1a:	1f 90       	pop	r1
 a1c:	18 95       	reti

00000a1e <__vector_10>:

ISR_TIMER0_COMP(){
 a1e:	78 94       	sei
 a20:	1f 92       	push	r1
 a22:	0f 92       	push	r0
 a24:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 a28:	0f 92       	push	r0
 a2a:	11 24       	eor	r1, r1
 a2c:	2f 93       	push	r18
 a2e:	3f 93       	push	r19
 a30:	4f 93       	push	r20
 a32:	5f 93       	push	r21
 a34:	6f 93       	push	r22
 a36:	7f 93       	push	r23
 a38:	8f 93       	push	r24
 a3a:	9f 93       	push	r25
 a3c:	af 93       	push	r26
 a3e:	bf 93       	push	r27
 a40:	ef 93       	push	r30
 a42:	ff 93       	push	r31
 a44:	cf 93       	push	r28
 a46:	df 93       	push	r29
 a48:	cd b7       	in	r28, 0x3d	; 61
 a4a:	de b7       	in	r29, 0x3e	; 62
   /*set pins*/
   gpioPinWrite(GPIOD,(BIT4|BIT5),HIGH);
 a4c:	4f ef       	ldi	r20, 0xFF	; 255
 a4e:	60 e3       	ldi	r22, 0x30	; 48
 a50:	83 e0       	ldi	r24, 0x03	; 3
 a52:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <gpioPinWrite>
}
 a56:	00 00       	nop
 a58:	df 91       	pop	r29
 a5a:	cf 91       	pop	r28
 a5c:	ff 91       	pop	r31
 a5e:	ef 91       	pop	r30
 a60:	bf 91       	pop	r27
 a62:	af 91       	pop	r26
 a64:	9f 91       	pop	r25
 a66:	8f 91       	pop	r24
 a68:	7f 91       	pop	r23
 a6a:	6f 91       	pop	r22
 a6c:	5f 91       	pop	r21
 a6e:	4f 91       	pop	r20
 a70:	3f 91       	pop	r19
 a72:	2f 91       	pop	r18
 a74:	0f 90       	pop	r0
 a76:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 a7a:	0f 90       	pop	r0
 a7c:	1f 90       	pop	r1
 a7e:	18 95       	reti

00000a80 <__vector_5>:

ISR_TIMER2_OVF(){
 a80:	78 94       	sei
 a82:	1f 92       	push	r1
 a84:	0f 92       	push	r0
 a86:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 a8a:	0f 92       	push	r0
 a8c:	11 24       	eor	r1, r1
 a8e:	8f 93       	push	r24
 a90:	9f 93       	push	r25
 a92:	cf 93       	push	r28
 a94:	df 93       	push	r29
 a96:	cd b7       	in	r28, 0x3d	; 61
 a98:	de b7       	in	r29, 0x3e	; 62
   /* decrement global software counter*/
   gu16_t2_sw_counter-=1;
 a9a:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <gu16_t2_sw_counter>
 a9e:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <gu16_t2_sw_counter+0x1>
 aa2:	01 97       	sbiw	r24, 0x01	; 1
 aa4:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <gu16_t2_sw_counter+0x1>
 aa8:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <gu16_t2_sw_counter>
}
 aac:	00 00       	nop
 aae:	df 91       	pop	r29
 ab0:	cf 91       	pop	r28
 ab2:	9f 91       	pop	r25
 ab4:	8f 91       	pop	r24
 ab6:	0f 90       	pop	r0
 ab8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 abc:	0f 90       	pop	r0
 abe:	1f 90       	pop	r1
 ac0:	18 95       	reti

00000ac2 <__mulsi3>:
 ac2:	db 01       	movw	r26, r22
 ac4:	8f 93       	push	r24
 ac6:	9f 93       	push	r25
 ac8:	0e 94 a4 05 	call	0xb48	; 0xb48 <__muluhisi3>
 acc:	bf 91       	pop	r27
 ace:	af 91       	pop	r26
 ad0:	a2 9f       	mul	r26, r18
 ad2:	80 0d       	add	r24, r0
 ad4:	91 1d       	adc	r25, r1
 ad6:	a3 9f       	mul	r26, r19
 ad8:	90 0d       	add	r25, r0
 ada:	b2 9f       	mul	r27, r18
 adc:	90 0d       	add	r25, r0
 ade:	11 24       	eor	r1, r1
 ae0:	08 95       	ret

00000ae2 <__divmodhi4>:
 ae2:	97 fb       	bst	r25, 7
 ae4:	07 2e       	mov	r0, r23
 ae6:	16 f4       	brtc	.+4      	; 0xaec <__divmodhi4+0xa>
 ae8:	00 94       	com	r0
 aea:	07 d0       	rcall	.+14     	; 0xafa <__divmodhi4_neg1>
 aec:	77 fd       	sbrc	r23, 7
 aee:	09 d0       	rcall	.+18     	; 0xb02 <__divmodhi4_neg2>
 af0:	0e 94 af 05 	call	0xb5e	; 0xb5e <__udivmodhi4>
 af4:	07 fc       	sbrc	r0, 7
 af6:	05 d0       	rcall	.+10     	; 0xb02 <__divmodhi4_neg2>
 af8:	3e f4       	brtc	.+14     	; 0xb08 <__divmodhi4_exit>

00000afa <__divmodhi4_neg1>:
 afa:	90 95       	com	r25
 afc:	81 95       	neg	r24
 afe:	9f 4f       	sbci	r25, 0xFF	; 255
 b00:	08 95       	ret

00000b02 <__divmodhi4_neg2>:
 b02:	70 95       	com	r23
 b04:	61 95       	neg	r22
 b06:	7f 4f       	sbci	r23, 0xFF	; 255

00000b08 <__divmodhi4_exit>:
 b08:	08 95       	ret

00000b0a <__divmodsi4>:
 b0a:	05 2e       	mov	r0, r21
 b0c:	97 fb       	bst	r25, 7
 b0e:	1e f4       	brtc	.+6      	; 0xb16 <__divmodsi4+0xc>
 b10:	00 94       	com	r0
 b12:	0e 94 9c 05 	call	0xb38	; 0xb38 <__negsi2>
 b16:	57 fd       	sbrc	r21, 7
 b18:	07 d0       	rcall	.+14     	; 0xb28 <__divmodsi4_neg2>
 b1a:	0e 94 c3 05 	call	0xb86	; 0xb86 <__udivmodsi4>
 b1e:	07 fc       	sbrc	r0, 7
 b20:	03 d0       	rcall	.+6      	; 0xb28 <__divmodsi4_neg2>
 b22:	4e f4       	brtc	.+18     	; 0xb36 <__divmodsi4_exit>
 b24:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__negsi2>

00000b28 <__divmodsi4_neg2>:
 b28:	50 95       	com	r21
 b2a:	40 95       	com	r20
 b2c:	30 95       	com	r19
 b2e:	21 95       	neg	r18
 b30:	3f 4f       	sbci	r19, 0xFF	; 255
 b32:	4f 4f       	sbci	r20, 0xFF	; 255
 b34:	5f 4f       	sbci	r21, 0xFF	; 255

00000b36 <__divmodsi4_exit>:
 b36:	08 95       	ret

00000b38 <__negsi2>:
 b38:	90 95       	com	r25
 b3a:	80 95       	com	r24
 b3c:	70 95       	com	r23
 b3e:	61 95       	neg	r22
 b40:	7f 4f       	sbci	r23, 0xFF	; 255
 b42:	8f 4f       	sbci	r24, 0xFF	; 255
 b44:	9f 4f       	sbci	r25, 0xFF	; 255
 b46:	08 95       	ret

00000b48 <__muluhisi3>:
 b48:	0e 94 e5 05 	call	0xbca	; 0xbca <__umulhisi3>
 b4c:	a5 9f       	mul	r26, r21
 b4e:	90 0d       	add	r25, r0
 b50:	b4 9f       	mul	r27, r20
 b52:	90 0d       	add	r25, r0
 b54:	a4 9f       	mul	r26, r20
 b56:	80 0d       	add	r24, r0
 b58:	91 1d       	adc	r25, r1
 b5a:	11 24       	eor	r1, r1
 b5c:	08 95       	ret

00000b5e <__udivmodhi4>:
 b5e:	aa 1b       	sub	r26, r26
 b60:	bb 1b       	sub	r27, r27
 b62:	51 e1       	ldi	r21, 0x11	; 17
 b64:	07 c0       	rjmp	.+14     	; 0xb74 <__udivmodhi4_ep>

00000b66 <__udivmodhi4_loop>:
 b66:	aa 1f       	adc	r26, r26
 b68:	bb 1f       	adc	r27, r27
 b6a:	a6 17       	cp	r26, r22
 b6c:	b7 07       	cpc	r27, r23
 b6e:	10 f0       	brcs	.+4      	; 0xb74 <__udivmodhi4_ep>
 b70:	a6 1b       	sub	r26, r22
 b72:	b7 0b       	sbc	r27, r23

00000b74 <__udivmodhi4_ep>:
 b74:	88 1f       	adc	r24, r24
 b76:	99 1f       	adc	r25, r25
 b78:	5a 95       	dec	r21
 b7a:	a9 f7       	brne	.-22     	; 0xb66 <__udivmodhi4_loop>
 b7c:	80 95       	com	r24
 b7e:	90 95       	com	r25
 b80:	bc 01       	movw	r22, r24
 b82:	cd 01       	movw	r24, r26
 b84:	08 95       	ret

00000b86 <__udivmodsi4>:
 b86:	a1 e2       	ldi	r26, 0x21	; 33
 b88:	1a 2e       	mov	r1, r26
 b8a:	aa 1b       	sub	r26, r26
 b8c:	bb 1b       	sub	r27, r27
 b8e:	fd 01       	movw	r30, r26
 b90:	0d c0       	rjmp	.+26     	; 0xbac <__udivmodsi4_ep>

00000b92 <__udivmodsi4_loop>:
 b92:	aa 1f       	adc	r26, r26
 b94:	bb 1f       	adc	r27, r27
 b96:	ee 1f       	adc	r30, r30
 b98:	ff 1f       	adc	r31, r31
 b9a:	a2 17       	cp	r26, r18
 b9c:	b3 07       	cpc	r27, r19
 b9e:	e4 07       	cpc	r30, r20
 ba0:	f5 07       	cpc	r31, r21
 ba2:	20 f0       	brcs	.+8      	; 0xbac <__udivmodsi4_ep>
 ba4:	a2 1b       	sub	r26, r18
 ba6:	b3 0b       	sbc	r27, r19
 ba8:	e4 0b       	sbc	r30, r20
 baa:	f5 0b       	sbc	r31, r21

00000bac <__udivmodsi4_ep>:
 bac:	66 1f       	adc	r22, r22
 bae:	77 1f       	adc	r23, r23
 bb0:	88 1f       	adc	r24, r24
 bb2:	99 1f       	adc	r25, r25
 bb4:	1a 94       	dec	r1
 bb6:	69 f7       	brne	.-38     	; 0xb92 <__udivmodsi4_loop>
 bb8:	60 95       	com	r22
 bba:	70 95       	com	r23
 bbc:	80 95       	com	r24
 bbe:	90 95       	com	r25
 bc0:	9b 01       	movw	r18, r22
 bc2:	ac 01       	movw	r20, r24
 bc4:	bd 01       	movw	r22, r26
 bc6:	cf 01       	movw	r24, r30
 bc8:	08 95       	ret

00000bca <__umulhisi3>:
 bca:	a2 9f       	mul	r26, r18
 bcc:	b0 01       	movw	r22, r0
 bce:	b3 9f       	mul	r27, r19
 bd0:	c0 01       	movw	r24, r0
 bd2:	a3 9f       	mul	r26, r19
 bd4:	70 0d       	add	r23, r0
 bd6:	81 1d       	adc	r24, r1
 bd8:	11 24       	eor	r1, r1
 bda:	91 1d       	adc	r25, r1
 bdc:	b2 9f       	mul	r27, r18
 bde:	70 0d       	add	r23, r0
 be0:	81 1d       	adc	r24, r1
 be2:	11 24       	eor	r1, r1
 be4:	91 1d       	adc	r25, r1
 be6:	08 95       	ret

00000be8 <_exit>:
 be8:	f8 94       	cli

00000bea <__stop_program>:
 bea:	ff cf       	rjmp	.-2      	; 0xbea <__stop_program>
